/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../svelte/node_modules/.pnpm/clsx@2.1.1/node_modules/clsx/dist/clsx.mjs":
/*!*******************************************************************************!*\
  !*** ../svelte/node_modules/.pnpm/clsx@2.1.1/node_modules/clsx/dist/clsx.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   clsx: () => (/* binding */ clsx),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function r(e){var t,f,n="";if("string"==typeof e||"number"==typeof e)n+=e;else if("object"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=" "),n+=f)}else for(f in e)e[f]&&(n&&(n+=" "),n+=f);return n}function clsx(){for(var e,t,f=0,n="",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=" "),n+=t);return n}/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (clsx);

/***/ }),

/***/ "../svelte/node_modules/.pnpm/esm-env@1.2.1/node_modules/esm-env/false.js":
/*!********************************************************************************!*\
  !*** ../svelte/node_modules/.pnpm/esm-env@1.2.1/node_modules/esm-env/false.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (false);


/***/ }),

/***/ "../svelte/node_modules/.pnpm/esm-env@1.2.1/node_modules/esm-env/index.js":
/*!********************************************************************************!*\
  !*** ../svelte/node_modules/.pnpm/esm-env@1.2.1/node_modules/esm-env/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BROWSER: () => (/* reexport safe */ esm_env_browser__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   DEV: () => (/* reexport safe */ esm_env_browser__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   NODE: () => (/* reexport safe */ esm_env_node__WEBPACK_IMPORTED_MODULE_1__["default"])
/* harmony export */ });
/* harmony import */ var esm_env_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! esm-env/development */ "../svelte/node_modules/.pnpm/esm-env@1.2.1/node_modules/esm-env/true.js");
/* harmony import */ var esm_env_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! esm-env/node */ "../svelte/node_modules/.pnpm/esm-env@1.2.1/node_modules/esm-env/false.js");





/***/ }),

/***/ "../svelte/node_modules/.pnpm/esm-env@1.2.1/node_modules/esm-env/true.js":
/*!*******************************************************************************!*\
  !*** ../svelte/node_modules/.pnpm/esm-env@1.2.1/node_modules/esm-env/true.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (true);


/***/ }),

/***/ "../svelte/packages/svelte/src/constants.js":
/*!**************************************************!*\
  !*** ../svelte/packages/svelte/src/constants.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EACH_INDEX_REACTIVE: () => (/* binding */ EACH_INDEX_REACTIVE),
/* harmony export */   EACH_IS_ANIMATED: () => (/* binding */ EACH_IS_ANIMATED),
/* harmony export */   EACH_IS_CONTROLLED: () => (/* binding */ EACH_IS_CONTROLLED),
/* harmony export */   EACH_ITEM_IMMUTABLE: () => (/* binding */ EACH_ITEM_IMMUTABLE),
/* harmony export */   EACH_ITEM_REACTIVE: () => (/* binding */ EACH_ITEM_REACTIVE),
/* harmony export */   ELEMENTS_WITHOUT_TEXT: () => (/* binding */ ELEMENTS_WITHOUT_TEXT),
/* harmony export */   ELEMENT_IS_NAMESPACED: () => (/* binding */ ELEMENT_IS_NAMESPACED),
/* harmony export */   ELEMENT_PRESERVE_ATTRIBUTE_CASE: () => (/* binding */ ELEMENT_PRESERVE_ATTRIBUTE_CASE),
/* harmony export */   FILENAME: () => (/* binding */ FILENAME),
/* harmony export */   HMR: () => (/* binding */ HMR),
/* harmony export */   HYDRATION_END: () => (/* binding */ HYDRATION_END),
/* harmony export */   HYDRATION_ERROR: () => (/* binding */ HYDRATION_ERROR),
/* harmony export */   HYDRATION_START: () => (/* binding */ HYDRATION_START),
/* harmony export */   HYDRATION_START_ELSE: () => (/* binding */ HYDRATION_START_ELSE),
/* harmony export */   IGNORABLE_RUNTIME_WARNINGS: () => (/* binding */ IGNORABLE_RUNTIME_WARNINGS),
/* harmony export */   NAMESPACE_MATHML: () => (/* binding */ NAMESPACE_MATHML),
/* harmony export */   NAMESPACE_SVG: () => (/* binding */ NAMESPACE_SVG),
/* harmony export */   PROPS_IS_BINDABLE: () => (/* binding */ PROPS_IS_BINDABLE),
/* harmony export */   PROPS_IS_IMMUTABLE: () => (/* binding */ PROPS_IS_IMMUTABLE),
/* harmony export */   PROPS_IS_LAZY_INITIAL: () => (/* binding */ PROPS_IS_LAZY_INITIAL),
/* harmony export */   PROPS_IS_RUNES: () => (/* binding */ PROPS_IS_RUNES),
/* harmony export */   PROPS_IS_UPDATED: () => (/* binding */ PROPS_IS_UPDATED),
/* harmony export */   TEMPLATE_FRAGMENT: () => (/* binding */ TEMPLATE_FRAGMENT),
/* harmony export */   TEMPLATE_USE_IMPORT_NODE: () => (/* binding */ TEMPLATE_USE_IMPORT_NODE),
/* harmony export */   TRANSITION_GLOBAL: () => (/* binding */ TRANSITION_GLOBAL),
/* harmony export */   TRANSITION_IN: () => (/* binding */ TRANSITION_IN),
/* harmony export */   TRANSITION_OUT: () => (/* binding */ TRANSITION_OUT),
/* harmony export */   UNINITIALIZED: () => (/* binding */ UNINITIALIZED)
/* harmony export */ });
const EACH_ITEM_REACTIVE = 1;
const EACH_INDEX_REACTIVE = 1 << 1;
/** See EachBlock interface metadata.is_controlled for an explanation what this is */
const EACH_IS_CONTROLLED = 1 << 2;
const EACH_IS_ANIMATED = 1 << 3;
const EACH_ITEM_IMMUTABLE = 1 << 4;
const PROPS_IS_IMMUTABLE = 1;
const PROPS_IS_RUNES = 1 << 1;
const PROPS_IS_UPDATED = 1 << 2;
const PROPS_IS_BINDABLE = 1 << 3;
const PROPS_IS_LAZY_INITIAL = 1 << 4;
const TRANSITION_IN = 1;
const TRANSITION_OUT = 1 << 1;
const TRANSITION_GLOBAL = 1 << 2;
const TEMPLATE_FRAGMENT = 1;
const TEMPLATE_USE_IMPORT_NODE = 1 << 1;
const HYDRATION_START = '[';
/** used to indicate that an `{:else}...` block was rendered */
const HYDRATION_START_ELSE = '[!';
const HYDRATION_END = ']';
const HYDRATION_ERROR = {};
const ELEMENT_IS_NAMESPACED = 1;
const ELEMENT_PRESERVE_ATTRIBUTE_CASE = 1 << 1;
const UNINITIALIZED = Symbol();

// Dev-time component properties
const FILENAME = Symbol('filename');
const HMR = Symbol('hmr');
const NAMESPACE_SVG = 'http://www.w3.org/2000/svg';
const NAMESPACE_MATHML = 'http://www.w3.org/1998/Math/MathML';

// we use a list of ignorable runtime warnings because not every runtime warning
// can be ignored and we want to keep the validation for svelte-ignore in place
const IGNORABLE_RUNTIME_WARNINGS = /** @type {const} */['state_snapshot_uncloneable', 'binding_property_non_reactive', 'hydration_attribute_changed', 'hydration_html_changed', 'ownership_invalid_binding', 'ownership_invalid_mutation'];

/**
 * Whitespace inside one of these elements will not result in
 * a whitespace node being created in any circumstances. (This
 * list is almost certainly very incomplete)
 * TODO this is currently unused
 */
const ELEMENTS_WITHOUT_TEXT = ['audio', 'datalist', 'dl', 'optgroup', 'select', 'video'];

/***/ }),

/***/ "../svelte/packages/svelte/src/escaping.js":
/*!*************************************************!*\
  !*** ../svelte/packages/svelte/src/escaping.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   escape_html: () => (/* binding */ escape_html)
/* harmony export */ });
const ATTR_REGEX = /[&"<]/g;
const CONTENT_REGEX = /[&<]/g;

/**
 * @template V
 * @param {V} value
 * @param {boolean} [is_attr]
 */
function escape_html(value, is_attr) {
  const str = String(value ?? '');
  const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;
  pattern.lastIndex = 0;
  let escaped = '';
  let last = 0;
  while (pattern.test(str)) {
    const i = pattern.lastIndex - 1;
    const ch = str[i];
    escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : ch === '"' ? '&quot;' : '&lt;');
    last = i + 1;
  }
  return escaped + str.substring(last);
}

/***/ }),

/***/ "../svelte/packages/svelte/src/index-client.js":
/*!*****************************************************!*\
  !*** ../svelte/packages/svelte/src/index-client.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   afterUpdate: () => (/* binding */ afterUpdate),
/* harmony export */   beforeUpdate: () => (/* binding */ beforeUpdate),
/* harmony export */   createEventDispatcher: () => (/* binding */ createEventDispatcher),
/* harmony export */   createRawSnippet: () => (/* reexport safe */ _internal_client_dom_blocks_snippet_js__WEBPACK_IMPORTED_MODULE_9__.createRawSnippet),
/* harmony export */   flushSync: () => (/* binding */ flushSync),
/* harmony export */   getAllContexts: () => (/* reexport safe */ _internal_client_context_js__WEBPACK_IMPORTED_MODULE_6__.getAllContexts),
/* harmony export */   getContext: () => (/* reexport safe */ _internal_client_context_js__WEBPACK_IMPORTED_MODULE_6__.getContext),
/* harmony export */   hasContext: () => (/* reexport safe */ _internal_client_context_js__WEBPACK_IMPORTED_MODULE_6__.hasContext),
/* harmony export */   hydrate: () => (/* reexport safe */ _internal_client_render_js__WEBPACK_IMPORTED_MODULE_8__.hydrate),
/* harmony export */   mount: () => (/* reexport safe */ _internal_client_render_js__WEBPACK_IMPORTED_MODULE_8__.mount),
/* harmony export */   onDestroy: () => (/* binding */ onDestroy),
/* harmony export */   onMount: () => (/* binding */ onMount),
/* harmony export */   setContext: () => (/* reexport safe */ _internal_client_context_js__WEBPACK_IMPORTED_MODULE_6__.setContext),
/* harmony export */   tick: () => (/* reexport safe */ _internal_client_runtime_js__WEBPACK_IMPORTED_MODULE_0__.tick),
/* harmony export */   unmount: () => (/* reexport safe */ _internal_client_render_js__WEBPACK_IMPORTED_MODULE_8__.unmount),
/* harmony export */   untrack: () => (/* reexport safe */ _internal_client_runtime_js__WEBPACK_IMPORTED_MODULE_0__.untrack)
/* harmony export */ });
/* harmony import */ var _internal_client_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/client/runtime.js */ "../svelte/packages/svelte/src/internal/client/runtime.js");
/* harmony import */ var _internal_shared_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/shared/utils.js */ "../svelte/packages/svelte/src/internal/shared/utils.js");
/* harmony import */ var _internal_client_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/client/index.js */ "../svelte/packages/svelte/src/internal/client/index.js");
/* harmony import */ var _internal_client_errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/client/errors.js */ "../svelte/packages/svelte/src/internal/client/errors.js");
/* harmony import */ var _internal_shared_errors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./internal/shared/errors.js */ "../svelte/packages/svelte/src/internal/shared/errors.js");
/* harmony import */ var _internal_flags_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./internal/flags/index.js */ "../svelte/packages/svelte/src/internal/flags/index.js");
/* harmony import */ var _internal_client_context_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./internal/client/context.js */ "../svelte/packages/svelte/src/internal/client/context.js");
/* harmony import */ var esm_env__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! esm-env */ "../svelte/node_modules/.pnpm/esm-env@1.2.1/node_modules/esm-env/index.js");
/* harmony import */ var _internal_client_render_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./internal/client/render.js */ "../svelte/packages/svelte/src/internal/client/render.js");
/* harmony import */ var _internal_client_dom_blocks_snippet_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./internal/client/dom/blocks/snippet.js */ "../svelte/packages/svelte/src/internal/client/dom/blocks/snippet.js");
/** @import { ComponentContext, ComponentContextLegacy } from '#client' */
/** @import { EventDispatcher } from './index.js' */
/** @import { NotFunction } from './internal/types.js' */








if (esm_env__WEBPACK_IMPORTED_MODULE_7__.DEV) {
  /**
   * @param {string} rune
   */
  function throw_rune_error(rune) {
    if (!(rune in globalThis)) {
      // TODO if people start adjusting the "this can contain runes" config through v-p-s more, adjust this message
      /** @type {any} */
      let value; // let's hope noone modifies this global, but belts and braces
      Object.defineProperty(globalThis, rune, {
        configurable: true,
        // eslint-disable-next-line getter-return
        get: () => {
          if (value !== undefined) {
            return value;
          }
          _internal_client_errors_js__WEBPACK_IMPORTED_MODULE_3__.rune_outside_svelte(rune);
        },
        set: v => {
          value = v;
        }
      });
    }
  }
  throw_rune_error('$state');
  throw_rune_error('$effect');
  throw_rune_error('$derived');
  throw_rune_error('$inspect');
  throw_rune_error('$props');
  throw_rune_error('$bindable');
}

/**
 * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.
 * It must be called during the component's initialisation (but doesn't need to live *inside* the component;
 * it can be called from an external module).
 *
 * If a function is returned _synchronously_ from `onMount`, it will be called when the component is unmounted.
 *
 * `onMount` does not run inside [server-side components](https://svelte.dev/docs/svelte/svelte-server#render).
 *
 * @template T
 * @param {() => NotFunction<T> | Promise<NotFunction<T>> | (() => any)} fn
 * @returns {void}
 */
function onMount(fn) {
  if (_internal_client_context_js__WEBPACK_IMPORTED_MODULE_6__.component_context === null) {
    (0,_internal_shared_errors_js__WEBPACK_IMPORTED_MODULE_4__.lifecycle_outside_component)('onMount');
  }
  if (_internal_flags_index_js__WEBPACK_IMPORTED_MODULE_5__.legacy_mode_flag && _internal_client_context_js__WEBPACK_IMPORTED_MODULE_6__.component_context.l !== null) {
    init_update_callbacks(_internal_client_context_js__WEBPACK_IMPORTED_MODULE_6__.component_context).m.push(fn);
  } else {
    (0,_internal_client_index_js__WEBPACK_IMPORTED_MODULE_2__.user_effect)(() => {
      const cleanup = (0,_internal_client_runtime_js__WEBPACK_IMPORTED_MODULE_0__.untrack)(fn);
      if (typeof cleanup === 'function') return /** @type {() => void} */cleanup;
    });
  }
}

/**
 * Schedules a callback to run immediately before the component is unmounted.
 *
 * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the
 * only one that runs inside a server-side component.
 *
 * @param {() => any} fn
 * @returns {void}
 */
function onDestroy(fn) {
  if (_internal_client_context_js__WEBPACK_IMPORTED_MODULE_6__.component_context === null) {
    (0,_internal_shared_errors_js__WEBPACK_IMPORTED_MODULE_4__.lifecycle_outside_component)('onDestroy');
  }
  onMount(() => () => (0,_internal_client_runtime_js__WEBPACK_IMPORTED_MODULE_0__.untrack)(fn));
}

/**
 * @template [T=any]
 * @param {string} type
 * @param {T} [detail]
 * @param {any}params_0
 * @returns {CustomEvent<T>}
 */
function create_custom_event(type, detail, {
  bubbles = false,
  cancelable = false
} = {}) {
  return new CustomEvent(type, {
    detail,
    bubbles,
    cancelable
  });
}

/**
 * Creates an event dispatcher that can be used to dispatch [component events](https://svelte.dev/docs/svelte/legacy-on#Component-events).
 * Event dispatchers are functions that can take two arguments: `name` and `detail`.
 *
 * Component events created with `createEventDispatcher` create a
 * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).
 * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).
 * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)
 * property and can contain any type of data.
 *
 * The event dispatcher can be typed to narrow the allowed event names and the type of the `detail` argument:
 * ```ts
 * const dispatch = createEventDispatcher<{
 *  loaded: never; // does not take a detail argument
 *  change: string; // takes a detail argument of type string, which is required
 *  optional: number | null; // takes an optional detail argument of type number
 * }>();
 * ```
 *
 * @deprecated Use callback props and/or the `$host()` rune instead — see [migration guide](https://svelte.dev/docs/svelte/v5-migration-guide#Event-changes-Component-events)
 * @template {Record<string, any>} [EventMap = any]
 * @returns {EventDispatcher<EventMap>}
 */
function createEventDispatcher() {
  const active_component_context = _internal_client_context_js__WEBPACK_IMPORTED_MODULE_6__.component_context;
  if (active_component_context === null) {
    (0,_internal_shared_errors_js__WEBPACK_IMPORTED_MODULE_4__.lifecycle_outside_component)('createEventDispatcher');
  }
  return (type, detail, options) => {
    const events = /** @type {Record<string, Function | Function[]>} */active_component_context.s.$$events?.[(/** @type {any} */type)];
    if (events) {
      const callbacks = (0,_internal_shared_utils_js__WEBPACK_IMPORTED_MODULE_1__.is_array)(events) ? events.slice() : [events];
      // TODO are there situations where events could be dispatched
      // in a server (non-DOM) environment?
      const event = create_custom_event(/** @type {string} */type, detail, options);
      for (const fn of callbacks) {
        fn.call(active_component_context.x, event);
      }
      return !event.defaultPrevented;
    }
    return true;
  };
}

// TODO mark beforeUpdate and afterUpdate as deprecated in Svelte 6

/**
 * Schedules a callback to run immediately before the component is updated after any state change.
 *
 * The first time the callback runs will be before the initial `onMount`.
 *
 * In runes mode use `$effect.pre` instead.
 *
 * @deprecated Use [`$effect.pre`](https://svelte.dev/docs/svelte/$effect#$effect.pre) instead
 * @param {() => void} fn
 * @returns {void}
 */
function beforeUpdate(fn) {
  if (_internal_client_context_js__WEBPACK_IMPORTED_MODULE_6__.component_context === null) {
    (0,_internal_shared_errors_js__WEBPACK_IMPORTED_MODULE_4__.lifecycle_outside_component)('beforeUpdate');
  }
  if (_internal_client_context_js__WEBPACK_IMPORTED_MODULE_6__.component_context.l === null) {
    _internal_client_errors_js__WEBPACK_IMPORTED_MODULE_3__.lifecycle_legacy_only('beforeUpdate');
  }
  init_update_callbacks(_internal_client_context_js__WEBPACK_IMPORTED_MODULE_6__.component_context).b.push(fn);
}

/**
 * Schedules a callback to run immediately after the component has been updated.
 *
 * The first time the callback runs will be after the initial `onMount`.
 *
 * In runes mode use `$effect` instead.
 *
 * @deprecated Use [`$effect`](https://svelte.dev/docs/svelte/$effect) instead
 * @param {() => void} fn
 * @returns {void}
 */
function afterUpdate(fn) {
  if (_internal_client_context_js__WEBPACK_IMPORTED_MODULE_6__.component_context === null) {
    (0,_internal_shared_errors_js__WEBPACK_IMPORTED_MODULE_4__.lifecycle_outside_component)('afterUpdate');
  }
  if (_internal_client_context_js__WEBPACK_IMPORTED_MODULE_6__.component_context.l === null) {
    _internal_client_errors_js__WEBPACK_IMPORTED_MODULE_3__.lifecycle_legacy_only('afterUpdate');
  }
  init_update_callbacks(_internal_client_context_js__WEBPACK_IMPORTED_MODULE_6__.component_context).a.push(fn);
}

/**
 * Legacy-mode: Init callbacks object for onMount/beforeUpdate/afterUpdate
 * @param {ComponentContext} context
 */
function init_update_callbacks(context) {
  var l = /** @type {ComponentContextLegacy} */context.l;
  return l.u ??= {
    a: [],
    b: [],
    m: []
  };
}

/**
 * Synchronously flushes any pending state changes and those that result from it.
 * @param {() => void} [fn]
 * @returns {void}
 */
function flushSync(fn) {
  (0,_internal_client_runtime_js__WEBPACK_IMPORTED_MODULE_0__.flush_sync)(fn);
}





/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/constants.js":
/*!******************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/constants.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BLOCK_EFFECT: () => (/* binding */ BLOCK_EFFECT),
/* harmony export */   BOUNDARY_EFFECT: () => (/* binding */ BOUNDARY_EFFECT),
/* harmony export */   BRANCH_EFFECT: () => (/* binding */ BRANCH_EFFECT),
/* harmony export */   CLEAN: () => (/* binding */ CLEAN),
/* harmony export */   DERIVED: () => (/* binding */ DERIVED),
/* harmony export */   DESTROYED: () => (/* binding */ DESTROYED),
/* harmony export */   DIRTY: () => (/* binding */ DIRTY),
/* harmony export */   DISCONNECTED: () => (/* binding */ DISCONNECTED),
/* harmony export */   EFFECT: () => (/* binding */ EFFECT),
/* harmony export */   EFFECT_HAS_DERIVED: () => (/* binding */ EFFECT_HAS_DERIVED),
/* harmony export */   EFFECT_RAN: () => (/* binding */ EFFECT_RAN),
/* harmony export */   EFFECT_TRANSPARENT: () => (/* binding */ EFFECT_TRANSPARENT),
/* harmony export */   HEAD_EFFECT: () => (/* binding */ HEAD_EFFECT),
/* harmony export */   INERT: () => (/* binding */ INERT),
/* harmony export */   INSPECT_EFFECT: () => (/* binding */ INSPECT_EFFECT),
/* harmony export */   LEGACY_DERIVED_PROP: () => (/* binding */ LEGACY_DERIVED_PROP),
/* harmony export */   LEGACY_PROPS: () => (/* binding */ LEGACY_PROPS),
/* harmony export */   LOADING_ATTR_SYMBOL: () => (/* binding */ LOADING_ATTR_SYMBOL),
/* harmony export */   MAYBE_DIRTY: () => (/* binding */ MAYBE_DIRTY),
/* harmony export */   RENDER_EFFECT: () => (/* binding */ RENDER_EFFECT),
/* harmony export */   ROOT_EFFECT: () => (/* binding */ ROOT_EFFECT),
/* harmony export */   STATE_SYMBOL: () => (/* binding */ STATE_SYMBOL),
/* harmony export */   STATE_SYMBOL_METADATA: () => (/* binding */ STATE_SYMBOL_METADATA),
/* harmony export */   UNOWNED: () => (/* binding */ UNOWNED)
/* harmony export */ });
const DERIVED = 1 << 1;
const EFFECT = 1 << 2;
const RENDER_EFFECT = 1 << 3;
const BLOCK_EFFECT = 1 << 4;
const BRANCH_EFFECT = 1 << 5;
const ROOT_EFFECT = 1 << 6;
const BOUNDARY_EFFECT = 1 << 7;
const UNOWNED = 1 << 8;
const DISCONNECTED = 1 << 9;
const CLEAN = 1 << 10;
const DIRTY = 1 << 11;
const MAYBE_DIRTY = 1 << 12;
const INERT = 1 << 13;
const DESTROYED = 1 << 14;
const EFFECT_RAN = 1 << 15;
/** 'Transparent' effects do not create a transition boundary */
const EFFECT_TRANSPARENT = 1 << 16;
/** Svelte 4 legacy mode props need to be handled with deriveds and be recognized elsewhere, hence the dedicated flag */
const LEGACY_DERIVED_PROP = 1 << 17;
const INSPECT_EFFECT = 1 << 18;
const HEAD_EFFECT = 1 << 19;
const EFFECT_HAS_DERIVED = 1 << 20;
const STATE_SYMBOL = Symbol('$state');
const STATE_SYMBOL_METADATA = Symbol('$state metadata');
const LEGACY_PROPS = Symbol('legacy props');
const LOADING_ATTR_SYMBOL = Symbol('');

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/context.js":
/*!****************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/context.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   component_context: () => (/* binding */ component_context),
/* harmony export */   dev_current_component_function: () => (/* binding */ dev_current_component_function),
/* harmony export */   getAllContexts: () => (/* binding */ getAllContexts),
/* harmony export */   getContext: () => (/* binding */ getContext),
/* harmony export */   hasContext: () => (/* binding */ hasContext),
/* harmony export */   is_runes: () => (/* binding */ is_runes),
/* harmony export */   pop: () => (/* binding */ pop),
/* harmony export */   push: () => (/* binding */ push),
/* harmony export */   setContext: () => (/* binding */ setContext),
/* harmony export */   set_component_context: () => (/* binding */ set_component_context),
/* harmony export */   set_dev_current_component_function: () => (/* binding */ set_dev_current_component_function)
/* harmony export */ });
/* harmony import */ var esm_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! esm-env */ "../svelte/node_modules/.pnpm/esm-env@1.2.1/node_modules/esm-env/index.js");
/* harmony import */ var _dev_ownership_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dev/ownership.js */ "../svelte/packages/svelte/src/internal/client/dev/ownership.js");
/* harmony import */ var _shared_errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/errors.js */ "../svelte/packages/svelte/src/internal/shared/errors.js");
/* harmony import */ var _reactivity_sources_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./reactivity/sources.js */ "../svelte/packages/svelte/src/internal/client/reactivity/sources.js");
/* harmony import */ var _runtime_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./runtime.js */ "../svelte/packages/svelte/src/internal/client/runtime.js");
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _flags_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../flags/index.js */ "../svelte/packages/svelte/src/internal/flags/index.js");
/** @import { ComponentContext } from '#client' */









/** @type {ComponentContext | null} */
let component_context = null;

/** @param {ComponentContext | null} context */
function set_component_context(context) {
  component_context = context;
}

/**
 * The current component function. Different from current component context:
 * ```html
 * <!-- App.svelte -->
 * <Foo>
 *   <Bar /> <!-- context == Foo.svelte, function == App.svelte -->
 * </Foo>
 * ```
 * @type {ComponentContext['function']}
 */
let dev_current_component_function = null;

/** @param {ComponentContext['function']} fn */
function set_dev_current_component_function(fn) {
  dev_current_component_function = fn;
}

/**
 * Retrieves the context that belongs to the closest parent component with the specified `key`.
 * Must be called during component initialisation.
 *
 * @template T
 * @param {any} key
 * @returns {T}
 */
function getContext(key) {
  const context_map = get_or_init_context_map('getContext');
  const result = /** @type {T} */context_map.get(key);
  return result;
}

/**
 * Associates an arbitrary `context` object with the current component and the specified `key`
 * and returns that object. The context is then available to children of the component
 * (including slotted content) with `getContext`.
 *
 * Like lifecycle functions, this must be called during component initialisation.
 *
 * @template T
 * @param {any} key
 * @param {T} context
 * @returns {T}
 */
function setContext(key, context) {
  const context_map = get_or_init_context_map('setContext');
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    // When state is put into context, we treat as if it's global from now on.
    // We do for performance reasons (it's for example very expensive to call
    // getContext on a big object many times when part of a list component)
    // and danger of false positives.
    (0,_runtime_js__WEBPACK_IMPORTED_MODULE_4__.untrack)(() => (0,_dev_ownership_js__WEBPACK_IMPORTED_MODULE_1__.add_owner)(context, null, true));
  }
  context_map.set(key, context);
  return context;
}

/**
 * Checks whether a given `key` has been set in the context of a parent component.
 * Must be called during component initialisation.
 *
 * @param {any} key
 * @returns {boolean}
 */
function hasContext(key) {
  const context_map = get_or_init_context_map('hasContext');
  return context_map.has(key);
}

/**
 * Retrieves the whole context map that belongs to the closest parent component.
 * Must be called during component initialisation. Useful, for example, if you
 * programmatically create a component and want to pass the existing context to it.
 *
 * @template {Map<any, any>} [T=Map<any, any>]
 * @returns {T}
 */
function getAllContexts() {
  const context_map = get_or_init_context_map('getAllContexts');
  return /** @type {T} */context_map;
}

/**
 * @param {Record<string, unknown>} props
 * @param {any} runes
 * @param {Function} [fn]
 * @returns {void}
 */
function push(props, runes = false, fn) {
  component_context = {
    p: component_context,
    c: null,
    e: null,
    m: false,
    s: props,
    x: null,
    l: null
  };
  if (_flags_index_js__WEBPACK_IMPORTED_MODULE_6__.legacy_mode_flag && !runes) {
    component_context.l = {
      s: null,
      u: null,
      r1: [],
      r2: (0,_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_3__.source)(false)
    };
  }
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    // component function
    component_context.function = fn;
    dev_current_component_function = fn;
  }
}

/**
 * @template {Record<string, any>} T
 * @param {T} [component]
 * @returns {T}
 */
function pop(component) {
  const context_stack_item = component_context;
  if (context_stack_item !== null) {
    if (component !== undefined) {
      context_stack_item.x = component;
    }
    const component_effects = context_stack_item.e;
    if (component_effects !== null) {
      var previous_effect = _runtime_js__WEBPACK_IMPORTED_MODULE_4__.active_effect;
      var previous_reaction = _runtime_js__WEBPACK_IMPORTED_MODULE_4__.active_reaction;
      context_stack_item.e = null;
      try {
        for (var i = 0; i < component_effects.length; i++) {
          var component_effect = component_effects[i];
          (0,_runtime_js__WEBPACK_IMPORTED_MODULE_4__.set_active_effect)(component_effect.effect);
          (0,_runtime_js__WEBPACK_IMPORTED_MODULE_4__.set_active_reaction)(component_effect.reaction);
          (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_5__.effect)(component_effect.fn);
        }
      } finally {
        (0,_runtime_js__WEBPACK_IMPORTED_MODULE_4__.set_active_effect)(previous_effect);
        (0,_runtime_js__WEBPACK_IMPORTED_MODULE_4__.set_active_reaction)(previous_reaction);
      }
    }
    component_context = context_stack_item.p;
    if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
      dev_current_component_function = context_stack_item.p?.function ?? null;
    }
    context_stack_item.m = true;
  }
  // Micro-optimization: Don't set .a above to the empty object
  // so it can be garbage-collected when the return here is unused
  return component || (/** @type {T} */{});
}

/** @returns {boolean} */
function is_runes() {
  return !_flags_index_js__WEBPACK_IMPORTED_MODULE_6__.legacy_mode_flag || component_context !== null && component_context.l === null;
}

/**
 * @param {string} name
 * @returns {Map<unknown, unknown>}
 */
function get_or_init_context_map(name) {
  if (component_context === null) {
    (0,_shared_errors_js__WEBPACK_IMPORTED_MODULE_2__.lifecycle_outside_component)(name);
  }
  return component_context.c ??= new Map(get_parent_context(component_context) || undefined);
}

/**
 * @param {ComponentContext} component_context
 * @returns {Map<unknown, unknown> | null}
 */
function get_parent_context(component_context) {
  let parent = component_context.p;
  while (parent !== null) {
    const context_map = parent.c;
    if (context_map !== null) {
      return context_map;
    }
    parent = parent.p;
  }
  return null;
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dev/assign.js":
/*!*******************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dev/assign.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   assign: () => (/* binding */ assign),
/* harmony export */   assign_and: () => (/* binding */ assign_and),
/* harmony export */   assign_nullish: () => (/* binding */ assign_nullish),
/* harmony export */   assign_or: () => (/* binding */ assign_or)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils.js */ "../svelte/packages/svelte/src/utils.js");
/* harmony import */ var _runtime_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../runtime.js */ "../svelte/packages/svelte/src/internal/client/runtime.js");
/* harmony import */ var _warnings_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../warnings.js */ "../svelte/packages/svelte/src/internal/client/warnings.js");




/**
 *
 * @param {any} a
 * @param {any} b
 * @param {string} property
 * @param {string} location
 */
function compare(a, b, property, location) {
  if (a !== b) {
    _warnings_js__WEBPACK_IMPORTED_MODULE_2__.assignment_value_stale(property, /** @type {string} */(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.sanitize_location)(location));
  }
  return a;
}

/**
 * @param {any} object
 * @param {string} property
 * @param {any} value
 * @param {string} location
 */
function assign(object, property, value, location) {
  return compare(object[property] = value, (0,_runtime_js__WEBPACK_IMPORTED_MODULE_1__.untrack)(() => object[property]), property, location);
}

/**
 * @param {any} object
 * @param {string} property
 * @param {any} value
 * @param {string} location
 */
function assign_and(object, property, value, location) {
  return compare(object[property] &&= value, (0,_runtime_js__WEBPACK_IMPORTED_MODULE_1__.untrack)(() => object[property]), property, location);
}

/**
 * @param {any} object
 * @param {string} property
 * @param {any} value
 * @param {string} location
 */
function assign_or(object, property, value, location) {
  return compare(object[property] ||= value, (0,_runtime_js__WEBPACK_IMPORTED_MODULE_1__.untrack)(() => object[property]), property, location);
}

/**
 * @param {any} object
 * @param {string} property
 * @param {any} value
 * @param {string} location
 */
function assign_nullish(object, property, value, location) {
  return compare(object[property] ??= value, (0,_runtime_js__WEBPACK_IMPORTED_MODULE_1__.untrack)(() => object[property]), property, location);
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dev/console-log.js":
/*!************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dev/console-log.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   log_if_contains_state: () => (/* binding */ log_if_contains_state)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants.js */ "../svelte/packages/svelte/src/internal/client/constants.js");
/* harmony import */ var _shared_clone_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/clone.js */ "../svelte/packages/svelte/src/internal/shared/clone.js");
/* harmony import */ var _warnings_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../warnings.js */ "../svelte/packages/svelte/src/internal/client/warnings.js");
/* harmony import */ var _runtime_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../runtime.js */ "../svelte/packages/svelte/src/internal/client/runtime.js");





/**
 * @param {string} method
 * @param  {...any} objects
 */
function log_if_contains_state(method, ...objects) {
  (0,_runtime_js__WEBPACK_IMPORTED_MODULE_3__.untrack)(() => {
    try {
      let has_state = false;
      const transformed = [];
      for (const obj of objects) {
        if (obj && typeof obj === 'object' && _constants_js__WEBPACK_IMPORTED_MODULE_0__.STATE_SYMBOL in obj) {
          transformed.push((0,_shared_clone_js__WEBPACK_IMPORTED_MODULE_1__.snapshot)(obj, true));
          has_state = true;
        } else {
          transformed.push(obj);
        }
      }
      if (has_state) {
        _warnings_js__WEBPACK_IMPORTED_MODULE_2__.console_log_state(method);

        // eslint-disable-next-line no-console
        console.log('%c[snapshot]', 'color: grey', ...transformed);
      }
    } catch {}
  });
  return objects;
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dev/css.js":
/*!****************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dev/css.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   cleanup_styles: () => (/* binding */ cleanup_styles),
/* harmony export */   register_style: () => (/* binding */ register_style)
/* harmony export */ });
/** @type {Map<String, Set<HTMLStyleElement>>} */
var all_styles = new Map();

/**
 * @param {String} hash
 * @param {HTMLStyleElement} style
 */
function register_style(hash, style) {
  var styles = all_styles.get(hash);
  if (!styles) {
    styles = new Set();
    all_styles.set(hash, styles);
  }
  styles.add(style);
}

/**
 * @param {String} hash
 */
function cleanup_styles(hash) {
  var styles = all_styles.get(hash);
  if (!styles) return;
  for (const style of styles) {
    style.remove();
  }
  all_styles.delete(hash);
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dev/elements.js":
/*!*********************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dev/elements.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   add_locations: () => (/* binding */ add_locations)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../constants.js */ "../svelte/packages/svelte/src/constants.js");
/* harmony import */ var _dom_hydration_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dom/hydration.js */ "../svelte/packages/svelte/src/internal/client/dom/hydration.js");
/** @import { SourceLocation } from '#shared' */



/**
 * @param {any} fn
 * @param {string} filename
 * @param {SourceLocation[]} locations
 * @returns {any}
 */
function add_locations(fn, filename, locations) {
  return (/** @type {any[]} */...args) => {
    const dom = fn(...args);
    var node = _dom_hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrating ? dom : dom.nodeType === 11 ? dom.firstChild : dom;
    assign_locations(node, filename, locations);
    return dom;
  };
}

/**
 * @param {Element} element
 * @param {string} filename
 * @param {SourceLocation} location
 */
function assign_location(element, filename, location) {
  // @ts-expect-error
  element.__svelte_meta = {
    loc: {
      file: filename,
      line: location[0],
      column: location[1]
    }
  };
  if (location[2]) {
    assign_locations(element.firstChild, filename, location[2]);
  }
}

/**
 * @param {Node | null} node
 * @param {string} filename
 * @param {SourceLocation[]} locations
 */
function assign_locations(node, filename, locations) {
  var i = 0;
  var depth = 0;
  while (node && i < locations.length) {
    if (_dom_hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrating && node.nodeType === 8) {
      var comment = /** @type {Comment} */node;
      if (comment.data === _constants_js__WEBPACK_IMPORTED_MODULE_0__.HYDRATION_START || comment.data === _constants_js__WEBPACK_IMPORTED_MODULE_0__.HYDRATION_START_ELSE) depth += 1;else if (comment.data[0] === _constants_js__WEBPACK_IMPORTED_MODULE_0__.HYDRATION_END) depth -= 1;
    }
    if (depth === 0 && node.nodeType === 1) {
      assign_location(/** @type {Element} */node, filename, locations[i++]);
    }
    node = node.nextSibling;
  }
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dev/equality.js":
/*!*********************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dev/equality.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   equals: () => (/* binding */ equals),
/* harmony export */   init_array_prototype_warnings: () => (/* binding */ init_array_prototype_warnings),
/* harmony export */   strict_equals: () => (/* binding */ strict_equals)
/* harmony export */ });
/* harmony import */ var _warnings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../warnings.js */ "../svelte/packages/svelte/src/internal/client/warnings.js");
/* harmony import */ var _proxy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../proxy.js */ "../svelte/packages/svelte/src/internal/client/proxy.js");


function init_array_prototype_warnings() {
  const array_prototype = Array.prototype;
  // The REPL ends up here over and over, and this prevents it from adding more and more patches
  // of the same kind to the prototype, which would slow down everything over time.
  // @ts-expect-error
  const cleanup = Array.__svelte_cleanup;
  if (cleanup) {
    cleanup();
  }
  const {
    indexOf,
    lastIndexOf,
    includes
  } = array_prototype;
  array_prototype.indexOf = function (item, from_index) {
    const index = indexOf.call(this, item, from_index);
    if (index === -1) {
      for (let i = from_index ?? 0; i < this.length; i += 1) {
        if ((0,_proxy_js__WEBPACK_IMPORTED_MODULE_1__.get_proxied_value)(this[i]) === item) {
          _warnings_js__WEBPACK_IMPORTED_MODULE_0__.state_proxy_equality_mismatch('array.indexOf(...)');
          break;
        }
      }
    }
    return index;
  };
  array_prototype.lastIndexOf = function (item, from_index) {
    // we need to specify this.length - 1 because it's probably using something like
    // `arguments` inside so passing undefined is different from not passing anything
    const index = lastIndexOf.call(this, item, from_index ?? this.length - 1);
    if (index === -1) {
      for (let i = 0; i <= (from_index ?? this.length - 1); i += 1) {
        if ((0,_proxy_js__WEBPACK_IMPORTED_MODULE_1__.get_proxied_value)(this[i]) === item) {
          _warnings_js__WEBPACK_IMPORTED_MODULE_0__.state_proxy_equality_mismatch('array.lastIndexOf(...)');
          break;
        }
      }
    }
    return index;
  };
  array_prototype.includes = function (item, from_index) {
    const has = includes.call(this, item, from_index);
    if (!has) {
      for (let i = 0; i < this.length; i += 1) {
        if ((0,_proxy_js__WEBPACK_IMPORTED_MODULE_1__.get_proxied_value)(this[i]) === item) {
          _warnings_js__WEBPACK_IMPORTED_MODULE_0__.state_proxy_equality_mismatch('array.includes(...)');
          break;
        }
      }
    }
    return has;
  };

  // @ts-expect-error
  Array.__svelte_cleanup = () => {
    array_prototype.indexOf = indexOf;
    array_prototype.lastIndexOf = lastIndexOf;
    array_prototype.includes = includes;
  };
}

/**
 * @param {any} a
 * @param {any} b
 * @param {boolean} equal
 * @returns {boolean}
 */
function strict_equals(a, b, equal = true) {
  // try-catch needed because this tries to read properties of `a` and `b`,
  // which could be disallowed for example in a secure context
  try {
    if (a === b !== ((0,_proxy_js__WEBPACK_IMPORTED_MODULE_1__.get_proxied_value)(a) === (0,_proxy_js__WEBPACK_IMPORTED_MODULE_1__.get_proxied_value)(b))) {
      _warnings_js__WEBPACK_IMPORTED_MODULE_0__.state_proxy_equality_mismatch(equal ? '===' : '!==');
    }
  } catch {}
  return a === b === equal;
}

/**
 * @param {any} a
 * @param {any} b
 * @param {boolean} equal
 * @returns {boolean}
 */
function equals(a, b, equal = true) {
  if (a == b !== ((0,_proxy_js__WEBPACK_IMPORTED_MODULE_1__.get_proxied_value)(a) == (0,_proxy_js__WEBPACK_IMPORTED_MODULE_1__.get_proxied_value)(b))) {
    _warnings_js__WEBPACK_IMPORTED_MODULE_0__.state_proxy_equality_mismatch(equal ? '==' : '!=');
  }
  return a == b === equal;
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dev/hmr.js":
/*!****************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dev/hmr.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   hmr: () => (/* binding */ hmr)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../constants.js */ "../svelte/packages/svelte/src/constants.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "../svelte/packages/svelte/src/internal/client/constants.js");
/* harmony import */ var _dom_hydration_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dom/hydration.js */ "../svelte/packages/svelte/src/internal/client/dom/hydration.js");
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _reactivity_sources_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../reactivity/sources.js */ "../svelte/packages/svelte/src/internal/client/reactivity/sources.js");
/* harmony import */ var _render_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../render.js */ "../svelte/packages/svelte/src/internal/client/render.js");
/* harmony import */ var _runtime_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../runtime.js */ "../svelte/packages/svelte/src/internal/client/runtime.js");
/** @import { Source, Effect, TemplateNode } from '#client' */








/**
 * @template {(anchor: Comment, props: any) => any} Component
 * @param {Component} original
 * @param {() => Source<Component>} get_source
 */
function hmr(original, get_source) {
  /**
   * @param {TemplateNode} anchor
   * @param {any} props
   */
  function wrapper(anchor, props) {
    let instance = {};

    /** @type {Effect} */
    let effect;
    let ran = false;
    (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_3__.block)(() => {
      const source = get_source();
      const component = (0,_runtime_js__WEBPACK_IMPORTED_MODULE_6__.get)(source);
      if (effect) {
        // @ts-ignore
        for (var k in instance) delete instance[k];
        (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_3__.destroy_effect)(effect);
      }
      effect = (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_3__.branch)(() => {
        // when the component is invalidated, replace it without transitions
        if (ran) (0,_render_js__WEBPACK_IMPORTED_MODULE_5__.set_should_intro)(false);

        // preserve getters/setters
        Object.defineProperties(instance, Object.getOwnPropertyDescriptors(
        // @ts-expect-error
        new.target ? new component(anchor, props) : component(anchor, props)));
        if (ran) (0,_render_js__WEBPACK_IMPORTED_MODULE_5__.set_should_intro)(true);
      });
    }, _constants_js__WEBPACK_IMPORTED_MODULE_1__.EFFECT_TRANSPARENT);
    ran = true;
    if (_dom_hydration_js__WEBPACK_IMPORTED_MODULE_2__.hydrating) {
      anchor = _dom_hydration_js__WEBPACK_IMPORTED_MODULE_2__.hydrate_node;
    }
    return instance;
  }

  // @ts-expect-error
  wrapper[_constants_js__WEBPACK_IMPORTED_MODULE_0__.FILENAME] = original[_constants_js__WEBPACK_IMPORTED_MODULE_0__.FILENAME];

  // @ts-expect-error
  wrapper[_constants_js__WEBPACK_IMPORTED_MODULE_0__.HMR] = {
    // When we accept an update, we set the original source to the new component
    original,
    // The `get_source` parameter reads `wrapper[HMR].source`, but in the `accept`
    // function we always replace it with `previous[HMR].source`, which in practice
    // means we only ever update the original
    source: (0,_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_4__.source)(original)
  };
  return wrapper;
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dev/inspect.js":
/*!********************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dev/inspect.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   inspect: () => (/* binding */ inspect)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../constants.js */ "../svelte/packages/svelte/src/constants.js");
/* harmony import */ var _shared_clone_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/clone.js */ "../svelte/packages/svelte/src/internal/shared/clone.js");
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");




/**
 * @param {() => any[]} get_value
 * @param {Function} [inspector]
 */
// eslint-disable-next-line no-console
function inspect(get_value, inspector = console.log) {
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__.validate_effect)('$inspect');
  let initial = true;
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__.inspect_effect)(() => {
    /** @type {any} */
    var value = _constants_js__WEBPACK_IMPORTED_MODULE_0__.UNINITIALIZED;

    // Capturing the value might result in an exception due to the inspect effect being
    // sync and thus operating on stale data. In the case we encounter an exception we
    // can bail-out of reporting the value. Instead we simply console.error the error
    // so at least it's known that an error occured, but we don't stop execution
    try {
      value = get_value();
    } catch (error) {
      // eslint-disable-next-line no-console
      console.error(error);
    }
    if (value !== _constants_js__WEBPACK_IMPORTED_MODULE_0__.UNINITIALIZED) {
      inspector(initial ? 'init' : 'update', ...(0,_shared_clone_js__WEBPACK_IMPORTED_MODULE_1__.snapshot)(value, true));
    }
    initial = false;
  });
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dev/legacy.js":
/*!*******************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dev/legacy.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   check_target: () => (/* binding */ check_target),
/* harmony export */   legacy_api: () => (/* binding */ legacy_api)
/* harmony export */ });
/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors.js */ "../svelte/packages/svelte/src/internal/client/errors.js");
/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../context.js */ "../svelte/packages/svelte/src/internal/client/context.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../constants.js */ "../svelte/packages/svelte/src/constants.js");
/* harmony import */ var _ownership_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ownership.js */ "../svelte/packages/svelte/src/internal/client/dev/ownership.js");





/** @param {Function & { [FILENAME]: string }} target */
function check_target(target) {
  if (target) {
    _errors_js__WEBPACK_IMPORTED_MODULE_0__.component_api_invalid_new(target[_constants_js__WEBPACK_IMPORTED_MODULE_2__.FILENAME] ?? 'a component', target.name);
  }
}
function legacy_api() {
  const component = _context_js__WEBPACK_IMPORTED_MODULE_1__.component_context?.function;

  /** @param {string} method */
  function error(method) {
    // @ts-expect-error
    const parent = (0,_ownership_js__WEBPACK_IMPORTED_MODULE_3__.get_component)()?.[_constants_js__WEBPACK_IMPORTED_MODULE_2__.FILENAME] ?? 'Something';
    _errors_js__WEBPACK_IMPORTED_MODULE_0__.component_api_changed(parent, method, component[_constants_js__WEBPACK_IMPORTED_MODULE_2__.FILENAME]);
  }
  return {
    $destroy: () => error('$destroy()'),
    $on: () => error('$on(...)'),
    $set: () => error('$set(...)')
  };
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dev/ownership.js":
/*!**********************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dev/ownership.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ADD_OWNER: () => (/* binding */ ADD_OWNER),
/* harmony export */   add_owner: () => (/* binding */ add_owner),
/* harmony export */   add_owner_effect: () => (/* binding */ add_owner_effect),
/* harmony export */   add_owner_to_class: () => (/* binding */ add_owner_to_class),
/* harmony export */   check_ownership: () => (/* binding */ check_ownership),
/* harmony export */   get_component: () => (/* binding */ get_component),
/* harmony export */   mark_module_end: () => (/* binding */ mark_module_end),
/* harmony export */   mark_module_start: () => (/* binding */ mark_module_start),
/* harmony export */   skip_ownership_validation: () => (/* binding */ skip_ownership_validation),
/* harmony export */   widen_ownership: () => (/* binding */ widen_ownership)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants.js */ "../svelte/packages/svelte/src/internal/client/constants.js");
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../context.js */ "../svelte/packages/svelte/src/internal/client/context.js");
/* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../shared/utils.js */ "../svelte/packages/svelte/src/internal/shared/utils.js");
/* harmony import */ var _warnings_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../warnings.js */ "../svelte/packages/svelte/src/internal/client/warnings.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../constants.js */ "../svelte/packages/svelte/src/constants.js");
/** @import { ProxyMetadata } from '#client' */
/** @typedef {{ file: string, line: number, column: number }} Location */








/** @type {Record<string, Array<{ start: Location, end: Location, component: Function }>>} */
const boundaries = {};
const chrome_pattern = /at (?:.+ \()?(.+):(\d+):(\d+)\)?$/;
const firefox_pattern = /@(.+):(\d+):(\d+)$/;
function get_stack() {
  const stack = new Error().stack;
  if (!stack) return null;
  const entries = [];
  for (const line of stack.split('\n')) {
    let match = chrome_pattern.exec(line) ?? firefox_pattern.exec(line);
    if (match) {
      entries.push({
        file: match[1],
        line: +match[2],
        column: +match[3]
      });
    }
  }
  return entries;
}

/**
 * Determines which `.svelte` component is responsible for a given state change
 * @returns {Function | null}
 */
function get_component() {
  // first 4 lines are svelte internals; adjust this number if we change the internal call stack
  const stack = get_stack()?.slice(4);
  if (!stack) return null;
  for (let i = 0; i < stack.length; i++) {
    const entry = stack[i];
    const modules = boundaries[entry.file];
    if (!modules) {
      // If the first entry is not a component, that means the modification very likely happened
      // within a .svelte.js file, possibly triggered by a component. Since these files are not part
      // of the bondaries/component context heuristic, we need to bail in this case, else we would
      // have false positives when the .svelte.ts file provides a state creator function, encapsulating
      // the state and its mutations, and is being called from a component other than the one who
      // called the state creator function.
      if (i === 0) return null;
      continue;
    }
    for (const module of modules) {
      if (module.end == null) {
        return null;
      }
      if (module.start.line < entry.line && module.end.line > entry.line) {
        return module.component;
      }
    }
  }
  return null;
}
const ADD_OWNER = Symbol('ADD_OWNER');

/**
 * Together with `mark_module_end`, this function establishes the boundaries of a `.svelte` file,
 * such that subsequent calls to `get_component` can tell us which component is responsible
 * for a given state change
 */
function mark_module_start() {
  const start = get_stack()?.[2];
  if (start) {
    (boundaries[start.file] ??= []).push({
      start,
      // @ts-expect-error
      end: null,
      // @ts-expect-error we add the component at the end, since HMR will overwrite the function
      component: null
    });
  }
}

/**
 * @param {Function} component
 */
function mark_module_end(component) {
  const end = get_stack()?.[2];
  if (end) {
    const boundaries_file = boundaries[end.file];
    const boundary = boundaries_file[boundaries_file.length - 1];
    boundary.end = end;
    boundary.component = component;
  }
}

/**
 * @param {any} object
 * @param {any | null} owner
 * @param {boolean} [global]
 * @param {boolean} [skip_warning]
 */
function add_owner(object, owner, global = false, skip_warning = false) {
  if (object && !global) {
    const component = _context_js__WEBPACK_IMPORTED_MODULE_2__.dev_current_component_function;
    const metadata = object[_constants_js__WEBPACK_IMPORTED_MODULE_0__.STATE_SYMBOL_METADATA];
    if (metadata && !has_owner(metadata, component)) {
      let original = get_owner(metadata);
      if (owner && owner[_constants_js__WEBPACK_IMPORTED_MODULE_5__.FILENAME] !== component[_constants_js__WEBPACK_IMPORTED_MODULE_5__.FILENAME] && !skip_warning) {
        _warnings_js__WEBPACK_IMPORTED_MODULE_4__.ownership_invalid_binding(component[_constants_js__WEBPACK_IMPORTED_MODULE_5__.FILENAME], owner[_constants_js__WEBPACK_IMPORTED_MODULE_5__.FILENAME], original[_constants_js__WEBPACK_IMPORTED_MODULE_5__.FILENAME]);
      }
    }
  }
  add_owner_to_object(object, owner, new Set());
}

/**
 * @param {() => unknown} get_object
 * @param {any} Component
 * @param {boolean} [skip_warning]
 */
function add_owner_effect(get_object, Component, skip_warning = false) {
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.user_pre_effect)(() => {
    add_owner(get_object(), Component, false, skip_warning);
  });
}

/**
 * @param {any} _this
 * @param {Function} owner
 * @param {Array<() => any>} getters
 * @param {boolean} skip_warning
 */
function add_owner_to_class(_this, owner, getters, skip_warning) {
  _this[ADD_OWNER].current ||= getters.map(() => _constants_js__WEBPACK_IMPORTED_MODULE_5__.UNINITIALIZED);
  for (let i = 0; i < getters.length; i += 1) {
    const current = getters[i]();
    // For performance reasons we only re-add the owner if the state has changed
    if (current !== _this[ADD_OWNER][i]) {
      _this[ADD_OWNER].current[i] = current;
      add_owner(current, owner, false, skip_warning);
    }
  }
}

/**
 * @param {ProxyMetadata | null} from
 * @param {ProxyMetadata} to
 */
function widen_ownership(from, to) {
  if (to.owners === null) {
    return;
  }
  while (from) {
    if (from.owners === null) {
      to.owners = null;
      break;
    }
    for (const owner of from.owners) {
      to.owners.add(owner);
    }
    from = from.parent;
  }
}

/**
 * @param {any} object
 * @param {Function | null} owner If `null`, then the object is globally owned and will not be checked
 * @param {Set<any>} seen
 */
function add_owner_to_object(object, owner, seen) {
  const metadata = /** @type {ProxyMetadata} */object?.[_constants_js__WEBPACK_IMPORTED_MODULE_0__.STATE_SYMBOL_METADATA];
  if (metadata) {
    // this is a state proxy, add owner directly, if not globally shared
    if ('owners' in metadata && metadata.owners != null) {
      if (owner) {
        metadata.owners.add(owner);
      } else {
        metadata.owners = null;
      }
    }
  } else if (object && typeof object === 'object') {
    if (seen.has(object)) return;
    seen.add(object);
    if (ADD_OWNER in object && object[ADD_OWNER]) {
      // this is a class with state fields. we put this in a render effect
      // so that if state is replaced (e.g. `instance.name = { first, last }`)
      // the new state is also co-owned by the caller of `getContext`
      (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.render_effect)(() => {
        object[ADD_OWNER](owner);
      });
    } else {
      var proto = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_3__.get_prototype_of)(object);
      if (proto === Object.prototype) {
        // recurse until we find a state proxy
        for (const key in object) {
          if (Object.getOwnPropertyDescriptor(object, key)?.get) {
            // Similar to the class case; the getter could update with a new state
            let current = _constants_js__WEBPACK_IMPORTED_MODULE_5__.UNINITIALIZED;
            (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.render_effect)(() => {
              const next = object[key];
              if (current !== next) {
                current = next;
                add_owner_to_object(next, owner, seen);
              }
            });
          } else {
            add_owner_to_object(object[key], owner, seen);
          }
        }
      } else if (proto === Array.prototype) {
        // recurse until we find a state proxy
        for (let i = 0; i < object.length; i += 1) {
          add_owner_to_object(object[i], owner, seen);
        }
      }
    }
  }
}

/**
 * @param {ProxyMetadata} metadata
 * @param {Function} component
 * @returns {boolean}
 */
function has_owner(metadata, component) {
  if (metadata.owners === null) {
    return true;
  }
  return metadata.owners.has(component) ||
  // This helps avoid false positives when using HMR, where the component function is replaced
  _constants_js__WEBPACK_IMPORTED_MODULE_5__.FILENAME in component && [...metadata.owners].some(owner => /** @type {any} */owner[_constants_js__WEBPACK_IMPORTED_MODULE_5__.FILENAME] === component[_constants_js__WEBPACK_IMPORTED_MODULE_5__.FILENAME]) || metadata.parent !== null && has_owner(metadata.parent, component);
}

/**
 * @param {ProxyMetadata} metadata
 * @returns {any}
 */
function get_owner(metadata) {
  return metadata?.owners?.values().next().value ?? get_owner(/** @type {ProxyMetadata} */metadata.parent);
}
let skip = false;

/**
 * @param {() => any} fn
 */
function skip_ownership_validation(fn) {
  skip = true;
  fn();
  skip = false;
}

/**
 * @param {ProxyMetadata} metadata
 */
function check_ownership(metadata) {
  if (skip) return;
  const component = get_component();
  if (component && !has_owner(metadata, component)) {
    let original = get_owner(metadata);

    // @ts-expect-error
    if (original[_constants_js__WEBPACK_IMPORTED_MODULE_5__.FILENAME] !== component[_constants_js__WEBPACK_IMPORTED_MODULE_5__.FILENAME]) {
      // @ts-expect-error
      _warnings_js__WEBPACK_IMPORTED_MODULE_4__.ownership_invalid_mutation(component[_constants_js__WEBPACK_IMPORTED_MODULE_5__.FILENAME], original[_constants_js__WEBPACK_IMPORTED_MODULE_5__.FILENAME]);
    } else {
      _warnings_js__WEBPACK_IMPORTED_MODULE_4__.ownership_invalid_mutation();
    }
  }
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dev/tracing.js":
/*!********************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dev/tracing.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   get_stack: () => (/* binding */ get_stack),
/* harmony export */   trace: () => (/* binding */ trace),
/* harmony export */   tracing_expressions: () => (/* binding */ tracing_expressions)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../constants.js */ "../svelte/packages/svelte/src/constants.js");
/* harmony import */ var _shared_clone_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/clone.js */ "../svelte/packages/svelte/src/internal/shared/clone.js");
/* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../shared/utils.js */ "../svelte/packages/svelte/src/internal/shared/utils.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../constants.js */ "../svelte/packages/svelte/src/internal/client/constants.js");
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _runtime_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../runtime.js */ "../svelte/packages/svelte/src/internal/client/runtime.js");
/** @import { Derived, Reaction, Signal, Value } from '#client' */







/** @type { any } */
let tracing_expressions = null;

/**
 * @param { Value } signal
 * @param { { read: Error[] } } [entry]
 */
function log_entry(signal, entry) {
  const debug = signal.debug;
  const value = signal.trace_need_increase ? signal.trace_v : signal.v;
  if (value === _constants_js__WEBPACK_IMPORTED_MODULE_0__.UNINITIALIZED) {
    return;
  }
  if (debug) {
    var previous_captured_signals = _runtime_js__WEBPACK_IMPORTED_MODULE_5__.captured_signals;
    var captured = new Set();
    (0,_runtime_js__WEBPACK_IMPORTED_MODULE_5__.set_captured_signals)(captured);
    try {
      (0,_runtime_js__WEBPACK_IMPORTED_MODULE_5__.untrack)(() => {
        debug();
      });
    } finally {
      (0,_runtime_js__WEBPACK_IMPORTED_MODULE_5__.set_captured_signals)(previous_captured_signals);
    }
    if (captured.size > 0) {
      for (const dep of captured) {
        log_entry(dep);
      }
      return;
    }
  }
  const type = (signal.f & _constants_js__WEBPACK_IMPORTED_MODULE_3__.DERIVED) !== 0 ? '$derived' : '$state';
  const current_reaction = /** @type {Reaction} */_runtime_js__WEBPACK_IMPORTED_MODULE_5__.active_reaction;
  const dirty = signal.wv > current_reaction.wv || current_reaction.wv === 0;

  // eslint-disable-next-line no-console
  console.groupCollapsed(`%c${type}`, dirty ? 'color: CornflowerBlue; font-weight: bold' : 'color: grey; font-weight: bold', typeof value === 'object' && value !== null && _constants_js__WEBPACK_IMPORTED_MODULE_3__.STATE_SYMBOL in value ? (0,_shared_clone_js__WEBPACK_IMPORTED_MODULE_1__.snapshot)(value, true) : value);
  if (type === '$derived') {
    const deps = new Set(/** @type {Derived} */signal.deps);
    for (const dep of deps) {
      log_entry(dep);
    }
  }
  if (signal.created) {
    // eslint-disable-next-line no-console
    console.log(signal.created);
  }
  if (signal.updated) {
    // eslint-disable-next-line no-console
    console.log(signal.updated);
  }
  const read = entry?.read;
  if (read && read.length > 0) {
    for (var stack of read) {
      // eslint-disable-next-line no-console
      console.log(stack);
    }
  }

  // eslint-disable-next-line no-console
  console.groupEnd();
}

/**
 * @template T
 * @param {() => string} label
 * @param {() => T} fn
 */
function trace(label, fn) {
  var previously_tracing_expressions = tracing_expressions;
  try {
    tracing_expressions = {
      entries: new Map(),
      reaction: _runtime_js__WEBPACK_IMPORTED_MODULE_5__.active_reaction
    };
    var start = performance.now();
    var value = fn();
    var time = (performance.now() - start).toFixed(2);
    if (!(0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_4__.effect_tracking)()) {
      // eslint-disable-next-line no-console
      console.log(`${label()} %cran outside of an effect (${time}ms)`, 'color: grey');
    } else if (tracing_expressions.entries.size === 0) {
      // eslint-disable-next-line no-console
      console.log(`${label()} %cno reactive dependencies (${time}ms)`, 'color: grey');
    } else {
      // eslint-disable-next-line no-console
      console.group(`${label()} %c(${time}ms)`, 'color: grey');
      var entries = tracing_expressions.entries;
      tracing_expressions = null;
      for (const [signal, entry] of entries) {
        log_entry(signal, entry);
      }
      // eslint-disable-next-line no-console
      console.groupEnd();
    }
    if (previously_tracing_expressions !== null && tracing_expressions !== null) {
      for (const [signal, entry] of tracing_expressions.entries) {
        var prev_entry = previously_tracing_expressions.get(signal);
        if (prev_entry === undefined) {
          previously_tracing_expressions.set(signal, entry);
        } else {
          prev_entry.read.push(...entry.read);
        }
      }
    }
    return value;
  } finally {
    tracing_expressions = previously_tracing_expressions;
  }
}

/**
 * @param {string} label
 */
function get_stack(label) {
  let error = Error();
  const stack = error.stack;
  if (stack) {
    const lines = stack.split('\n');
    const new_lines = ['\n'];
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      if (line === 'Error') {
        continue;
      }
      if (line.includes('validate_each_keys')) {
        return null;
      }
      if (line.includes('svelte/src/internal')) {
        continue;
      }
      new_lines.push(line);
    }
    if (new_lines.length === 1) {
      return null;
    }
    (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.define_property)(error, 'stack', {
      value: new_lines.join('\n')
    });
    (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.define_property)(error, 'name', {
      // 'Error' suffix is required for stack traces to be rendered properly
      value: `${label}Error`
    });
  }
  return error;
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/blocks/await.js":
/*!*************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/blocks/await.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   await_block: () => (/* binding */ await_block)
/* harmony export */ });
/* harmony import */ var esm_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! esm-env */ "../svelte/node_modules/.pnpm/esm-env@1.2.1/node_modules/esm-env/index.js");
/* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../shared/utils.js */ "../svelte/packages/svelte/src/internal/shared/utils.js");
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _reactivity_sources_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../reactivity/sources.js */ "../svelte/packages/svelte/src/internal/client/reactivity/sources.js");
/* harmony import */ var _runtime_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../runtime.js */ "../svelte/packages/svelte/src/internal/client/runtime.js");
/* harmony import */ var _hydration_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../hydration.js */ "../svelte/packages/svelte/src/internal/client/dom/hydration.js");
/* harmony import */ var _task_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../task.js */ "../svelte/packages/svelte/src/internal/client/dom/task.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../constants.js */ "../svelte/packages/svelte/src/constants.js");
/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../context.js */ "../svelte/packages/svelte/src/internal/client/context.js");
/** @import { Effect, Source, TemplateNode } from '#client' */









const PENDING = 0;
const THEN = 1;
const CATCH = 2;

/**
 * @template V
 * @param {TemplateNode} node
 * @param {(() => Promise<V>)} get_input
 * @param {null | ((anchor: Node) => void)} pending_fn
 * @param {null | ((anchor: Node, value: Source<V>) => void)} then_fn
 * @param {null | ((anchor: Node, error: unknown) => void)} catch_fn
 * @returns {void}
 */
function await_block(node, get_input, pending_fn, then_fn, catch_fn) {
  if (_hydration_js__WEBPACK_IMPORTED_MODULE_5__.hydrating) {
    (0,_hydration_js__WEBPACK_IMPORTED_MODULE_5__.hydrate_next)();
  }
  var anchor = node;
  var runes = (0,_context_js__WEBPACK_IMPORTED_MODULE_8__.is_runes)();
  var active_component_context = _context_js__WEBPACK_IMPORTED_MODULE_8__.component_context;

  /** @type {any} */
  var component_function = esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV ? _context_js__WEBPACK_IMPORTED_MODULE_8__.component_context?.function : null;

  /** @type {V | Promise<V> | typeof UNINITIALIZED} */
  var input = _constants_js__WEBPACK_IMPORTED_MODULE_7__.UNINITIALIZED;

  /** @type {Effect | null} */
  var pending_effect;

  /** @type {Effect | null} */
  var then_effect;

  /** @type {Effect | null} */
  var catch_effect;
  var input_source = (runes ? _reactivity_sources_js__WEBPACK_IMPORTED_MODULE_3__.source : _reactivity_sources_js__WEBPACK_IMPORTED_MODULE_3__.mutable_source)(/** @type {V} */undefined);
  var error_source = (runes ? _reactivity_sources_js__WEBPACK_IMPORTED_MODULE_3__.source : _reactivity_sources_js__WEBPACK_IMPORTED_MODULE_3__.mutable_source)(undefined);
  var resolved = false;

  /**
   * @param {PENDING | THEN | CATCH} state
   * @param {boolean} restore
   */
  function update(state, restore) {
    resolved = true;
    if (restore) {
      (0,_runtime_js__WEBPACK_IMPORTED_MODULE_4__.set_active_effect)(effect);
      (0,_runtime_js__WEBPACK_IMPORTED_MODULE_4__.set_active_reaction)(effect); // TODO do we need both?
      (0,_context_js__WEBPACK_IMPORTED_MODULE_8__.set_component_context)(active_component_context);
      if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) (0,_context_js__WEBPACK_IMPORTED_MODULE_8__.set_dev_current_component_function)(component_function);
    }
    try {
      if (state === PENDING && pending_fn) {
        if (pending_effect) (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__.resume_effect)(pending_effect);else pending_effect = (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__.branch)(() => pending_fn(anchor));
      }
      if (state === THEN && then_fn) {
        if (then_effect) (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__.resume_effect)(then_effect);else then_effect = (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__.branch)(() => then_fn(anchor, input_source));
      }
      if (state === CATCH && catch_fn) {
        if (catch_effect) (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__.resume_effect)(catch_effect);else catch_effect = (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__.branch)(() => catch_fn(anchor, error_source));
      }
      if (state !== PENDING && pending_effect) {
        (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__.pause_effect)(pending_effect, () => pending_effect = null);
      }
      if (state !== THEN && then_effect) {
        (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__.pause_effect)(then_effect, () => then_effect = null);
      }
      if (state !== CATCH && catch_effect) {
        (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__.pause_effect)(catch_effect, () => catch_effect = null);
      }
    } finally {
      if (restore) {
        if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) (0,_context_js__WEBPACK_IMPORTED_MODULE_8__.set_dev_current_component_function)(null);
        (0,_context_js__WEBPACK_IMPORTED_MODULE_8__.set_component_context)(null);
        (0,_runtime_js__WEBPACK_IMPORTED_MODULE_4__.set_active_reaction)(null);
        (0,_runtime_js__WEBPACK_IMPORTED_MODULE_4__.set_active_effect)(null);

        // without this, the DOM does not update until two ticks after the promise
        // resolves, which is unexpected behaviour (and somewhat irksome to test)
        (0,_runtime_js__WEBPACK_IMPORTED_MODULE_4__.flush_sync)();
      }
    }
  }
  var effect = (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__.block)(() => {
    if (input === (input = get_input())) return;
    if ((0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_1__.is_promise)(input)) {
      var promise = input;
      resolved = false;
      promise.then(value => {
        if (promise !== input) return;
        // we technically could use `set` here since it's on the next microtick
        // but let's use internal_set for consistency and just to be safe
        (0,_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_3__.internal_set)(input_source, value);
        update(THEN, true);
      }, error => {
        if (promise !== input) return;
        // we technically could use `set` here since it's on the next microtick
        // but let's use internal_set for consistency and just to be safe
        (0,_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_3__.internal_set)(error_source, error);
        update(CATCH, true);
        if (!catch_fn) {
          // Rethrow the error if no catch block exists
          throw error_source.v;
        }
      });
      if (_hydration_js__WEBPACK_IMPORTED_MODULE_5__.hydrating) {
        if (pending_fn) {
          pending_effect = (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__.branch)(() => pending_fn(anchor));
        }
      } else {
        // Wait a microtask before checking if we should show the pending state as
        // the promise might have resolved by the next microtask.
        (0,_task_js__WEBPACK_IMPORTED_MODULE_6__.queue_micro_task)(() => {
          if (!resolved) update(PENDING, true);
        });
      }
    } else {
      (0,_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_3__.internal_set)(input_source, input);
      update(THEN, false);
    }

    // Set the input to something else, in order to disable the promise callbacks
    return () => input = _constants_js__WEBPACK_IMPORTED_MODULE_7__.UNINITIALIZED;
  });
  if (_hydration_js__WEBPACK_IMPORTED_MODULE_5__.hydrating) {
    anchor = _hydration_js__WEBPACK_IMPORTED_MODULE_5__.hydrate_node;
  }
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/blocks/boundary.js":
/*!****************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/blocks/boundary.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   boundary: () => (/* binding */ boundary)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../constants.js */ "../svelte/packages/svelte/src/internal/client/constants.js");
/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../context.js */ "../svelte/packages/svelte/src/internal/client/context.js");
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _runtime_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../runtime.js */ "../svelte/packages/svelte/src/internal/client/runtime.js");
/* harmony import */ var _hydration_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../hydration.js */ "../svelte/packages/svelte/src/internal/client/dom/hydration.js");
/* harmony import */ var _task_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../task.js */ "../svelte/packages/svelte/src/internal/client/dom/task.js");
/** @import { Effect, TemplateNode, } from '#client' */








/**
 * @param {Effect} boundary
 * @param {() => void} fn
 */
function with_boundary(boundary, fn) {
  var previous_effect = _runtime_js__WEBPACK_IMPORTED_MODULE_3__.active_effect;
  var previous_reaction = _runtime_js__WEBPACK_IMPORTED_MODULE_3__.active_reaction;
  var previous_ctx = _context_js__WEBPACK_IMPORTED_MODULE_1__.component_context;
  (0,_runtime_js__WEBPACK_IMPORTED_MODULE_3__.set_active_effect)(boundary);
  (0,_runtime_js__WEBPACK_IMPORTED_MODULE_3__.set_active_reaction)(boundary);
  (0,_context_js__WEBPACK_IMPORTED_MODULE_1__.set_component_context)(boundary.ctx);
  try {
    fn();
  } finally {
    (0,_runtime_js__WEBPACK_IMPORTED_MODULE_3__.set_active_effect)(previous_effect);
    (0,_runtime_js__WEBPACK_IMPORTED_MODULE_3__.set_active_reaction)(previous_reaction);
    (0,_context_js__WEBPACK_IMPORTED_MODULE_1__.set_component_context)(previous_ctx);
  }
}

/**
 * @param {TemplateNode} node
 * @param {{
 * 	 onerror?: (error: unknown, reset: () => void) => void,
 *   failed?: (anchor: Node, error: () => unknown, reset: () => () => void) => void
 * }} props
 * @param {((anchor: Node) => void)} boundary_fn
 * @returns {void}
 */
function boundary(node, props, boundary_fn) {
  var anchor = node;

  /** @type {Effect} */
  var boundary_effect;
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__.block)(() => {
    var boundary = /** @type {Effect} */_runtime_js__WEBPACK_IMPORTED_MODULE_3__.active_effect;
    var hydrate_open = _hydration_js__WEBPACK_IMPORTED_MODULE_4__.hydrate_node;
    var is_creating_fallback = false;

    // We re-use the effect's fn property to avoid allocation of an additional field
    boundary.fn = (/** @type {unknown}} */error) => {
      var onerror = props.onerror;
      let failed = props.failed;

      // If we have nothing to capture the error, or if we hit an error while
      // rendering the fallback, re-throw for another boundary to handle
      if (!onerror && !failed || is_creating_fallback) {
        throw error;
      }
      var reset = () => {
        (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__.pause_effect)(boundary_effect);
        with_boundary(boundary, () => {
          is_creating_fallback = false;
          boundary_effect = (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__.branch)(() => boundary_fn(anchor));
          (0,_runtime_js__WEBPACK_IMPORTED_MODULE_3__.reset_is_throwing_error)();
        });
      };
      onerror?.(error, reset);
      if (boundary_effect) {
        (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__.destroy_effect)(boundary_effect);
      } else if (_hydration_js__WEBPACK_IMPORTED_MODULE_4__.hydrating) {
        (0,_hydration_js__WEBPACK_IMPORTED_MODULE_4__.set_hydrate_node)(hydrate_open);
        (0,_hydration_js__WEBPACK_IMPORTED_MODULE_4__.next)();
        (0,_hydration_js__WEBPACK_IMPORTED_MODULE_4__.set_hydrate_node)((0,_hydration_js__WEBPACK_IMPORTED_MODULE_4__.remove_nodes)());
      }
      if (failed) {
        // Render the `failed` snippet in a microtask
        (0,_task_js__WEBPACK_IMPORTED_MODULE_5__.queue_micro_task)(() => {
          with_boundary(boundary, () => {
            is_creating_fallback = true;
            try {
              boundary_effect = (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__.branch)(() => {
                failed(anchor, () => error, () => reset);
              });
            } catch (error) {
              (0,_runtime_js__WEBPACK_IMPORTED_MODULE_3__.handle_error)(error, boundary, null, boundary.ctx);
            }
            (0,_runtime_js__WEBPACK_IMPORTED_MODULE_3__.reset_is_throwing_error)();
            is_creating_fallback = false;
          });
        });
      }
    };
    if (_hydration_js__WEBPACK_IMPORTED_MODULE_4__.hydrating) {
      (0,_hydration_js__WEBPACK_IMPORTED_MODULE_4__.hydrate_next)();
    }
    boundary_effect = (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__.branch)(() => boundary_fn(anchor));
    (0,_runtime_js__WEBPACK_IMPORTED_MODULE_3__.reset_is_throwing_error)();
  }, _constants_js__WEBPACK_IMPORTED_MODULE_0__.EFFECT_TRANSPARENT | _constants_js__WEBPACK_IMPORTED_MODULE_0__.BOUNDARY_EFFECT);
  if (_hydration_js__WEBPACK_IMPORTED_MODULE_4__.hydrating) {
    anchor = _hydration_js__WEBPACK_IMPORTED_MODULE_4__.hydrate_node;
  }
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/blocks/css-props.js":
/*!*****************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/blocks/css-props.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   css_props: () => (/* binding */ css_props)
/* harmony export */ });
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _hydration_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../hydration.js */ "../svelte/packages/svelte/src/internal/client/dom/hydration.js");
/* harmony import */ var _operations_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operations.js */ "../svelte/packages/svelte/src/internal/client/dom/operations.js");
/** @import { TemplateNode } from '#client' */




/**
 * @param {HTMLDivElement | SVGGElement} element
 * @param {() => Record<string, string>} get_styles
 * @returns {void}
 */
function css_props(element, get_styles) {
  if (_hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrating) {
    (0,_hydration_js__WEBPACK_IMPORTED_MODULE_1__.set_hydrate_node)(/** @type {TemplateNode} */(0,_operations_js__WEBPACK_IMPORTED_MODULE_2__.get_first_child)(element));
  }
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_0__.render_effect)(() => {
    var styles = get_styles();
    for (var key in styles) {
      var value = styles[key];
      if (value) {
        element.style.setProperty(key, value);
      } else {
        element.style.removeProperty(key);
      }
    }
  });
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_0__.teardown)(() => {
    element.remove();
  });
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/blocks/each.js":
/*!************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/blocks/each.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   current_each_item: () => (/* binding */ current_each_item),
/* harmony export */   each: () => (/* binding */ each),
/* harmony export */   index: () => (/* binding */ index),
/* harmony export */   set_current_each_item: () => (/* binding */ set_current_each_item)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../constants.js */ "../svelte/packages/svelte/src/constants.js");
/* harmony import */ var _hydration_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../hydration.js */ "../svelte/packages/svelte/src/internal/client/dom/hydration.js");
/* harmony import */ var _operations_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operations.js */ "../svelte/packages/svelte/src/internal/client/dom/operations.js");
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _reactivity_sources_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../reactivity/sources.js */ "../svelte/packages/svelte/src/internal/client/reactivity/sources.js");
/* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../shared/utils.js */ "../svelte/packages/svelte/src/internal/shared/utils.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../constants.js */ "../svelte/packages/svelte/src/internal/client/constants.js");
/* harmony import */ var _task_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../task.js */ "../svelte/packages/svelte/src/internal/client/dom/task.js");
/* harmony import */ var _runtime_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../runtime.js */ "../svelte/packages/svelte/src/internal/client/runtime.js");
/* harmony import */ var esm_env__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! esm-env */ "../svelte/node_modules/.pnpm/esm-env@1.2.1/node_modules/esm-env/index.js");
/* harmony import */ var _reactivity_deriveds_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../reactivity/deriveds.js */ "../svelte/packages/svelte/src/internal/client/reactivity/deriveds.js");
/** @import { EachItem, EachState, Effect, MaybeSource, Source, TemplateNode, TransitionManager, Value } from '#client' */












/**
 * The row of a keyed each block that is currently updating. We track this
 * so that `animate:` directives have something to attach themselves to
 * @type {EachItem | null}
 */
let current_each_item = null;

/** @param {EachItem | null} item */
function set_current_each_item(item) {
  current_each_item = item;
}

/**
 * @param {any} _
 * @param {number} i
 */
function index(_, i) {
  return i;
}

/**
 * Pause multiple effects simultaneously, and coordinate their
 * subsequent destruction. Used in each blocks
 * @param {EachState} state
 * @param {EachItem[]} items
 * @param {null | Node} controlled_anchor
 * @param {Map<any, EachItem>} items_map
 */
function pause_effects(state, items, controlled_anchor, items_map) {
  /** @type {TransitionManager[]} */
  var transitions = [];
  var length = items.length;
  for (var i = 0; i < length; i++) {
    (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_3__.pause_children)(items[i].e, transitions, true);
  }
  var is_controlled = length > 0 && transitions.length === 0 && controlled_anchor !== null;
  // If we have a controlled anchor, it means that the each block is inside a single
  // DOM element, so we can apply a fast-path for clearing the contents of the element.
  if (is_controlled) {
    var parent_node = /** @type {Element} */
    /** @type {Element} */controlled_anchor.parentNode;
    (0,_operations_js__WEBPACK_IMPORTED_MODULE_2__.clear_text_content)(parent_node);
    parent_node.append(/** @type {Element} */controlled_anchor);
    items_map.clear();
    link(state, items[0].prev, items[length - 1].next);
  }
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_3__.run_out_transitions)(transitions, () => {
    for (var i = 0; i < length; i++) {
      var item = items[i];
      if (!is_controlled) {
        items_map.delete(item.k);
        link(state, item.prev, item.next);
      }
      (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_3__.destroy_effect)(item.e, !is_controlled);
    }
  });
}

/**
 * @template V
 * @param {Element | Comment} node The next sibling node, or the parent node if this is a 'controlled' block
 * @param {number} flags
 * @param {() => V[]} get_collection
 * @param {(value: V, index: number) => any} get_key
 * @param {(anchor: Node, item: MaybeSource<V>, index: MaybeSource<number>) => void} render_fn
 * @param {null | ((anchor: Node) => void)} fallback_fn
 * @returns {void}
 */
function each(node, flags, get_collection, get_key, render_fn, fallback_fn = null) {
  var anchor = node;

  /** @type {EachState} */
  var state = {
    flags,
    items: new Map(),
    first: null
  };
  var is_controlled = (flags & _constants_js__WEBPACK_IMPORTED_MODULE_0__.EACH_IS_CONTROLLED) !== 0;
  if (is_controlled) {
    var parent_node = /** @type {Element} */node;
    anchor = _hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrating ? (0,_hydration_js__WEBPACK_IMPORTED_MODULE_1__.set_hydrate_node)(/** @type {Comment | Text} */(0,_operations_js__WEBPACK_IMPORTED_MODULE_2__.get_first_child)(parent_node)) : parent_node.appendChild((0,_operations_js__WEBPACK_IMPORTED_MODULE_2__.create_text)());
  }
  if (_hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrating) {
    (0,_hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrate_next)();
  }

  /** @type {Effect | null} */
  var fallback = null;
  var was_empty = false;

  // TODO: ideally we could use derived for runes mode but because of the ability
  // to use a store which can be mutated, we can't do that here as mutating a store
  // will still result in the collection array being the same from the store
  var each_array = (0,_reactivity_deriveds_js__WEBPACK_IMPORTED_MODULE_10__.derived_safe_equal)(() => {
    var collection = get_collection();
    return (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_5__.is_array)(collection) ? collection : collection == null ? [] : (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_5__.array_from)(collection);
  });
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_3__.block)(() => {
    var array = (0,_runtime_js__WEBPACK_IMPORTED_MODULE_8__.get)(each_array);
    var length = array.length;
    if (was_empty && length === 0) {
      // ignore updates if the array is empty,
      // and it already was empty on previous run
      return;
    }
    was_empty = length === 0;

    /** `true` if there was a hydration mismatch. Needs to be a `let` or else it isn't treeshaken out */
    let mismatch = false;
    if (_hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrating) {
      var is_else = /** @type {Comment} */anchor.data === _constants_js__WEBPACK_IMPORTED_MODULE_0__.HYDRATION_START_ELSE;
      if (is_else !== (length === 0)) {
        // hydration mismatch — remove the server-rendered DOM and start over
        anchor = (0,_hydration_js__WEBPACK_IMPORTED_MODULE_1__.remove_nodes)();
        (0,_hydration_js__WEBPACK_IMPORTED_MODULE_1__.set_hydrate_node)(anchor);
        (0,_hydration_js__WEBPACK_IMPORTED_MODULE_1__.set_hydrating)(false);
        mismatch = true;
      }
    }

    // this is separate to the previous block because `hydrating` might change
    if (_hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrating) {
      /** @type {EachItem | null} */
      var prev = null;

      /** @type {EachItem} */
      var item;
      for (var i = 0; i < length; i++) {
        if (_hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrate_node.nodeType === 8 && /** @type {Comment} */_hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrate_node.data === _constants_js__WEBPACK_IMPORTED_MODULE_0__.HYDRATION_END) {
          // The server rendered fewer items than expected,
          // so break out and continue appending non-hydrated items
          anchor = /** @type {Comment} */_hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrate_node;
          mismatch = true;
          (0,_hydration_js__WEBPACK_IMPORTED_MODULE_1__.set_hydrating)(false);
          break;
        }
        var value = array[i];
        var key = get_key(value, i);
        item = create_item(_hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrate_node, state, prev, null, value, key, i, render_fn, flags, get_collection);
        state.items.set(key, item);
        prev = item;
      }

      // remove excess nodes
      if (length > 0) {
        (0,_hydration_js__WEBPACK_IMPORTED_MODULE_1__.set_hydrate_node)((0,_hydration_js__WEBPACK_IMPORTED_MODULE_1__.remove_nodes)());
      }
    }
    if (!_hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrating) {
      reconcile(array, state, anchor, render_fn, flags, get_key, get_collection);
    }
    if (fallback_fn !== null) {
      if (length === 0) {
        if (fallback) {
          (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_3__.resume_effect)(fallback);
        } else {
          fallback = (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_3__.branch)(() => fallback_fn(anchor));
        }
      } else if (fallback !== null) {
        (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_3__.pause_effect)(fallback, () => {
          fallback = null;
        });
      }
    }
    if (mismatch) {
      // continue in hydration mode
      (0,_hydration_js__WEBPACK_IMPORTED_MODULE_1__.set_hydrating)(true);
    }

    // When we mount the each block for the first time, the collection won't be
    // connected to this effect as the effect hasn't finished running yet and its deps
    // won't be assigned. However, it's possible that when reconciling the each block
    // that a mutation occurred and it's made the collection MAYBE_DIRTY, so reading the
    // collection again can provide consistency to the reactive graph again as the deriveds
    // will now be `CLEAN`.
    (0,_runtime_js__WEBPACK_IMPORTED_MODULE_8__.get)(each_array);
  });
  if (_hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrating) {
    anchor = _hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrate_node;
  }
}

/**
 * Add, remove, or reorder items output by an each block as its input changes
 * @template V
 * @param {Array<V>} array
 * @param {EachState} state
 * @param {Element | Comment | Text} anchor
 * @param {(anchor: Node, item: MaybeSource<V>, index: number | Source<number>, collection: () => V[]) => void} render_fn
 * @param {number} flags
 * @param {(value: V, index: number) => any} get_key
 * @param {() => V[]} get_collection
 * @returns {void}
 */
function reconcile(array, state, anchor, render_fn, flags, get_key, get_collection) {
  var is_animated = (flags & _constants_js__WEBPACK_IMPORTED_MODULE_0__.EACH_IS_ANIMATED) !== 0;
  var should_update = (flags & (_constants_js__WEBPACK_IMPORTED_MODULE_0__.EACH_ITEM_REACTIVE | _constants_js__WEBPACK_IMPORTED_MODULE_0__.EACH_INDEX_REACTIVE)) !== 0;
  var length = array.length;
  var items = state.items;
  var first = state.first;
  var current = first;

  /** @type {undefined | Set<EachItem>} */
  var seen;

  /** @type {EachItem | null} */
  var prev = null;

  /** @type {undefined | Set<EachItem>} */
  var to_animate;

  /** @type {EachItem[]} */
  var matched = [];

  /** @type {EachItem[]} */
  var stashed = [];

  /** @type {V} */
  var value;

  /** @type {any} */
  var key;

  /** @type {EachItem | undefined} */
  var item;

  /** @type {number} */
  var i;
  if (is_animated) {
    for (i = 0; i < length; i += 1) {
      value = array[i];
      key = get_key(value, i);
      item = items.get(key);
      if (item !== undefined) {
        item.a?.measure();
        (to_animate ??= new Set()).add(item);
      }
    }
  }
  for (i = 0; i < length; i += 1) {
    value = array[i];
    key = get_key(value, i);
    item = items.get(key);
    if (item === undefined) {
      var child_anchor = current ? (/** @type {TemplateNode} */current.e.nodes_start) : anchor;
      prev = create_item(child_anchor, state, prev, prev === null ? state.first : prev.next, value, key, i, render_fn, flags, get_collection);
      items.set(key, prev);
      matched = [];
      stashed = [];
      current = prev.next;
      continue;
    }
    if (should_update) {
      update_item(item, value, i, flags);
    }
    if ((item.e.f & _constants_js__WEBPACK_IMPORTED_MODULE_6__.INERT) !== 0) {
      (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_3__.resume_effect)(item.e);
      if (is_animated) {
        item.a?.unfix();
        (to_animate ??= new Set()).delete(item);
      }
    }
    if (item !== current) {
      if (seen !== undefined && seen.has(item)) {
        if (matched.length < stashed.length) {
          // more efficient to move later items to the front
          var start = stashed[0];
          var j;
          prev = start.prev;
          var a = matched[0];
          var b = matched[matched.length - 1];
          for (j = 0; j < matched.length; j += 1) {
            move(matched[j], start, anchor);
          }
          for (j = 0; j < stashed.length; j += 1) {
            seen.delete(stashed[j]);
          }
          link(state, a.prev, b.next);
          link(state, prev, a);
          link(state, b, start);
          current = start;
          prev = b;
          i -= 1;
          matched = [];
          stashed = [];
        } else {
          // more efficient to move earlier items to the back
          seen.delete(item);
          move(item, current, anchor);
          link(state, item.prev, item.next);
          link(state, item, prev === null ? state.first : prev.next);
          link(state, prev, item);
          prev = item;
        }
        continue;
      }
      matched = [];
      stashed = [];
      while (current !== null && current.k !== key) {
        // If the each block isn't inert and an item has an effect that is already inert,
        // skip over adding it to our seen Set as the item is already being handled
        if ((current.e.f & _constants_js__WEBPACK_IMPORTED_MODULE_6__.INERT) === 0) {
          (seen ??= new Set()).add(current);
        }
        stashed.push(current);
        current = current.next;
      }
      if (current === null) {
        continue;
      }
      item = current;
    }
    matched.push(item);
    prev = item;
    current = item.next;
  }
  if (current !== null || seen !== undefined) {
    var to_destroy = seen === undefined ? [] : (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_5__.array_from)(seen);
    while (current !== null) {
      // If the each block isn't inert, then inert effects are currently outroing and will be removed once the transition is finished
      if ((current.e.f & _constants_js__WEBPACK_IMPORTED_MODULE_6__.INERT) === 0) {
        to_destroy.push(current);
      }
      current = current.next;
    }
    var destroy_length = to_destroy.length;
    if (destroy_length > 0) {
      var controlled_anchor = (flags & _constants_js__WEBPACK_IMPORTED_MODULE_0__.EACH_IS_CONTROLLED) !== 0 && length === 0 ? anchor : null;
      if (is_animated) {
        for (i = 0; i < destroy_length; i += 1) {
          to_destroy[i].a?.measure();
        }
        for (i = 0; i < destroy_length; i += 1) {
          to_destroy[i].a?.fix();
        }
      }
      pause_effects(state, to_destroy, controlled_anchor, items);
    }
  }
  if (is_animated) {
    (0,_task_js__WEBPACK_IMPORTED_MODULE_7__.queue_micro_task)(() => {
      if (to_animate === undefined) return;
      for (item of to_animate) {
        item.a?.apply();
      }
    });
  }

  /** @type {Effect} */
  _runtime_js__WEBPACK_IMPORTED_MODULE_8__.active_effect.first = state.first && state.first.e;
  /** @type {Effect} */
  _runtime_js__WEBPACK_IMPORTED_MODULE_8__.active_effect.last = prev && prev.e;
}

/**
 * @param {EachItem} item
 * @param {any} value
 * @param {number} index
 * @param {number} type
 * @returns {void}
 */
function update_item(item, value, index, type) {
  if ((type & _constants_js__WEBPACK_IMPORTED_MODULE_0__.EACH_ITEM_REACTIVE) !== 0) {
    (0,_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_4__.internal_set)(item.v, value);
  }
  if ((type & _constants_js__WEBPACK_IMPORTED_MODULE_0__.EACH_INDEX_REACTIVE) !== 0) {
    (0,_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_4__.internal_set)(/** @type {Value<number>} */item.i, index);
  } else {
    item.i = index;
  }
}

/**
 * @template V
 * @param {Node} anchor
 * @param {EachState} state
 * @param {EachItem | null} prev
 * @param {EachItem | null} next
 * @param {V} value
 * @param {unknown} key
 * @param {number} index
 * @param {(anchor: Node, item: V | Source<V>, index: number | Value<number>, collection: () => V[]) => void} render_fn
 * @param {number} flags
 * @param {() => V[]} get_collection
 * @returns {EachItem}
 */
function create_item(anchor, state, prev, next, value, key, index, render_fn, flags, get_collection) {
  var previous_each_item = current_each_item;
  var reactive = (flags & _constants_js__WEBPACK_IMPORTED_MODULE_0__.EACH_ITEM_REACTIVE) !== 0;
  var mutable = (flags & _constants_js__WEBPACK_IMPORTED_MODULE_0__.EACH_ITEM_IMMUTABLE) === 0;
  var v = reactive ? mutable ? (0,_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_4__.mutable_source)(value) : (0,_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_4__.source)(value) : value;
  var i = (flags & _constants_js__WEBPACK_IMPORTED_MODULE_0__.EACH_INDEX_REACTIVE) === 0 ? index : (0,_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_4__.source)(index);
  if (esm_env__WEBPACK_IMPORTED_MODULE_9__.DEV && reactive) {
    // For tracing purposes, we need to link the source signal we create with the
    // collection + index so that tracing works as intended
    /** @type {Value} */
    v.debug = () => {
      var collection_index = typeof i === 'number' ? index : i.v;
      // eslint-disable-next-line @typescript-eslint/no-unused-expressions
      get_collection()[collection_index];
    };
  }

  /** @type {EachItem} */
  var item = {
    i,
    v,
    k: key,
    a: null,
    // @ts-expect-error
    e: null,
    prev,
    next
  };
  current_each_item = item;
  try {
    item.e = (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_3__.branch)(() => render_fn(anchor, v, i, get_collection), _hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrating);
    item.e.prev = prev && prev.e;
    item.e.next = next && next.e;
    if (prev === null) {
      state.first = item;
    } else {
      prev.next = item;
      prev.e.next = item.e;
    }
    if (next !== null) {
      next.prev = item;
      next.e.prev = item.e;
    }
    return item;
  } finally {
    current_each_item = previous_each_item;
  }
}

/**
 * @param {EachItem} item
 * @param {EachItem | null} next
 * @param {Text | Element | Comment} anchor
 */
function move(item, next, anchor) {
  var end = item.next ? (/** @type {TemplateNode} */item.next.e.nodes_start) : anchor;
  var dest = next ? (/** @type {TemplateNode} */next.e.nodes_start) : anchor;
  var node = /** @type {TemplateNode} */item.e.nodes_start;
  while (node !== end) {
    var next_node = /** @type {TemplateNode} */(0,_operations_js__WEBPACK_IMPORTED_MODULE_2__.get_next_sibling)(node);
    dest.before(node);
    node = next_node;
  }
}

/**
 * @param {EachState} state
 * @param {EachItem | null} prev
 * @param {EachItem | null} next
 */
function link(state, prev, next) {
  if (prev === null) {
    state.first = next;
  } else {
    prev.next = next;
    prev.e.next = next && next.e;
  }
  if (next !== null) {
    next.prev = prev;
    next.e.prev = prev && prev.e;
  }
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/blocks/html.js":
/*!************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/blocks/html.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   html: () => (/* binding */ html)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../constants.js */ "../svelte/packages/svelte/src/constants.js");
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _hydration_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../hydration.js */ "../svelte/packages/svelte/src/internal/client/dom/hydration.js");
/* harmony import */ var _reconciler_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../reconciler.js */ "../svelte/packages/svelte/src/internal/client/dom/reconciler.js");
/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../template.js */ "../svelte/packages/svelte/src/internal/client/dom/template.js");
/* harmony import */ var _warnings_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../warnings.js */ "../svelte/packages/svelte/src/internal/client/warnings.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../utils.js */ "../svelte/packages/svelte/src/utils.js");
/* harmony import */ var esm_env__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! esm-env */ "../svelte/node_modules/.pnpm/esm-env@1.2.1/node_modules/esm-env/index.js");
/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../context.js */ "../svelte/packages/svelte/src/internal/client/context.js");
/* harmony import */ var _operations_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../operations.js */ "../svelte/packages/svelte/src/internal/client/dom/operations.js");
/** @import { Effect, TemplateNode } from '#client' */











/**
 * @param {Element} element
 * @param {string | null} server_hash
 * @param {string} value
 */
function check_hash(element, server_hash, value) {
  if (!server_hash || server_hash === (0,_utils_js__WEBPACK_IMPORTED_MODULE_6__.hash)(String(value ?? ''))) return;
  let location;

  // @ts-expect-error
  const loc = element.__svelte_meta?.loc;
  if (loc) {
    location = `near ${loc.file}:${loc.line}:${loc.column}`;
  } else if (_context_js__WEBPACK_IMPORTED_MODULE_8__.dev_current_component_function?.[_constants_js__WEBPACK_IMPORTED_MODULE_0__.FILENAME]) {
    location = `in ${_context_js__WEBPACK_IMPORTED_MODULE_8__.dev_current_component_function[_constants_js__WEBPACK_IMPORTED_MODULE_0__.FILENAME]}`;
  }
  _warnings_js__WEBPACK_IMPORTED_MODULE_5__.hydration_html_changed((0,_utils_js__WEBPACK_IMPORTED_MODULE_6__.sanitize_location)(location));
}

/**
 * @param {Element | Text | Comment} node
 * @param {() => string} get_value
 * @param {boolean} svg
 * @param {boolean} mathml
 * @param {boolean} [skip_warning]
 * @returns {void}
 */
function html(node, get_value, svg, mathml, skip_warning) {
  var anchor = node;
  var value = '';

  /** @type {Effect | undefined} */
  var effect;
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.block)(() => {
    if (value === (value = get_value() ?? '')) {
      if (_hydration_js__WEBPACK_IMPORTED_MODULE_2__.hydrating) {
        (0,_hydration_js__WEBPACK_IMPORTED_MODULE_2__.hydrate_next)();
      }
      return;
    }
    if (effect !== undefined) {
      (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.destroy_effect)(effect);
      effect = undefined;
    }
    if (value === '') return;
    effect = (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.branch)(() => {
      if (_hydration_js__WEBPACK_IMPORTED_MODULE_2__.hydrating) {
        // We're deliberately not trying to repair mismatches between server and client,
        // as it's costly and error-prone (and it's an edge case to have a mismatch anyway)
        var hash = /** @type {Comment} */_hydration_js__WEBPACK_IMPORTED_MODULE_2__.hydrate_node.data;
        var next = (0,_hydration_js__WEBPACK_IMPORTED_MODULE_2__.hydrate_next)();
        var last = next;
        while (next !== null && (next.nodeType !== 8 || /** @type {Comment} */next.data !== '')) {
          last = next;
          next = /** @type {TemplateNode} */(0,_operations_js__WEBPACK_IMPORTED_MODULE_9__.get_next_sibling)(next);
        }
        if (next === null) {
          _warnings_js__WEBPACK_IMPORTED_MODULE_5__.hydration_mismatch();
          throw _constants_js__WEBPACK_IMPORTED_MODULE_0__.HYDRATION_ERROR;
        }
        if (esm_env__WEBPACK_IMPORTED_MODULE_7__.DEV && !skip_warning) {
          check_hash(/** @type {Element} */next.parentNode, hash, value);
        }
        (0,_template_js__WEBPACK_IMPORTED_MODULE_4__.assign_nodes)(_hydration_js__WEBPACK_IMPORTED_MODULE_2__.hydrate_node, last);
        anchor = (0,_hydration_js__WEBPACK_IMPORTED_MODULE_2__.set_hydrate_node)(next);
        return;
      }
      var html = value + '';
      if (svg) html = `<svg>${html}</svg>`;else if (mathml) html = `<math>${html}</math>`;

      // Don't use create_fragment_with_script_from_html here because that would mean script tags are executed.
      // @html is basically `.innerHTML = ...` and that doesn't execute scripts either due to security reasons.
      /** @type {DocumentFragment | Element} */
      var node = (0,_reconciler_js__WEBPACK_IMPORTED_MODULE_3__.create_fragment_from_html)(html);
      if (svg || mathml) {
        node = /** @type {Element} */(0,_operations_js__WEBPACK_IMPORTED_MODULE_9__.get_first_child)(node);
      }
      (0,_template_js__WEBPACK_IMPORTED_MODULE_4__.assign_nodes)(/** @type {TemplateNode} */(0,_operations_js__WEBPACK_IMPORTED_MODULE_9__.get_first_child)(node), /** @type {TemplateNode} */node.lastChild);
      if (svg || mathml) {
        while ((0,_operations_js__WEBPACK_IMPORTED_MODULE_9__.get_first_child)(node)) {
          anchor.before(/** @type {Node} */(0,_operations_js__WEBPACK_IMPORTED_MODULE_9__.get_first_child)(node));
        }
      } else {
        anchor.before(node);
      }
    });
  });
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/blocks/if.js":
/*!**********************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/blocks/if.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   if_block: () => (/* binding */ if_block)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../constants.js */ "../svelte/packages/svelte/src/internal/client/constants.js");
/* harmony import */ var _hydration_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../hydration.js */ "../svelte/packages/svelte/src/internal/client/dom/hydration.js");
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../constants.js */ "../svelte/packages/svelte/src/constants.js");
/** @import { Effect, TemplateNode } from '#client' */





/**
 * @param {TemplateNode} node
 * @param {(branch: (fn: (anchor: Node) => void, flag?: boolean) => void) => void} fn
 * @param {boolean} [elseif] True if this is an `{:else if ...}` block rather than an `{#if ...}`, as that affects which transitions are considered 'local'
 * @returns {void}
 */
function if_block(node, fn, elseif = false) {
  if (_hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrating) {
    (0,_hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrate_next)();
  }
  var anchor = node;

  /** @type {Effect | null} */
  var consequent_effect = null;

  /** @type {Effect | null} */
  var alternate_effect = null;

  /** @type {UNINITIALIZED | boolean | null} */
  var condition = _constants_js__WEBPACK_IMPORTED_MODULE_3__.UNINITIALIZED;
  var flags = elseif ? _constants_js__WEBPACK_IMPORTED_MODULE_0__.EFFECT_TRANSPARENT : 0;
  var has_branch = false;
  const set_branch = (/** @type {(anchor: Node) => void} */fn, flag = true) => {
    has_branch = true;
    update_branch(flag, fn);
  };
  const update_branch = (/** @type {boolean | null} */new_condition, /** @type {null | ((anchor: Node) => void)} */fn) => {
    if (condition === (condition = new_condition)) return;

    /** Whether or not there was a hydration mismatch. Needs to be a `let` or else it isn't treeshaken out */
    let mismatch = false;
    if (_hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrating) {
      const is_else = /** @type {Comment} */anchor.data === _constants_js__WEBPACK_IMPORTED_MODULE_3__.HYDRATION_START_ELSE;
      if (!!condition === is_else) {
        // Hydration mismatch: remove everything inside the anchor and start fresh.
        // This could happen with `{#if browser}...{/if}`, for example
        anchor = (0,_hydration_js__WEBPACK_IMPORTED_MODULE_1__.remove_nodes)();
        (0,_hydration_js__WEBPACK_IMPORTED_MODULE_1__.set_hydrate_node)(anchor);
        (0,_hydration_js__WEBPACK_IMPORTED_MODULE_1__.set_hydrating)(false);
        mismatch = true;
      }
    }
    if (condition) {
      if (consequent_effect) {
        (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__.resume_effect)(consequent_effect);
      } else if (fn) {
        consequent_effect = (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__.branch)(() => fn(anchor));
      }
      if (alternate_effect) {
        (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__.pause_effect)(alternate_effect, () => {
          alternate_effect = null;
        });
      }
    } else {
      if (alternate_effect) {
        (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__.resume_effect)(alternate_effect);
      } else if (fn) {
        alternate_effect = (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__.branch)(() => fn(anchor));
      }
      if (consequent_effect) {
        (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__.pause_effect)(consequent_effect, () => {
          consequent_effect = null;
        });
      }
    }
    if (mismatch) {
      // continue in hydration mode
      (0,_hydration_js__WEBPACK_IMPORTED_MODULE_1__.set_hydrating)(true);
    }
  };
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__.block)(() => {
    has_branch = false;
    fn(set_branch);
    if (!has_branch) {
      update_branch(null, null);
    }
  }, flags);
  if (_hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrating) {
    anchor = _hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrate_node;
  }
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/blocks/key.js":
/*!***********************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/blocks/key.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   key_block: () => (/* binding */ key_block)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../constants.js */ "../svelte/packages/svelte/src/constants.js");
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _reactivity_equality_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../reactivity/equality.js */ "../svelte/packages/svelte/src/internal/client/reactivity/equality.js");
/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../context.js */ "../svelte/packages/svelte/src/internal/client/context.js");
/* harmony import */ var _hydration_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../hydration.js */ "../svelte/packages/svelte/src/internal/client/dom/hydration.js");
/** @import { Effect, TemplateNode } from '#client' */






/**
 * @template V
 * @param {TemplateNode} node
 * @param {() => V} get_key
 * @param {(anchor: Node) => TemplateNode | void} render_fn
 * @returns {void}
 */
function key_block(node, get_key, render_fn) {
  if (_hydration_js__WEBPACK_IMPORTED_MODULE_4__.hydrating) {
    (0,_hydration_js__WEBPACK_IMPORTED_MODULE_4__.hydrate_next)();
  }
  var anchor = node;

  /** @type {V | typeof UNINITIALIZED} */
  var key = _constants_js__WEBPACK_IMPORTED_MODULE_0__.UNINITIALIZED;

  /** @type {Effect} */
  var effect;
  var changed = (0,_context_js__WEBPACK_IMPORTED_MODULE_3__.is_runes)() ? _reactivity_equality_js__WEBPACK_IMPORTED_MODULE_2__.not_equal : _reactivity_equality_js__WEBPACK_IMPORTED_MODULE_2__.safe_not_equal;
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.block)(() => {
    if (changed(key, key = get_key())) {
      if (effect) {
        (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.pause_effect)(effect);
      }
      effect = (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.branch)(() => render_fn(anchor));
    }
  });
  if (_hydration_js__WEBPACK_IMPORTED_MODULE_4__.hydrating) {
    anchor = _hydration_js__WEBPACK_IMPORTED_MODULE_4__.hydrate_node;
  }
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/blocks/slot.js":
/*!************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/blocks/slot.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   sanitize_slots: () => (/* binding */ sanitize_slots),
/* harmony export */   slot: () => (/* binding */ slot)
/* harmony export */ });
/* harmony import */ var _hydration_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../hydration.js */ "../svelte/packages/svelte/src/internal/client/dom/hydration.js");


/**
 * @param {Comment} anchor
 * @param {Record<string, any>} $$props
 * @param {string} name
 * @param {Record<string, unknown>} slot_props
 * @param {null | ((anchor: Comment) => void)} fallback_fn
 */
function slot(anchor, $$props, name, slot_props, fallback_fn) {
  if (_hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrating) {
    (0,_hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrate_next)();
  }
  var slot_fn = $$props.$$slots?.[name];
  // Interop: Can use snippets to fill slots
  var is_interop = false;
  if (slot_fn === true) {
    slot_fn = $$props[name === 'default' ? 'children' : name];
    is_interop = true;
  }
  if (slot_fn === undefined) {
    if (fallback_fn !== null) {
      fallback_fn(anchor);
    }
  } else {
    slot_fn(anchor, is_interop ? () => slot_props : slot_props);
  }
}

/**
 * @param {Record<string, any>} props
 * @returns {Record<string, boolean>}
 */
function sanitize_slots(props) {
  /** @type {Record<string, boolean>} */
  const sanitized = {};
  if (props.children) sanitized.default = true;
  for (const key in props.$$slots) {
    sanitized[key] = true;
  }
  return sanitized;
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/blocks/snippet.js":
/*!***************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/blocks/snippet.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createRawSnippet: () => (/* binding */ createRawSnippet),
/* harmony export */   snippet: () => (/* binding */ snippet),
/* harmony export */   wrap_snippet: () => (/* binding */ wrap_snippet)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../constants.js */ "../svelte/packages/svelte/src/internal/client/constants.js");
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../context.js */ "../svelte/packages/svelte/src/internal/client/context.js");
/* harmony import */ var _hydration_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../hydration.js */ "../svelte/packages/svelte/src/internal/client/dom/hydration.js");
/* harmony import */ var _reconciler_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../reconciler.js */ "../svelte/packages/svelte/src/internal/client/dom/reconciler.js");
/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../template.js */ "../svelte/packages/svelte/src/internal/client/dom/template.js");
/* harmony import */ var _warnings_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../warnings.js */ "../svelte/packages/svelte/src/internal/client/warnings.js");
/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../errors.js */ "../svelte/packages/svelte/src/internal/client/errors.js");
/* harmony import */ var esm_env__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! esm-env */ "../svelte/node_modules/.pnpm/esm-env@1.2.1/node_modules/esm-env/index.js");
/* harmony import */ var _operations_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../operations.js */ "../svelte/packages/svelte/src/internal/client/dom/operations.js");
/* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../shared/utils.js */ "../svelte/packages/svelte/src/internal/shared/utils.js");
/** @import { Snippet } from 'svelte' */
/** @import { Effect, TemplateNode } from '#client' */
/** @import { Getters } from '#shared' */












/**
 * @template {(node: TemplateNode, ...args: any[]) => void} SnippetFn
 * @param {TemplateNode} node
 * @param {() => SnippetFn | null | undefined} get_snippet
 * @param {(() => any)[]} args
 * @returns {void}
 */
function snippet(node, get_snippet, ...args) {
  var anchor = node;

  /** @type {SnippetFn | null | undefined} */
  // @ts-ignore
  var snippet = _shared_utils_js__WEBPACK_IMPORTED_MODULE_10__.noop;

  /** @type {Effect | null} */
  var snippet_effect;
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.block)(() => {
    if (snippet === (snippet = get_snippet())) return;
    if (snippet_effect) {
      (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.destroy_effect)(snippet_effect);
      snippet_effect = null;
    }
    if (esm_env__WEBPACK_IMPORTED_MODULE_8__.DEV && snippet == null) {
      _errors_js__WEBPACK_IMPORTED_MODULE_7__.invalid_snippet();
    }
    snippet_effect = (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.branch)(() => /** @type {SnippetFn} */snippet(anchor, ...args));
  }, _constants_js__WEBPACK_IMPORTED_MODULE_0__.EFFECT_TRANSPARENT);
  if (_hydration_js__WEBPACK_IMPORTED_MODULE_3__.hydrating) {
    anchor = _hydration_js__WEBPACK_IMPORTED_MODULE_3__.hydrate_node;
  }
}

/**
 * In development, wrap the snippet function so that it passes validation, and so that the
 * correct component context is set for ownership checks
 * @param {any} component
 * @param {(node: TemplateNode, ...args: any[]) => void} fn
 */
function wrap_snippet(component, fn) {
  return (/** @type {TemplateNode} */node, /** @type {any[]} */...args) => {
    var previous_component_function = _context_js__WEBPACK_IMPORTED_MODULE_2__.dev_current_component_function;
    (0,_context_js__WEBPACK_IMPORTED_MODULE_2__.set_dev_current_component_function)(component);
    try {
      return fn(node, ...args);
    } finally {
      (0,_context_js__WEBPACK_IMPORTED_MODULE_2__.set_dev_current_component_function)(previous_component_function);
    }
  };
}

/**
 * Create a snippet programmatically
 * @template {unknown[]} Params
 * @param {(...params: Getters<Params>) => {
 *   render: () => string
 *   setup?: (element: Element) => void | (() => void)
 * }} fn
 * @returns {Snippet<Params>}
 */
function createRawSnippet(fn) {
  // @ts-expect-error the types are a lie
  return (/** @type {TemplateNode} */anchor, /** @type {Getters<Params>} */...params) => {
    var snippet = fn(...params);

    /** @type {Element} */
    var element;
    if (_hydration_js__WEBPACK_IMPORTED_MODULE_3__.hydrating) {
      element = /** @type {Element} */_hydration_js__WEBPACK_IMPORTED_MODULE_3__.hydrate_node;
      (0,_hydration_js__WEBPACK_IMPORTED_MODULE_3__.hydrate_next)();
    } else {
      var html = snippet.render().trim();
      var fragment = (0,_reconciler_js__WEBPACK_IMPORTED_MODULE_4__.create_fragment_from_html)(html);
      element = /** @type {Element} */(0,_operations_js__WEBPACK_IMPORTED_MODULE_9__.get_first_child)(fragment);
      if (esm_env__WEBPACK_IMPORTED_MODULE_8__.DEV && ((0,_operations_js__WEBPACK_IMPORTED_MODULE_9__.get_next_sibling)(element) !== null || element.nodeType !== 1)) {
        _warnings_js__WEBPACK_IMPORTED_MODULE_6__.invalid_raw_snippet_render();
      }
      anchor.before(element);
    }
    const result = snippet.setup?.(element);
    (0,_template_js__WEBPACK_IMPORTED_MODULE_5__.assign_nodes)(element, element);
    if (typeof result === 'function') {
      (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.teardown)(result);
    }
  };
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/blocks/svelte-component.js":
/*!************************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/blocks/svelte-component.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   component: () => (/* binding */ component)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../constants.js */ "../svelte/packages/svelte/src/internal/client/constants.js");
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _hydration_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../hydration.js */ "../svelte/packages/svelte/src/internal/client/dom/hydration.js");
/** @import { TemplateNode, Dom, Effect } from '#client' */




/**
 * @template P
 * @template {(props: P) => void} C
 * @param {TemplateNode} node
 * @param {() => C} get_component
 * @param {(anchor: TemplateNode, component: C) => Dom | void} render_fn
 * @returns {void}
 */
function component(node, get_component, render_fn) {
  if (_hydration_js__WEBPACK_IMPORTED_MODULE_2__.hydrating) {
    (0,_hydration_js__WEBPACK_IMPORTED_MODULE_2__.hydrate_next)();
  }
  var anchor = node;

  /** @type {C} */
  var component;

  /** @type {Effect | null} */
  var effect;
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.block)(() => {
    if (component === (component = get_component())) return;
    if (effect) {
      (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.pause_effect)(effect);
      effect = null;
    }
    if (component) {
      effect = (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.branch)(() => render_fn(anchor, component));
    }
  }, _constants_js__WEBPACK_IMPORTED_MODULE_0__.EFFECT_TRANSPARENT);
  if (_hydration_js__WEBPACK_IMPORTED_MODULE_2__.hydrating) {
    anchor = _hydration_js__WEBPACK_IMPORTED_MODULE_2__.hydrate_node;
  }
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/blocks/svelte-element.js":
/*!**********************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/blocks/svelte-element.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   element: () => (/* binding */ element)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../constants.js */ "../svelte/packages/svelte/src/constants.js");
/* harmony import */ var _hydration_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../hydration.js */ "../svelte/packages/svelte/src/internal/client/dom/hydration.js");
/* harmony import */ var _operations_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operations.js */ "../svelte/packages/svelte/src/internal/client/dom/operations.js");
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _render_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../render.js */ "../svelte/packages/svelte/src/internal/client/render.js");
/* harmony import */ var _each_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./each.js */ "../svelte/packages/svelte/src/internal/client/dom/blocks/each.js");
/* harmony import */ var _runtime_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../runtime.js */ "../svelte/packages/svelte/src/internal/client/runtime.js");
/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../context.js */ "../svelte/packages/svelte/src/internal/client/context.js");
/* harmony import */ var esm_env__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! esm-env */ "../svelte/node_modules/.pnpm/esm-env@1.2.1/node_modules/esm-env/index.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../constants.js */ "../svelte/packages/svelte/src/internal/client/constants.js");
/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../template.js */ "../svelte/packages/svelte/src/internal/client/dom/template.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../utils.js */ "../svelte/packages/svelte/src/utils.js");
/** @import { Effect, TemplateNode } from '#client' */













/**
 * @param {Comment | Element} node
 * @param {() => string} get_tag
 * @param {boolean} is_svg
 * @param {undefined | ((element: Element, anchor: Node | null) => void)} render_fn,
 * @param {undefined | (() => string)} get_namespace
 * @param {undefined | [number, number]} location
 * @returns {void}
 */
function element(node, get_tag, is_svg, render_fn, get_namespace, location) {
  let was_hydrating = _hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrating;
  if (_hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrating) {
    (0,_hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrate_next)();
  }
  var filename = esm_env__WEBPACK_IMPORTED_MODULE_8__.DEV && location && _context_js__WEBPACK_IMPORTED_MODULE_7__.component_context?.function[_constants_js__WEBPACK_IMPORTED_MODULE_0__.FILENAME];

  /** @type {string | null} */
  var tag;

  /** @type {string | null} */
  var current_tag;

  /** @type {null | Element} */
  var element = null;
  if (_hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrating && _hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrate_node.nodeType === 1) {
    element = /** @type {Element} */_hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrate_node;
    (0,_hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrate_next)();
  }
  var anchor = /** @type {TemplateNode} */_hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrating ? _hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrate_node : node;

  /** @type {Effect | null} */
  var effect;

  /**
   * The keyed `{#each ...}` item block, if any, that this element is inside.
   * We track this so we can set it when changing the element, allowing any
   * `animate:` directive to bind itself to the correct block
   */
  var each_item_block = _each_js__WEBPACK_IMPORTED_MODULE_5__.current_each_item;
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_3__.block)(() => {
    const next_tag = get_tag() || null;
    var ns = get_namespace ? get_namespace() : is_svg || next_tag === 'svg' ? _constants_js__WEBPACK_IMPORTED_MODULE_0__.NAMESPACE_SVG : null;

    // Assumption: Noone changes the namespace but not the tag (what would that even mean?)
    if (next_tag === tag) return;

    // See explanation of `each_item_block` above
    var previous_each_item = _each_js__WEBPACK_IMPORTED_MODULE_5__.current_each_item;
    (0,_each_js__WEBPACK_IMPORTED_MODULE_5__.set_current_each_item)(each_item_block);
    if (effect) {
      if (next_tag === null) {
        // start outro
        (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_3__.pause_effect)(effect, () => {
          effect = null;
          current_tag = null;
        });
      } else if (next_tag === current_tag) {
        // same tag as is currently rendered — abort outro
        (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_3__.resume_effect)(effect);
      } else {
        // tag is changing — destroy immediately, render contents without intro transitions
        (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_3__.destroy_effect)(effect);
        (0,_render_js__WEBPACK_IMPORTED_MODULE_4__.set_should_intro)(false);
      }
    }
    if (next_tag && next_tag !== current_tag) {
      effect = (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_3__.branch)(() => {
        element = _hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrating ? (/** @type {Element} */element) : ns ? document.createElementNS(ns, next_tag) : document.createElement(next_tag);
        if (esm_env__WEBPACK_IMPORTED_MODULE_8__.DEV && location) {
          // @ts-expect-error
          element.__svelte_meta = {
            loc: {
              file: filename,
              line: location[0],
              column: location[1]
            }
          };
        }
        (0,_template_js__WEBPACK_IMPORTED_MODULE_10__.assign_nodes)(element, element);
        if (render_fn) {
          if (_hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrating && (0,_utils_js__WEBPACK_IMPORTED_MODULE_11__.is_raw_text_element)(next_tag)) {
            // prevent hydration glitches
            element.append(document.createComment(''));
          }

          // If hydrating, use the existing ssr comment as the anchor so that the
          // inner open and close methods can pick up the existing nodes correctly
          var child_anchor = /** @type {TemplateNode} */
          _hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrating ? (0,_operations_js__WEBPACK_IMPORTED_MODULE_2__.get_first_child)(element) : element.appendChild((0,_operations_js__WEBPACK_IMPORTED_MODULE_2__.create_text)());
          if (_hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrating) {
            if (child_anchor === null) {
              (0,_hydration_js__WEBPACK_IMPORTED_MODULE_1__.set_hydrating)(false);
            } else {
              (0,_hydration_js__WEBPACK_IMPORTED_MODULE_1__.set_hydrate_node)(child_anchor);
            }
          }

          // `child_anchor` is undefined if this is a void element, but we still
          // need to call `render_fn` in order to run actions etc. If the element
          // contains children, it's a user error (which is warned on elsewhere)
          // and the DOM will be silently discarded
          render_fn(element, child_anchor);
        }

        // we do this after calling `render_fn` so that child effects don't override `nodes.end`
        /** @type {Effect} */
        _runtime_js__WEBPACK_IMPORTED_MODULE_6__.active_effect.nodes_end = element;
        anchor.before(element);
      });
    }
    tag = next_tag;
    if (tag) current_tag = tag;
    (0,_render_js__WEBPACK_IMPORTED_MODULE_4__.set_should_intro)(true);
    (0,_each_js__WEBPACK_IMPORTED_MODULE_5__.set_current_each_item)(previous_each_item);
  }, _constants_js__WEBPACK_IMPORTED_MODULE_9__.EFFECT_TRANSPARENT);
  if (was_hydrating) {
    (0,_hydration_js__WEBPACK_IMPORTED_MODULE_1__.set_hydrating)(true);
    (0,_hydration_js__WEBPACK_IMPORTED_MODULE_1__.set_hydrate_node)(anchor);
  }
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/blocks/svelte-head.js":
/*!*******************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/blocks/svelte-head.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   head: () => (/* binding */ head),
/* harmony export */   reset_head_anchor: () => (/* binding */ reset_head_anchor)
/* harmony export */ });
/* harmony import */ var _hydration_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../hydration.js */ "../svelte/packages/svelte/src/internal/client/dom/hydration.js");
/* harmony import */ var _operations_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../operations.js */ "../svelte/packages/svelte/src/internal/client/dom/operations.js");
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../constants.js */ "../svelte/packages/svelte/src/internal/client/constants.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../constants.js */ "../svelte/packages/svelte/src/constants.js");
/** @import { TemplateNode } from '#client' */






/**
 * @type {Node | undefined}
 */
let head_anchor;
function reset_head_anchor() {
  head_anchor = undefined;
}

/**
 * @param {(anchor: Node) => void} render_fn
 * @returns {void}
 */
function head(render_fn) {
  // The head function may be called after the first hydration pass and ssr comment nodes may still be present,
  // therefore we need to skip that when we detect that we're not in hydration mode.
  let previous_hydrate_node = null;
  let was_hydrating = _hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrating;

  /** @type {Comment | Text} */
  var anchor;
  if (_hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrating) {
    previous_hydrate_node = _hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrate_node;

    // There might be multiple head blocks in our app, so we need to account for each one needing independent hydration.
    if (head_anchor === undefined) {
      head_anchor = /** @type {TemplateNode} */(0,_operations_js__WEBPACK_IMPORTED_MODULE_1__.get_first_child)(document.head);
    }
    while (head_anchor !== null && (head_anchor.nodeType !== 8 || /** @type {Comment} */head_anchor.data !== _constants_js__WEBPACK_IMPORTED_MODULE_4__.HYDRATION_START)) {
      head_anchor = /** @type {TemplateNode} */(0,_operations_js__WEBPACK_IMPORTED_MODULE_1__.get_next_sibling)(head_anchor);
    }

    // If we can't find an opening hydration marker, skip hydration (this can happen
    // if a framework rendered body but not head content)
    if (head_anchor === null) {
      (0,_hydration_js__WEBPACK_IMPORTED_MODULE_0__.set_hydrating)(false);
    } else {
      head_anchor = (0,_hydration_js__WEBPACK_IMPORTED_MODULE_0__.set_hydrate_node)(/** @type {TemplateNode} */(0,_operations_js__WEBPACK_IMPORTED_MODULE_1__.get_next_sibling)(head_anchor));
    }
  }
  if (!_hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrating) {
    anchor = document.head.appendChild((0,_operations_js__WEBPACK_IMPORTED_MODULE_1__.create_text)());
  }
  try {
    (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__.block)(() => render_fn(anchor), _constants_js__WEBPACK_IMPORTED_MODULE_3__.HEAD_EFFECT);
  } finally {
    if (was_hydrating) {
      (0,_hydration_js__WEBPACK_IMPORTED_MODULE_0__.set_hydrating)(true);
      head_anchor = _hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrate_node; // so that next head block starts from the correct node
      (0,_hydration_js__WEBPACK_IMPORTED_MODULE_0__.set_hydrate_node)(/** @type {TemplateNode} */previous_hydrate_node);
    }
  }
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/css.js":
/*!****************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/css.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   append_styles: () => (/* binding */ append_styles)
/* harmony export */ });
/* harmony import */ var esm_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! esm-env */ "../svelte/node_modules/.pnpm/esm-env@1.2.1/node_modules/esm-env/index.js");
/* harmony import */ var _task_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./task.js */ "../svelte/packages/svelte/src/internal/client/dom/task.js");
/* harmony import */ var _dev_css_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dev/css.js */ "../svelte/packages/svelte/src/internal/client/dev/css.js");




/**
 * @param {Node} anchor
 * @param {{ hash: string, code: string }} css
 */
function append_styles(anchor, css) {
  // Use `queue_micro_task` to ensure `anchor` is in the DOM, otherwise getRootNode() will yield wrong results
  (0,_task_js__WEBPACK_IMPORTED_MODULE_1__.queue_micro_task)(() => {
    var root = anchor.getRootNode();
    var target = /** @type {ShadowRoot} */root.host ? (/** @type {ShadowRoot} */root) : /** @type {Document} */root.head ?? /** @type {Document} */root.ownerDocument.head;

    // Always querying the DOM is roughly the same perf as additionally checking for presence in a map first assuming
    // that you'll get cache hits half of the time, so we just always query the dom for simplicity and code savings.
    if (!target.querySelector('#' + css.hash)) {
      const style = document.createElement('style');
      style.id = css.hash;
      style.textContent = css.code;
      target.appendChild(style);
      if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
        (0,_dev_css_js__WEBPACK_IMPORTED_MODULE_2__.register_style)(css.hash, style);
      }
    }
  });
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/elements/actions.js":
/*!*****************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/elements/actions.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   action: () => (/* binding */ action)
/* harmony export */ });
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _reactivity_equality_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../reactivity/equality.js */ "../svelte/packages/svelte/src/internal/client/reactivity/equality.js");
/* harmony import */ var _runtime_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../runtime.js */ "../svelte/packages/svelte/src/internal/client/runtime.js");
/** @import { ActionPayload } from '#client' */




/**
 * @template P
 * @param {Element} dom
 * @param {(dom: Element, value?: P) => ActionPayload<P>} action
 * @param {() => P} [get_value]
 * @returns {void}
 */
function action(dom, action, get_value) {
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_0__.effect)(() => {
    var payload = (0,_runtime_js__WEBPACK_IMPORTED_MODULE_2__.untrack)(() => action(dom, get_value?.()) || {});
    if (get_value && payload?.update) {
      var inited = false;
      /** @type {P} */
      var prev = /** @type {any} */{}; // initialize with something so it's never equal on first run

      (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_0__.render_effect)(() => {
        var value = get_value();

        // Action's update method is coarse-grained, i.e. when anything in the passed value changes, update.
        // This works in legacy mode because of mutable_source being updated as a whole, but when using $state
        // together with actions and mutation, it wouldn't notice the change without a deep read.
        (0,_runtime_js__WEBPACK_IMPORTED_MODULE_2__.deep_read_state)(value);
        if (inited && (0,_reactivity_equality_js__WEBPACK_IMPORTED_MODULE_1__.safe_not_equal)(prev, value)) {
          prev = value;
          /** @type {Function} */
          payload.update(value);
        }
      });
      inited = true;
    }
    if (payload?.destroy) {
      return () => /** @type {Function} */payload.destroy();
    }
  });
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/elements/attributes.js":
/*!********************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/elements/attributes.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   remove_input_defaults: () => (/* binding */ remove_input_defaults),
/* harmony export */   set_attribute: () => (/* binding */ set_attribute),
/* harmony export */   set_attributes: () => (/* binding */ set_attributes),
/* harmony export */   set_checked: () => (/* binding */ set_checked),
/* harmony export */   set_custom_element_data: () => (/* binding */ set_custom_element_data),
/* harmony export */   set_default_checked: () => (/* binding */ set_default_checked),
/* harmony export */   set_default_value: () => (/* binding */ set_default_value),
/* harmony export */   set_selected: () => (/* binding */ set_selected),
/* harmony export */   set_value: () => (/* binding */ set_value),
/* harmony export */   set_xlink_attribute: () => (/* binding */ set_xlink_attribute)
/* harmony export */ });
/* harmony import */ var esm_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! esm-env */ "../svelte/node_modules/.pnpm/esm-env@1.2.1/node_modules/esm-env/index.js");
/* harmony import */ var _hydration_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../hydration.js */ "../svelte/packages/svelte/src/internal/client/dom/hydration.js");
/* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../shared/utils.js */ "../svelte/packages/svelte/src/internal/shared/utils.js");
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./events.js */ "../svelte/packages/svelte/src/internal/client/dom/elements/events.js");
/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./misc.js */ "../svelte/packages/svelte/src/internal/client/dom/elements/misc.js");
/* harmony import */ var _warnings_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../warnings.js */ "../svelte/packages/svelte/src/internal/client/warnings.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../constants.js */ "../svelte/packages/svelte/src/internal/client/constants.js");
/* harmony import */ var _task_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../task.js */ "../svelte/packages/svelte/src/internal/client/dom/task.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../utils.js */ "../svelte/packages/svelte/src/utils.js");
/* harmony import */ var _runtime_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../runtime.js */ "../svelte/packages/svelte/src/internal/client/runtime.js");
/* harmony import */ var _shared_attributes_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../shared/attributes.js */ "../svelte/packages/svelte/src/internal/shared/attributes.js");












/**
 * The value/checked attribute in the template actually corresponds to the defaultValue property, so we need
 * to remove it upon hydration to avoid a bug when someone resets the form value.
 * @param {HTMLInputElement} input
 * @returns {void}
 */
function remove_input_defaults(input) {
  if (!_hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrating) return;
  var already_removed = false;

  // We try and remove the default attributes later, rather than sync during hydration.
  // Doing it sync during hydration has a negative impact on performance, but deferring the
  // work in an idle task alleviates this greatly. If a form reset event comes in before
  // the idle callback, then we ensure the input defaults are cleared just before.
  var remove_defaults = () => {
    if (already_removed) return;
    already_removed = true;

    // Remove the attributes but preserve the values
    if (input.hasAttribute('value')) {
      var value = input.value;
      set_attribute(input, 'value', null);
      input.value = value;
    }
    if (input.hasAttribute('checked')) {
      var checked = input.checked;
      set_attribute(input, 'checked', null);
      input.checked = checked;
    }
  };

  // @ts-expect-error
  input.__on_r = remove_defaults;
  (0,_task_js__WEBPACK_IMPORTED_MODULE_7__.queue_idle_task)(remove_defaults);
  (0,_misc_js__WEBPACK_IMPORTED_MODULE_4__.add_form_reset_listener)();
}

/**
 * @param {Element} element
 * @param {any} value
 */
function set_value(element, value) {
  // @ts-expect-error
  var attributes = element.__attributes ??= {};
  if (attributes.value === (attributes.value =
  // treat null and undefined the same for the initial value
  value ?? undefined) ||
  // @ts-expect-error
  // `progress` elements always need their value set when it's `0`
  element.value === value && (value !== 0 || element.nodeName !== 'PROGRESS')) {
    return;
  }

  // @ts-expect-error
  element.value = value ?? '';
}

/**
 * @param {Element} element
 * @param {boolean} checked
 */
function set_checked(element, checked) {
  // @ts-expect-error
  var attributes = element.__attributes ??= {};
  if (attributes.checked === (attributes.checked =
  // treat null and undefined the same for the initial value
  checked ?? undefined)) {
    return;
  }

  // @ts-expect-error
  element.checked = checked;
}

/**
 * Sets the `selected` attribute on an `option` element.
 * Not set through the property because that doesn't reflect to the DOM,
 * which means it wouldn't be taken into account when a form is reset.
 * @param {HTMLOptionElement} element
 * @param {boolean} selected
 */
function set_selected(element, selected) {
  if (selected) {
    // The selected option could've changed via user selection, and
    // setting the value without this check would set it back.
    if (!element.hasAttribute('selected')) {
      element.setAttribute('selected', '');
    }
  } else {
    element.removeAttribute('selected');
  }
}

/**
 * Applies the default checked property without influencing the current checked property.
 * @param {HTMLInputElement} element
 * @param {boolean} checked
 */
function set_default_checked(element, checked) {
  const existing_value = element.checked;
  element.defaultChecked = checked;
  element.checked = existing_value;
}

/**
 * Applies the default value property without influencing the current value property.
 * @param {HTMLInputElement | HTMLTextAreaElement} element
 * @param {string} value
 */
function set_default_value(element, value) {
  const existing_value = element.value;
  element.defaultValue = value;
  element.value = existing_value;
}

/**
 * @param {Element} element
 * @param {string} attribute
 * @param {string | null} value
 * @param {boolean} [skip_warning]
 */
function set_attribute(element, attribute, value, skip_warning) {
  // @ts-expect-error
  var attributes = element.__attributes ??= {};
  if (_hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrating) {
    attributes[attribute] = element.getAttribute(attribute);
    if (attribute === 'src' || attribute === 'srcset' || attribute === 'href' && element.nodeName === 'LINK') {
      if (!skip_warning) {
        check_src_in_dev_hydration(element, attribute, value ?? '');
      }

      // If we reset these attributes, they would result in another network request, which we want to avoid.
      // We assume they are the same between client and server as checking if they are equal is expensive
      // (we can't just compare the strings as they can be different between client and server but result in the
      // same url, so we would need to create hidden anchor elements to compare them)
      return;
    }
  }
  if (attributes[attribute] === (attributes[attribute] = value)) return;
  if (attribute === 'style' && '__styles' in element) {
    // reset styles to force style: directive to update
    element.__styles = {};
  }
  if (attribute === 'loading') {
    // @ts-expect-error
    element[_constants_js__WEBPACK_IMPORTED_MODULE_6__.LOADING_ATTR_SYMBOL] = value;
  }
  if (value == null) {
    element.removeAttribute(attribute);
  } else if (typeof value !== 'string' && get_setters(element).includes(attribute)) {
    // @ts-ignore
    element[attribute] = value;
  } else {
    element.setAttribute(attribute, value);
  }
}

/**
 * @param {Element} dom
 * @param {string} attribute
 * @param {string} value
 */
function set_xlink_attribute(dom, attribute, value) {
  dom.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);
}

/**
 * @param {HTMLElement} node
 * @param {string} prop
 * @param {any} value
 */
function set_custom_element_data(node, prop, value) {
  // We need to ensure that setting custom element props, which can
  // invoke lifecycle methods on other custom elements, does not also
  // associate those lifecycle methods with the current active reaction
  // or effect
  var previous_reaction = _runtime_js__WEBPACK_IMPORTED_MODULE_9__.active_reaction;
  var previous_effect = _runtime_js__WEBPACK_IMPORTED_MODULE_9__.active_effect;
  // If we're hydrating but the custom element is from Svelte, and it already scaffolded,
  // then it might run block logic in hydration mode, which we have to prevent.
  let was_hydrating = _hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrating;
  if (_hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrating) {
    (0,_hydration_js__WEBPACK_IMPORTED_MODULE_1__.set_hydrating)(false);
  }
  (0,_runtime_js__WEBPACK_IMPORTED_MODULE_9__.set_active_reaction)(null);
  (0,_runtime_js__WEBPACK_IMPORTED_MODULE_9__.set_active_effect)(null);
  try {
    if (
    // Don't compute setters for custom elements while they aren't registered yet,
    // because during their upgrade/instantiation they might add more setters.
    // Instead, fall back to a simple "an object, then set as property" heuristic.
    setters_cache.has(node.nodeName) ||
    // customElements may not be available in browser extension contexts
    !customElements || customElements.get(node.tagName.toLowerCase()) ? get_setters(node).includes(prop) : value && typeof value === 'object') {
      // @ts-expect-error
      node[prop] = value;
    } else {
      // We did getters etc checks already, stringify before passing to set_attribute
      // to ensure it doesn't invoke the same logic again, and potentially populating
      // the setters cache too early.
      set_attribute(node, prop, value == null ? value : String(value));
    }
  } finally {
    (0,_runtime_js__WEBPACK_IMPORTED_MODULE_9__.set_active_reaction)(previous_reaction);
    (0,_runtime_js__WEBPACK_IMPORTED_MODULE_9__.set_active_effect)(previous_effect);
    if (was_hydrating) {
      (0,_hydration_js__WEBPACK_IMPORTED_MODULE_1__.set_hydrating)(true);
    }
  }
}

/**
 * Spreads attributes onto a DOM element, taking into account the currently set attributes
 * @param {Element & ElementCSSInlineStyle} element
 * @param {Record<string, any> | undefined} prev
 * @param {Record<string, any>} next New attributes - this function mutates this object
 * @param {string} [css_hash]
 * @param {boolean} [preserve_attribute_case]
 * @param {boolean} [is_custom_element]
 * @param {boolean} [skip_warning]
 * @returns {Record<string, any>}
 */
function set_attributes(element, prev, next, css_hash, preserve_attribute_case = false, is_custom_element = false, skip_warning = false) {
  // If we're hydrating but the custom element is from Svelte, and it already scaffolded,
  // then it might run block logic in hydration mode, which we have to prevent.
  let is_hydrating_custom_element = _hydration_js__WEBPACK_IMPORTED_MODULE_1__.hydrating && is_custom_element;
  if (is_hydrating_custom_element) {
    (0,_hydration_js__WEBPACK_IMPORTED_MODULE_1__.set_hydrating)(false);
  }
  var current = prev || {};
  var is_option_element = element.tagName === 'OPTION';
  for (var key in prev) {
    if (!(key in next)) {
      next[key] = null;
    }
  }
  if (next.class) {
    next.class = (0,_shared_attributes_js__WEBPACK_IMPORTED_MODULE_10__.clsx)(next.class);
  }
  if (css_hash !== undefined) {
    next.class = next.class ? next.class + ' ' + css_hash : css_hash;
  }
  var setters = get_setters(element);

  // @ts-expect-error
  var attributes = /** @type {Record<string, unknown>} **/element.__attributes ??= {};

  // since key is captured we use const
  for (const key in next) {
    // let instead of var because referenced in a closure
    let value = next[key];

    // Up here because we want to do this for the initial value, too, even if it's undefined,
    // and this wouldn't be reached in case of undefined because of the equality check below
    if (is_option_element && key === 'value' && value == null) {
      // The <option> element is a special case because removing the value attribute means
      // the value is set to the text content of the option element, and setting the value
      // to null or undefined means the value is set to the string "null" or "undefined".
      // To align with how we handle this case in non-spread-scenarios, this logic is needed.
      // There's a super-edge-case bug here that is left in in favor of smaller code size:
      // Because of the "set missing props to null" logic above, we can't differentiate
      // between a missing value and an explicitly set value of null or undefined. That means
      // that once set, the value attribute of an <option> element can't be removed. This is
      // a very rare edge case, and removing the attribute altogether isn't possible either
      // for the <option value={undefined}> case, so we're not losing any functionality here.
      // @ts-ignore
      element.value = element.__value = '';
      current[key] = value;
      continue;
    }
    var prev_value = current[key];
    if (value === prev_value) continue;
    current[key] = value;
    var prefix = key[0] + key[1]; // this is faster than key.slice(0, 2)
    if (prefix === '$$') continue;
    if (prefix === 'on') {
      /** @type {{ capture?: true }} */
      const opts = {};
      const event_handle_key = '$$' + key;
      let event_name = key.slice(2);
      var delegated = (0,_utils_js__WEBPACK_IMPORTED_MODULE_8__.is_delegated)(event_name);
      if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_8__.is_capture_event)(event_name)) {
        event_name = event_name.slice(0, -7);
        opts.capture = true;
      }
      if (!delegated && prev_value) {
        // Listening to same event but different handler -> our handle function below takes care of this
        // If we were to remove and add listeners in this case, it could happen that the event is "swallowed"
        // (the browser seems to not know yet that a new one exists now) and doesn't reach the handler
        // https://github.com/sveltejs/svelte/issues/11903
        if (value != null) continue;
        element.removeEventListener(event_name, current[event_handle_key], opts);
        current[event_handle_key] = null;
      }
      if (value != null) {
        if (!delegated) {
          /**
           * @this {any}
           * @param {Event} evt
           */
          function handle(evt) {
            current[key].call(this, evt);
          }
          current[event_handle_key] = (0,_events_js__WEBPACK_IMPORTED_MODULE_3__.create_event)(event_name, element, handle, opts);
        } else {
          // @ts-ignore
          element[`__${event_name}`] = value;
          (0,_events_js__WEBPACK_IMPORTED_MODULE_3__.delegate)([event_name]);
        }
      } else if (delegated) {
        // @ts-ignore
        element[`__${event_name}`] = undefined;
      }
    } else if (key === 'style' && value != null) {
      element.style.cssText = value + '';
    } else if (key === 'autofocus') {
      (0,_misc_js__WEBPACK_IMPORTED_MODULE_4__.autofocus)(/** @type {HTMLElement} */element, Boolean(value));
    } else if (!is_custom_element && (key === '__value' || key === 'value' && value != null)) {
      // @ts-ignore We're not running this for custom elements because __value is actually
      // how Lit stores the current value on the element, and messing with that would break things.
      element.value = element.__value = value;
    } else if (key === 'selected' && is_option_element) {
      set_selected(/** @type {HTMLOptionElement} */element, value);
    } else {
      var name = key;
      if (!preserve_attribute_case) {
        name = (0,_utils_js__WEBPACK_IMPORTED_MODULE_8__.normalize_attribute)(name);
      }
      var is_default = name === 'defaultValue' || name === 'defaultChecked';
      if (value == null && !is_custom_element && !is_default) {
        attributes[key] = null;
        if (name === 'value' || name === 'checked') {
          // removing value/checked also removes defaultValue/defaultChecked — preserve
          let input = /** @type {HTMLInputElement} */element;
          const use_default = prev === undefined;
          if (name === 'value') {
            let previous = input.defaultValue;
            input.removeAttribute(name);
            input.defaultValue = previous;
            // @ts-ignore
            input.value = input.__value = use_default ? previous : null;
          } else {
            let previous = input.defaultChecked;
            input.removeAttribute(name);
            input.defaultChecked = previous;
            input.checked = use_default ? previous : false;
          }
        } else {
          element.removeAttribute(key);
        }
      } else if (is_default || setters.includes(name) && (is_custom_element || typeof value !== 'string')) {
        // @ts-ignore
        element[name] = value;
      } else if (typeof value !== 'function') {
        set_attribute(element, name, value);
      }
    }
    if (key === 'style' && '__styles' in element) {
      // reset styles to force style: directive to update
      element.__styles = {};
    }
  }
  if (is_hydrating_custom_element) {
    (0,_hydration_js__WEBPACK_IMPORTED_MODULE_1__.set_hydrating)(true);
  }
  return current;
}

/** @type {Map<string, string[]>} */
var setters_cache = new Map();

/** @param {Element} element */
function get_setters(element) {
  var setters = setters_cache.get(element.nodeName);
  if (setters) return setters;
  setters_cache.set(element.nodeName, setters = []);
  var descriptors;
  var proto = element; // In the case of custom elements there might be setters on the instance
  var element_proto = Element.prototype;

  // Stop at Element, from there on there's only unnecessary setters we're not interested in
  // Do not use contructor.name here as that's unreliable in some browser environments
  while (element_proto !== proto) {
    descriptors = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.get_descriptors)(proto);
    for (var key in descriptors) {
      if (descriptors[key].set) {
        setters.push(key);
      }
    }
    proto = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.get_prototype_of)(proto);
  }
  return setters;
}

/**
 * @param {any} element
 * @param {string} attribute
 * @param {string} value
 */
function check_src_in_dev_hydration(element, attribute, value) {
  if (!esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) return;
  if (attribute === 'srcset' && srcset_url_equal(element, value)) return;
  if (src_url_equal(element.getAttribute(attribute) ?? '', value)) return;
  _warnings_js__WEBPACK_IMPORTED_MODULE_5__.hydration_attribute_changed(attribute, element.outerHTML.replace(element.innerHTML, element.innerHTML && '...'), String(value));
}

/**
 * @param {string} element_src
 * @param {string} url
 * @returns {boolean}
 */
function src_url_equal(element_src, url) {
  if (element_src === url) return true;
  return new URL(element_src, document.baseURI).href === new URL(url, document.baseURI).href;
}

/** @param {string} srcset */
function split_srcset(srcset) {
  return srcset.split(',').map(src => src.trim().split(' ').filter(Boolean));
}

/**
 * @param {HTMLSourceElement | HTMLImageElement} element
 * @param {string} srcset
 * @returns {boolean}
 */
function srcset_url_equal(element, srcset) {
  var element_urls = split_srcset(element.srcset);
  var urls = split_srcset(srcset);
  return urls.length === element_urls.length && urls.every(([url, width], i) => width === element_urls[i][1] && (
  // We need to test both ways because Vite will create an a full URL with
  // `new URL(asset, import.meta.url).href` for the client when `base: './'`, and the
  // relative URLs inside srcset are not automatically resolved to absolute URLs by
  // browsers (in contrast to img.src). This means both SSR and DOM code could
  // contain relative or absolute URLs.
  src_url_equal(element_urls[i][0], url) || src_url_equal(url, element_urls[i][0])));
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/elements/bindings/document.js":
/*!***************************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/elements/bindings/document.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   bind_active_element: () => (/* binding */ bind_active_element)
/* harmony export */ });
/* harmony import */ var _shared_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shared.js */ "../svelte/packages/svelte/src/internal/client/dom/elements/bindings/shared.js");


/**
 * @param {(activeElement: Element | null) => void} update
 * @returns {void}
 */
function bind_active_element(update) {
  (0,_shared_js__WEBPACK_IMPORTED_MODULE_0__.listen)(document, ['focusin', 'focusout'], event => {
    if (event && event.type === 'focusout' && /** @type {FocusEvent} */event.relatedTarget) {
      // The tests still pass if we remove this, because of JSDOM limitations, but it is necessary
      // to avoid temporarily resetting to `document.body`
      return;
    }
    update(document.activeElement);
  });
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/elements/bindings/input.js":
/*!************************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/elements/bindings/input.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   bind_checked: () => (/* binding */ bind_checked),
/* harmony export */   bind_files: () => (/* binding */ bind_files),
/* harmony export */   bind_group: () => (/* binding */ bind_group),
/* harmony export */   bind_value: () => (/* binding */ bind_value)
/* harmony export */ });
/* harmony import */ var esm_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! esm-env */ "../svelte/node_modules/.pnpm/esm-env@1.2.1/node_modules/esm-env/index.js");
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _shared_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shared.js */ "../svelte/packages/svelte/src/internal/client/dom/elements/bindings/shared.js");
/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../errors.js */ "../svelte/packages/svelte/src/internal/client/errors.js");
/* harmony import */ var _proxy_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../proxy.js */ "../svelte/packages/svelte/src/internal/client/proxy.js");
/* harmony import */ var _task_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../task.js */ "../svelte/packages/svelte/src/internal/client/dom/task.js");
/* harmony import */ var _hydration_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../hydration.js */ "../svelte/packages/svelte/src/internal/client/dom/hydration.js");
/* harmony import */ var _runtime_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../runtime.js */ "../svelte/packages/svelte/src/internal/client/runtime.js");
/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../context.js */ "../svelte/packages/svelte/src/internal/client/context.js");










/**
 * @param {HTMLInputElement} input
 * @param {() => unknown} get
 * @param {(value: unknown) => void} set
 * @returns {void}
 */
function bind_value(input, get, set = get) {
  var runes = (0,_context_js__WEBPACK_IMPORTED_MODULE_8__.is_runes)();
  (0,_shared_js__WEBPACK_IMPORTED_MODULE_2__.listen_to_event_and_reset_event)(input, 'input', is_reset => {
    if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV && input.type === 'checkbox') {
      // TODO should this happen in prod too?
      _errors_js__WEBPACK_IMPORTED_MODULE_3__.bind_invalid_checkbox_value();
    }

    /** @type {any} */
    var value = is_reset ? input.defaultValue : input.value;
    value = is_numberlike_input(input) ? to_number(value) : value;
    set(value);

    // In runes mode, respect any validation in accessors (doesn't apply in legacy mode,
    // because we use mutable state which ensures the render effect always runs)
    if (runes && value !== (value = get())) {
      var start = input.selectionStart;
      var end = input.selectionEnd;

      // the value is coerced on assignment
      input.value = value ?? '';

      // Restore selection
      if (end !== null) {
        input.selectionStart = start;
        input.selectionEnd = Math.min(end, input.value.length);
      }
    }
  });
  if (
  // If we are hydrating and the value has since changed,
  // then use the updated value from the input instead.
  _hydration_js__WEBPACK_IMPORTED_MODULE_6__.hydrating && input.defaultValue !== input.value ||
  // If defaultValue is set, then value == defaultValue
  // TODO Svelte 6: remove input.value check and set to empty string?
  (0,_runtime_js__WEBPACK_IMPORTED_MODULE_7__.untrack)(get) == null && input.value) {
    set(is_numberlike_input(input) ? to_number(input.value) : input.value);
  }
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.render_effect)(() => {
    if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV && input.type === 'checkbox') {
      // TODO should this happen in prod too?
      _errors_js__WEBPACK_IMPORTED_MODULE_3__.bind_invalid_checkbox_value();
    }
    var value = get();
    if (is_numberlike_input(input) && value === to_number(input.value)) {
      // handles 0 vs 00 case (see https://github.com/sveltejs/svelte/issues/9959)
      return;
    }
    if (input.type === 'date' && !value && !input.value) {
      // Handles the case where a temporarily invalid date is set (while typing, for example with a leading 0 for the day)
      // and prevents this state from clearing the other parts of the date input (see https://github.com/sveltejs/svelte/issues/7897)
      return;
    }

    // don't set the value of the input if it's the same to allow
    // minlength to work properly
    if (value !== input.value) {
      // @ts-expect-error the value is coerced on assignment
      input.value = value ?? '';
    }
  });
}

/** @type {Set<HTMLInputElement[]>} */
const pending = new Set();

/**
 * @param {HTMLInputElement[]} inputs
 * @param {null | [number]} group_index
 * @param {HTMLInputElement} input
 * @param {() => unknown} get
 * @param {(value: unknown) => void} set
 * @returns {void}
 */
function bind_group(inputs, group_index, input, get, set = get) {
  var is_checkbox = input.getAttribute('type') === 'checkbox';
  var binding_group = inputs;

  // needs to be let or related code isn't treeshaken out if it's always false
  let hydration_mismatch = false;
  if (group_index !== null) {
    for (var index of group_index) {
      // @ts-expect-error
      binding_group = binding_group[index] ??= [];
    }
  }
  binding_group.push(input);
  (0,_shared_js__WEBPACK_IMPORTED_MODULE_2__.listen_to_event_and_reset_event)(input, 'change', () => {
    // @ts-ignore
    var value = input.__value;
    if (is_checkbox) {
      value = get_binding_group_value(binding_group, value, input.checked);
    }
    set(value);
  },
  // TODO better default value handling
  () => set(is_checkbox ? [] : null));
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.render_effect)(() => {
    var value = get();

    // If we are hydrating and the value has since changed, then use the update value
    // from the input instead.
    if (_hydration_js__WEBPACK_IMPORTED_MODULE_6__.hydrating && input.defaultChecked !== input.checked) {
      hydration_mismatch = true;
      return;
    }
    if (is_checkbox) {
      value = value || [];
      // @ts-ignore
      input.checked = value.includes(input.__value);
    } else {
      // @ts-ignore
      input.checked = (0,_proxy_js__WEBPACK_IMPORTED_MODULE_4__.is)(input.__value, value);
    }
  });
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.teardown)(() => {
    var index = binding_group.indexOf(input);
    if (index !== -1) {
      binding_group.splice(index, 1);
    }
  });
  if (!pending.has(binding_group)) {
    pending.add(binding_group);
    (0,_task_js__WEBPACK_IMPORTED_MODULE_5__.queue_micro_task)(() => {
      // necessary to maintain binding group order in all insertion scenarios
      binding_group.sort((a, b) => a.compareDocumentPosition(b) === 4 ? -1 : 1);
      pending.delete(binding_group);
    });
  }
  (0,_task_js__WEBPACK_IMPORTED_MODULE_5__.queue_micro_task)(() => {
    if (hydration_mismatch) {
      var value;
      if (is_checkbox) {
        value = get_binding_group_value(binding_group, value, input.checked);
      } else {
        var hydration_input = binding_group.find(input => input.checked);
        // @ts-ignore
        value = hydration_input?.__value;
      }
      set(value);
    }
  });
}

/**
 * @param {HTMLInputElement} input
 * @param {() => unknown} get
 * @param {(value: unknown) => void} set
 * @returns {void}
 */
function bind_checked(input, get, set = get) {
  (0,_shared_js__WEBPACK_IMPORTED_MODULE_2__.listen_to_event_and_reset_event)(input, 'change', is_reset => {
    var value = is_reset ? input.defaultChecked : input.checked;
    set(value);
  });
  if (
  // If we are hydrating and the value has since changed,
  // then use the update value from the input instead.
  _hydration_js__WEBPACK_IMPORTED_MODULE_6__.hydrating && input.defaultChecked !== input.checked ||
  // If defaultChecked is set, then checked == defaultChecked
  (0,_runtime_js__WEBPACK_IMPORTED_MODULE_7__.untrack)(get) == null) {
    set(input.checked);
  }
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.render_effect)(() => {
    var value = get();
    input.checked = Boolean(value);
  });
}

/**
 * @template V
 * @param {Array<HTMLInputElement>} group
 * @param {V} __value
 * @param {boolean} checked
 * @returns {V[]}
 */
function get_binding_group_value(group, __value, checked) {
  var value = new Set();
  for (var i = 0; i < group.length; i += 1) {
    if (group[i].checked) {
      // @ts-ignore
      value.add(group[i].__value);
    }
  }
  if (!checked) {
    value.delete(__value);
  }
  return Array.from(value);
}

/**
 * @param {HTMLInputElement} input
 */
function is_numberlike_input(input) {
  var type = input.type;
  return type === 'number' || type === 'range';
}

/**
 * @param {string} value
 */
function to_number(value) {
  return value === '' ? null : +value;
}

/**
 * @param {HTMLInputElement} input
 * @param {() => FileList | null} get
 * @param {(value: FileList | null) => void} set
 */
function bind_files(input, get, set = get) {
  (0,_shared_js__WEBPACK_IMPORTED_MODULE_2__.listen_to_event_and_reset_event)(input, 'change', () => {
    set(input.files);
  });
  if (
  // If we are hydrating and the value has since changed,
  // then use the updated value from the input instead.
  _hydration_js__WEBPACK_IMPORTED_MODULE_6__.hydrating && input.files) {
    set(input.files);
  }
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.render_effect)(() => {
    input.files = get();
  });
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/elements/bindings/media.js":
/*!************************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/elements/bindings/media.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   bind_buffered: () => (/* binding */ bind_buffered),
/* harmony export */   bind_current_time: () => (/* binding */ bind_current_time),
/* harmony export */   bind_ended: () => (/* binding */ bind_ended),
/* harmony export */   bind_muted: () => (/* binding */ bind_muted),
/* harmony export */   bind_paused: () => (/* binding */ bind_paused),
/* harmony export */   bind_playback_rate: () => (/* binding */ bind_playback_rate),
/* harmony export */   bind_played: () => (/* binding */ bind_played),
/* harmony export */   bind_ready_state: () => (/* binding */ bind_ready_state),
/* harmony export */   bind_seekable: () => (/* binding */ bind_seekable),
/* harmony export */   bind_seeking: () => (/* binding */ bind_seeking),
/* harmony export */   bind_volume: () => (/* binding */ bind_volume)
/* harmony export */ });
/* harmony import */ var _hydration_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../hydration.js */ "../svelte/packages/svelte/src/internal/client/dom/hydration.js");
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _shared_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shared.js */ "../svelte/packages/svelte/src/internal/client/dom/elements/bindings/shared.js");




/** @param {TimeRanges} ranges */
function time_ranges_to_array(ranges) {
  var array = [];
  for (var i = 0; i < ranges.length; i += 1) {
    array.push({
      start: ranges.start(i),
      end: ranges.end(i)
    });
  }
  return array;
}

/**
 * @param {HTMLVideoElement | HTMLAudioElement} media
 * @param {() => number | undefined} get
 * @param {(value: number) => void} set
 * @returns {void}
 */
function bind_current_time(media, get, set = get) {
  /** @type {number} */
  var raf_id;
  /** @type {number} */
  var value;

  // Ideally, listening to timeupdate would be enough, but it fires too infrequently for the currentTime
  // binding, which is why we use a raf loop, too. We additionally still listen to timeupdate because
  // the user could be scrubbing through the video using the native controls when the media is paused.
  var callback = () => {
    cancelAnimationFrame(raf_id);
    if (!media.paused) {
      raf_id = requestAnimationFrame(callback);
    }
    var next_value = media.currentTime;
    if (value !== next_value) {
      set(value = next_value);
    }
  };
  raf_id = requestAnimationFrame(callback);
  media.addEventListener('timeupdate', callback);
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.render_effect)(() => {
    var next_value = Number(get());
    if (value !== next_value && !isNaN(/** @type {any} */next_value)) {
      media.currentTime = value = next_value;
    }
  });
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.teardown)(() => {
    cancelAnimationFrame(raf_id);
    media.removeEventListener('timeupdate', callback);
  });
}

/**
 * @param {HTMLVideoElement | HTMLAudioElement} media
 * @param {(array: Array<{ start: number; end: number }>) => void} set
 */
function bind_buffered(media, set) {
  (0,_shared_js__WEBPACK_IMPORTED_MODULE_2__.listen)(media, ['loadedmetadata', 'progress'], () => set(time_ranges_to_array(media.buffered)));
}

/**
 * @param {HTMLVideoElement | HTMLAudioElement} media
 * @param {(array: Array<{ start: number; end: number }>) => void} set
 */
function bind_seekable(media, set) {
  (0,_shared_js__WEBPACK_IMPORTED_MODULE_2__.listen)(media, ['loadedmetadata'], () => set(time_ranges_to_array(media.seekable)));
}

/**
 * @param {HTMLVideoElement | HTMLAudioElement} media
 * @param {(array: Array<{ start: number; end: number }>) => void} set
 */
function bind_played(media, set) {
  (0,_shared_js__WEBPACK_IMPORTED_MODULE_2__.listen)(media, ['timeupdate'], () => set(time_ranges_to_array(media.played)));
}

/**
 * @param {HTMLVideoElement | HTMLAudioElement} media
 * @param {(seeking: boolean) => void} set
 */
function bind_seeking(media, set) {
  (0,_shared_js__WEBPACK_IMPORTED_MODULE_2__.listen)(media, ['seeking', 'seeked'], () => set(media.seeking));
}

/**
 * @param {HTMLVideoElement | HTMLAudioElement} media
 * @param {(seeking: boolean) => void} set
 */
function bind_ended(media, set) {
  (0,_shared_js__WEBPACK_IMPORTED_MODULE_2__.listen)(media, ['timeupdate', 'ended'], () => set(media.ended));
}

/**
 * @param {HTMLVideoElement | HTMLAudioElement} media
 * @param {(ready_state: number) => void} set
 */
function bind_ready_state(media, set) {
  (0,_shared_js__WEBPACK_IMPORTED_MODULE_2__.listen)(media, ['loadedmetadata', 'loadeddata', 'canplay', 'canplaythrough', 'playing', 'waiting', 'emptied'], () => set(media.readyState));
}

/**
 * @param {HTMLVideoElement | HTMLAudioElement} media
 * @param {() => number | undefined} get
 * @param {(playback_rate: number) => void} set
 */
function bind_playback_rate(media, get, set = get) {
  // Needs to happen after element is inserted into the dom (which is guaranteed by using effect),
  // else playback will be set back to 1 by the browser
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.effect)(() => {
    var value = Number(get());
    if (value !== media.playbackRate && !isNaN(value)) {
      media.playbackRate = value;
    }
  });

  // Start listening to ratechange events after the element is inserted into the dom,
  // else playback will be set to 1 by the browser
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.effect)(() => {
    (0,_shared_js__WEBPACK_IMPORTED_MODULE_2__.listen)(media, ['ratechange'], () => {
      set(media.playbackRate);
    });
  });
}

/**
 * @param {HTMLVideoElement | HTMLAudioElement} media
 * @param {() => boolean | undefined} get
 * @param {(paused: boolean) => void} set
 */
function bind_paused(media, get, set = get) {
  var paused = get();
  var update = () => {
    if (paused !== media.paused) {
      set(paused = media.paused);
    }
  };

  // If someone switches the src while media is playing, the player will pause.
  // Listen to the canplay event to get notified of this situation.
  (0,_shared_js__WEBPACK_IMPORTED_MODULE_2__.listen)(media, ['play', 'pause', 'canplay'], update, paused == null);

  // Needs to be an effect to ensure media element is mounted: else, if paused is `false` (i.e. should play right away)
  // a "The play() request was interrupted by a new load request" error would be thrown because the resource isn't loaded yet.
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.effect)(() => {
    if ((paused = !!get()) !== media.paused) {
      if (paused) {
        media.pause();
      } else {
        media.play().catch(() => {
          set(paused = true);
        });
      }
    }
  });
}

/**
 * @param {HTMLVideoElement | HTMLAudioElement} media
 * @param {() => number | undefined} get
 * @param {(volume: number) => void} set
 */
function bind_volume(media, get, set = get) {
  var callback = () => {
    set(media.volume);
  };
  if (get() == null) {
    callback();
  }
  (0,_shared_js__WEBPACK_IMPORTED_MODULE_2__.listen)(media, ['volumechange'], callback, false);
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.render_effect)(() => {
    var value = Number(get());
    if (value !== media.volume && !isNaN(value)) {
      media.volume = value;
    }
  });
}

/**
 * @param {HTMLVideoElement | HTMLAudioElement} media
 * @param {() => boolean | undefined} get
 * @param {(muted: boolean) => void} set
 */
function bind_muted(media, get, set = get) {
  var callback = () => {
    set(media.muted);
  };
  if (get() == null) {
    callback();
  }
  (0,_shared_js__WEBPACK_IMPORTED_MODULE_2__.listen)(media, ['volumechange'], callback, false);
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.render_effect)(() => {
    var value = !!get();
    if (media.muted !== value) media.muted = value;
  });
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/elements/bindings/navigator.js":
/*!****************************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/elements/bindings/navigator.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   bind_online: () => (/* binding */ bind_online)
/* harmony export */ });
/* harmony import */ var _shared_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shared.js */ "../svelte/packages/svelte/src/internal/client/dom/elements/bindings/shared.js");


/**
 * @param {(online: boolean) => void} update
 * @returns {void}
 */
function bind_online(update) {
  (0,_shared_js__WEBPACK_IMPORTED_MODULE_0__.listen)(window, ['online', 'offline'], () => {
    update(navigator.onLine);
  });
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/elements/bindings/props.js":
/*!************************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/elements/bindings/props.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   bind_prop: () => (/* binding */ bind_prop)
/* harmony export */ });
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../shared/utils.js */ "../svelte/packages/svelte/src/internal/shared/utils.js");



/**
 * Makes an `export`ed (non-prop) variable available on the `$$props` object
 * so that consumers can do `bind:x` on the component.
 * @template V
 * @param {Record<string, unknown>} props
 * @param {string} prop
 * @param {V} value
 * @returns {void}
 */
function bind_prop(props, prop, value) {
  var desc = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_1__.get_descriptor)(props, prop);
  if (desc && desc.set) {
    props[prop] = value;
    (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_0__.teardown)(() => {
      props[prop] = null;
    });
  }
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/elements/bindings/select.js":
/*!*************************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/elements/bindings/select.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   bind_select_value: () => (/* binding */ bind_select_value),
/* harmony export */   init_select: () => (/* binding */ init_select),
/* harmony export */   select_option: () => (/* binding */ select_option)
/* harmony export */ });
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _shared_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shared.js */ "../svelte/packages/svelte/src/internal/client/dom/elements/bindings/shared.js");
/* harmony import */ var _runtime_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../runtime.js */ "../svelte/packages/svelte/src/internal/client/runtime.js");
/* harmony import */ var _proxy_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../proxy.js */ "../svelte/packages/svelte/src/internal/client/proxy.js");





/**
 * Selects the correct option(s) (depending on whether this is a multiple select)
 * @template V
 * @param {HTMLSelectElement} select
 * @param {V} value
 * @param {boolean} [mounting]
 */
function select_option(select, value, mounting) {
  if (select.multiple) {
    return select_options(select, value);
  }
  for (var option of select.options) {
    var option_value = get_option_value(option);
    if ((0,_proxy_js__WEBPACK_IMPORTED_MODULE_3__.is)(option_value, value)) {
      option.selected = true;
      return;
    }
  }
  if (!mounting || value !== undefined) {
    select.selectedIndex = -1; // no option should be selected
  }
}

/**
 * Selects the correct option(s) if `value` is given,
 * and then sets up a mutation observer to sync the
 * current selection to the dom when it changes. Such
 * changes could for example occur when options are
 * inside an `#each` block.
 * @template V
 * @param {HTMLSelectElement} select
 * @param {() => V} [get_value]
 */
function init_select(select, get_value) {
  let mounting = true;
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_0__.effect)(() => {
    if (get_value) {
      select_option(select, (0,_runtime_js__WEBPACK_IMPORTED_MODULE_2__.untrack)(get_value), mounting);
    }
    mounting = false;
    var observer = new MutationObserver(() => {
      // @ts-ignore
      var value = select.__value;
      select_option(select, value);
      // Deliberately don't update the potential binding value,
      // the model should be preserved unless explicitly changed
    });
    observer.observe(select, {
      // Listen to option element changes
      childList: true,
      subtree: true,
      // because of <optgroup>
      // Listen to option element value attribute changes
      // (doesn't get notified of select value changes,
      // because that property is not reflected as an attribute)
      attributes: true,
      attributeFilter: ['value']
    });
    return () => {
      observer.disconnect();
    };
  });
}

/**
 * @param {HTMLSelectElement} select
 * @param {() => unknown} get
 * @param {(value: unknown) => void} set
 * @returns {void}
 */
function bind_select_value(select, get, set = get) {
  var mounting = true;
  (0,_shared_js__WEBPACK_IMPORTED_MODULE_1__.listen_to_event_and_reset_event)(select, 'change', is_reset => {
    var query = is_reset ? '[selected]' : ':checked';
    /** @type {unknown} */
    var value;
    if (select.multiple) {
      value = [].map.call(select.querySelectorAll(query), get_option_value);
    } else {
      /** @type {HTMLOptionElement | null} */
      var selected_option = select.querySelector(query) ??
      // will fall back to first non-disabled option if no option is selected
      select.querySelector('option:not([disabled])');
      value = selected_option && get_option_value(selected_option);
    }
    set(value);
  });

  // Needs to be an effect, not a render_effect, so that in case of each loops the logic runs after the each block has updated
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_0__.effect)(() => {
    var value = get();
    select_option(select, value, mounting);

    // Mounting and value undefined -> take selection from dom
    if (mounting && value === undefined) {
      /** @type {HTMLOptionElement | null} */
      var selected_option = select.querySelector(':checked');
      if (selected_option !== null) {
        value = get_option_value(selected_option);
        set(value);
      }
    }

    // @ts-ignore
    select.__value = value;
    mounting = false;
  });

  // don't pass get_value, we already initialize it in the effect above
  init_select(select);
}

/**
 * @template V
 * @param {HTMLSelectElement} select
 * @param {V} value
 */
function select_options(select, value) {
  for (var option of select.options) {
    // @ts-ignore
    option.selected = ~value.indexOf(get_option_value(option));
  }
}

/** @param {HTMLOptionElement} option */
function get_option_value(option) {
  // __value only exists if the <option> has a value attribute
  if ('__value' in option) {
    return option.__value;
  } else {
    return option.value;
  }
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/elements/bindings/shared.js":
/*!*************************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/elements/bindings/shared.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   listen: () => (/* binding */ listen),
/* harmony export */   listen_to_event_and_reset_event: () => (/* binding */ listen_to_event_and_reset_event),
/* harmony export */   without_reactive_context: () => (/* binding */ without_reactive_context)
/* harmony export */ });
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _runtime_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../runtime.js */ "../svelte/packages/svelte/src/internal/client/runtime.js");
/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../misc.js */ "../svelte/packages/svelte/src/internal/client/dom/elements/misc.js");




/**
 * Fires the handler once immediately (unless corresponding arg is set to `false`),
 * then listens to the given events until the render effect context is destroyed
 * @param {EventTarget} target
 * @param {Array<string>} events
 * @param {(event?: Event) => void} handler
 * @param {any} call_handler_immediately
 */
function listen(target, events, handler, call_handler_immediately = true) {
  if (call_handler_immediately) {
    handler();
  }
  for (var name of events) {
    target.addEventListener(name, handler);
  }
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_0__.teardown)(() => {
    for (var name of events) {
      target.removeEventListener(name, handler);
    }
  });
}

/**
 * @template T
 * @param {() => T} fn
 */
function without_reactive_context(fn) {
  var previous_reaction = _runtime_js__WEBPACK_IMPORTED_MODULE_1__.active_reaction;
  var previous_effect = _runtime_js__WEBPACK_IMPORTED_MODULE_1__.active_effect;
  (0,_runtime_js__WEBPACK_IMPORTED_MODULE_1__.set_active_reaction)(null);
  (0,_runtime_js__WEBPACK_IMPORTED_MODULE_1__.set_active_effect)(null);
  try {
    return fn();
  } finally {
    (0,_runtime_js__WEBPACK_IMPORTED_MODULE_1__.set_active_reaction)(previous_reaction);
    (0,_runtime_js__WEBPACK_IMPORTED_MODULE_1__.set_active_effect)(previous_effect);
  }
}

/**
 * Listen to the given event, and then instantiate a global form reset listener if not already done,
 * to notify all bindings when the form is reset
 * @param {HTMLElement} element
 * @param {string} event
 * @param {(is_reset?: true) => void} handler
 * @param {(is_reset?: true) => void} [on_reset]
 */
function listen_to_event_and_reset_event(element, event, handler, on_reset = handler) {
  element.addEventListener(event, () => without_reactive_context(handler));
  // @ts-expect-error
  const prev = element.__on_r;
  if (prev) {
    // special case for checkbox that can have multiple binds (group & checked)
    // @ts-expect-error
    element.__on_r = () => {
      prev();
      on_reset(true);
    };
  } else {
    // @ts-expect-error
    element.__on_r = () => on_reset(true);
  }
  (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.add_form_reset_listener)();
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/elements/bindings/size.js":
/*!***********************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/elements/bindings/size.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   bind_element_size: () => (/* binding */ bind_element_size),
/* harmony export */   bind_resize_observer: () => (/* binding */ bind_resize_observer)
/* harmony export */ });
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _runtime_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../runtime.js */ "../svelte/packages/svelte/src/internal/client/runtime.js");



/**
 * Resize observer singleton.
 * One listener per element only!
 * https://groups.google.com/a/chromium.org/g/blink-dev/c/z6ienONUb5A/m/F5-VcUZtBAAJ
 */
class ResizeObserverSingleton {
  /** */
  #listeners = new WeakMap();

  /** @type {ResizeObserver | undefined} */
  #observer;

  /** @type {ResizeObserverOptions} */
  #options;

  /** @static */
  static entries = new WeakMap();

  /** @param {ResizeObserverOptions} options */
  constructor(options) {
    this.#options = options;
  }

  /**
   * @param {Element} element
   * @param {(entry: ResizeObserverEntry) => any} listener
   */
  observe(element, listener) {
    var listeners = this.#listeners.get(element) || new Set();
    listeners.add(listener);
    this.#listeners.set(element, listeners);
    this.#getObserver().observe(element, this.#options);
    return () => {
      var listeners = this.#listeners.get(element);
      listeners.delete(listener);
      if (listeners.size === 0) {
        this.#listeners.delete(element);
        /** @type {ResizeObserver} */
        this.#observer.unobserve(element);
      }
    };
  }
  #getObserver() {
    return this.#observer ?? (this.#observer = new ResizeObserver(/** @param {any} entries */entries => {
      for (var entry of entries) {
        ResizeObserverSingleton.entries.set(entry.target, entry);
        for (var listener of this.#listeners.get(entry.target) || []) {
          listener(entry);
        }
      }
    }));
  }
}
var resize_observer_content_box = /* @__PURE__ */new ResizeObserverSingleton({
  box: 'content-box'
});
var resize_observer_border_box = /* @__PURE__ */new ResizeObserverSingleton({
  box: 'border-box'
});
var resize_observer_device_pixel_content_box = /* @__PURE__ */new ResizeObserverSingleton({
  box: 'device-pixel-content-box'
});

/**
 * @param {Element} element
 * @param {'contentRect' | 'contentBoxSize' | 'borderBoxSize' | 'devicePixelContentBoxSize'} type
 * @param {(entry: keyof ResizeObserverEntry) => void} set
 */
function bind_resize_observer(element, type, set) {
  var observer = type === 'contentRect' || type === 'contentBoxSize' ? resize_observer_content_box : type === 'borderBoxSize' ? resize_observer_border_box : resize_observer_device_pixel_content_box;
  var unsub = observer.observe(element, /** @param {any} entry */entry => set(entry[type]));
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_0__.teardown)(unsub);
}

/**
 * @param {HTMLElement} element
 * @param {'clientWidth' | 'clientHeight' | 'offsetWidth' | 'offsetHeight'} type
 * @param {(size: number) => void} set
 */
function bind_element_size(element, type, set) {
  var unsub = resize_observer_border_box.observe(element, () => set(element[type]));
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_0__.effect)(() => {
    // The update could contain reads which should be ignored
    (0,_runtime_js__WEBPACK_IMPORTED_MODULE_1__.untrack)(() => set(element[type]));
    return unsub;
  });
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/elements/bindings/this.js":
/*!***********************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/elements/bindings/this.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   bind_this: () => (/* binding */ bind_this)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../constants.js */ "../svelte/packages/svelte/src/internal/client/constants.js");
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _runtime_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../runtime.js */ "../svelte/packages/svelte/src/internal/client/runtime.js");
/* harmony import */ var _task_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../task.js */ "../svelte/packages/svelte/src/internal/client/dom/task.js");





/**
 * @param {any} bound_value
 * @param {Element} element_or_component
 * @returns {boolean}
 */
function is_bound_this(bound_value, element_or_component) {
  return bound_value === element_or_component || bound_value?.[_constants_js__WEBPACK_IMPORTED_MODULE_0__.STATE_SYMBOL] === element_or_component;
}

/**
 * @param {any} element_or_component
 * @param {(value: unknown, ...parts: unknown[]) => void} update
 * @param {(...parts: unknown[]) => unknown} get_value
 * @param {() => unknown[]} [get_parts] Set if the this binding is used inside an each block,
 * 										returns all the parts of the each block context that are used in the expression
 * @returns {void}
 */
function bind_this(element_or_component = {}, update, get_value, get_parts) {
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.effect)(() => {
    /** @type {unknown[]} */
    var old_parts;

    /** @type {unknown[]} */
    var parts;
    (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.render_effect)(() => {
      old_parts = parts;
      // We only track changes to the parts, not the value itself to avoid unnecessary reruns.
      parts = get_parts?.() || [];
      (0,_runtime_js__WEBPACK_IMPORTED_MODULE_2__.untrack)(() => {
        if (element_or_component !== get_value(...parts)) {
          update(element_or_component, ...parts);
          // If this is an effect rerun (cause: each block context changes), then nullfiy the binding at
          // the previous position if it isn't already taken over by a different effect.
          if (old_parts && is_bound_this(get_value(...old_parts), element_or_component)) {
            update(null, ...old_parts);
          }
        }
      });
    });
    return () => {
      // We cannot use effects in the teardown phase, we we use a microtask instead.
      (0,_task_js__WEBPACK_IMPORTED_MODULE_3__.queue_micro_task)(() => {
        if (parts && is_bound_this(get_value(...parts), element_or_component)) {
          update(null, ...parts);
        }
      });
    };
  });
  return element_or_component;
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/elements/bindings/universal.js":
/*!****************************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/elements/bindings/universal.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   bind_content_editable: () => (/* binding */ bind_content_editable),
/* harmony export */   bind_focused: () => (/* binding */ bind_focused),
/* harmony export */   bind_property: () => (/* binding */ bind_property)
/* harmony export */ });
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _shared_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shared.js */ "../svelte/packages/svelte/src/internal/client/dom/elements/bindings/shared.js");



/**
 * @param {'innerHTML' | 'textContent' | 'innerText'} property
 * @param {HTMLElement} element
 * @param {() => unknown} get
 * @param {(value: unknown) => void} set
 * @returns {void}
 */
function bind_content_editable(property, element, get, set = get) {
  element.addEventListener('input', () => {
    // @ts-ignore
    set(element[property]);
  });
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_0__.render_effect)(() => {
    var value = get();
    if (element[property] !== value) {
      if (value == null) {
        // @ts-ignore
        var non_null_value = element[property];
        set(non_null_value);
      } else {
        // @ts-ignore
        element[property] = value + '';
      }
    }
  });
}

/**
 * @param {string} property
 * @param {string} event_name
 * @param {Element} element
 * @param {(value: unknown) => void} set
 * @param {() => unknown} [get]
 * @returns {void}
 */
function bind_property(property, event_name, element, set, get) {
  var handler = () => {
    // @ts-ignore
    set(element[property]);
  };
  element.addEventListener(event_name, handler);
  if (get) {
    (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_0__.render_effect)(() => {
      // @ts-ignore
      element[property] = get();
    });
  } else {
    handler();
  }

  // @ts-ignore
  if (element === document.body || element === window || element === document) {
    (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_0__.teardown)(() => {
      element.removeEventListener(event_name, handler);
    });
  }
}

/**
 * @param {HTMLElement} element
 * @param {(value: unknown) => void} set
 * @returns {void}
 */
function bind_focused(element, set) {
  (0,_shared_js__WEBPACK_IMPORTED_MODULE_1__.listen)(element, ['focus', 'blur'], () => {
    set(element === document.activeElement);
  });
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/elements/bindings/window.js":
/*!*************************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/elements/bindings/window.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   bind_window_scroll: () => (/* binding */ bind_window_scroll),
/* harmony export */   bind_window_size: () => (/* binding */ bind_window_size)
/* harmony export */ });
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _shared_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shared.js */ "../svelte/packages/svelte/src/internal/client/dom/elements/bindings/shared.js");



/**
 * @param {'x' | 'y'} type
 * @param {() => number} get
 * @param {(value: number) => void} set
 * @returns {void}
 */
function bind_window_scroll(type, get, set = get) {
  var is_scrolling_x = type === 'x';
  var target_handler = () => (0,_shared_js__WEBPACK_IMPORTED_MODULE_1__.without_reactive_context)(() => {
    scrolling = true;
    clearTimeout(timeout);
    timeout = setTimeout(clear, 100); // TODO use scrollend event if supported (or when supported everywhere?)

    set(window[is_scrolling_x ? 'scrollX' : 'scrollY']);
  });
  addEventListener('scroll', target_handler, {
    passive: true
  });
  var scrolling = false;

  /** @type {ReturnType<typeof setTimeout>} */
  var timeout;
  var clear = () => {
    scrolling = false;
  };
  var first = true;
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_0__.render_effect)(() => {
    var latest_value = get();
    // Don't scroll to the initial value for accessibility reasons
    if (first) {
      first = false;
    } else if (!scrolling && latest_value != null) {
      scrolling = true;
      clearTimeout(timeout);
      if (is_scrolling_x) {
        scrollTo(latest_value, window.scrollY);
      } else {
        scrollTo(window.scrollX, latest_value);
      }
      timeout = setTimeout(clear, 100);
    }
  });

  // Browsers don't fire the scroll event for the initial scroll position when scroll style isn't set to smooth
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_0__.effect)(target_handler);
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_0__.teardown)(() => {
    removeEventListener('scroll', target_handler);
  });
}

/**
 * @param {'innerWidth' | 'innerHeight' | 'outerWidth' | 'outerHeight'} type
 * @param {(size: number) => void} set
 */
function bind_window_size(type, set) {
  (0,_shared_js__WEBPACK_IMPORTED_MODULE_1__.listen)(window, ['resize'], () => (0,_shared_js__WEBPACK_IMPORTED_MODULE_1__.without_reactive_context)(() => set(window[type])));
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/elements/class.js":
/*!***************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/elements/class.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   set_class: () => (/* binding */ set_class),
/* harmony export */   set_mathml_class: () => (/* binding */ set_mathml_class),
/* harmony export */   set_svg_class: () => (/* binding */ set_svg_class),
/* harmony export */   toggle_class: () => (/* binding */ toggle_class)
/* harmony export */ });
/* harmony import */ var _hydration_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../hydration.js */ "../svelte/packages/svelte/src/internal/client/dom/hydration.js");


/**
 * @param {SVGElement} dom
 * @param {string} value
 * @param {string} [hash]
 * @returns {void}
 */
function set_svg_class(dom, value, hash) {
  // @ts-expect-error need to add __className to patched prototype
  var prev_class_name = dom.__className;
  var next_class_name = to_class(value, hash);
  if (_hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrating && dom.getAttribute('class') === next_class_name) {
    // In case of hydration don't reset the class as it's already correct.
    // @ts-expect-error need to add __className to patched prototype
    dom.__className = next_class_name;
  } else if (prev_class_name !== next_class_name || _hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrating && dom.getAttribute('class') !== next_class_name) {
    if (next_class_name === '') {
      dom.removeAttribute('class');
    } else {
      dom.setAttribute('class', next_class_name);
    }

    // @ts-expect-error need to add __className to patched prototype
    dom.__className = next_class_name;
  }
}

/**
 * @param {MathMLElement} dom
 * @param {string} value
 * @param {string} [hash]
 * @returns {void}
 */
function set_mathml_class(dom, value, hash) {
  // @ts-expect-error need to add __className to patched prototype
  var prev_class_name = dom.__className;
  var next_class_name = to_class(value, hash);
  if (_hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrating && dom.getAttribute('class') === next_class_name) {
    // In case of hydration don't reset the class as it's already correct.
    // @ts-expect-error need to add __className to patched prototype
    dom.__className = next_class_name;
  } else if (prev_class_name !== next_class_name || _hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrating && dom.getAttribute('class') !== next_class_name) {
    if (next_class_name === '') {
      dom.removeAttribute('class');
    } else {
      dom.setAttribute('class', next_class_name);
    }

    // @ts-expect-error need to add __className to patched prototype
    dom.__className = next_class_name;
  }
}

/**
 * @param {HTMLElement} dom
 * @param {string} value
 * @param {string} [hash]
 * @returns {void}
 */
function set_class(dom, value, hash) {
  // @ts-expect-error need to add __className to patched prototype
  var prev_class_name = dom.__className;
  var next_class_name = to_class(value, hash);
  if (_hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrating && dom.className === next_class_name) {
    // In case of hydration don't reset the class as it's already correct.
    // @ts-expect-error need to add __className to patched prototype
    dom.__className = next_class_name;
  } else if (prev_class_name !== next_class_name || _hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrating && dom.className !== next_class_name) {
    // Removing the attribute when the value is only an empty string causes
    // peformance issues vs simply making the className an empty string. So
    // we should only remove the class if the the value is nullish.
    if (value == null && !hash) {
      dom.removeAttribute('class');
    } else {
      dom.className = next_class_name;
    }

    // @ts-expect-error need to add __className to patched prototype
    dom.__className = next_class_name;
  }
}

/**
 * @template V
 * @param {V} value
 * @param {string} [hash]
 * @returns {string | V}
 */
function to_class(value, hash) {
  return (value == null ? '' : value) + (hash ? ' ' + hash : '');
}

/**
 * @param {Element} dom
 * @param {string} class_name
 * @param {boolean} value
 * @returns {void}
 */
function toggle_class(dom, class_name, value) {
  if (value) {
    if (dom.classList.contains(class_name)) return;
    dom.classList.add(class_name);
  } else {
    if (!dom.classList.contains(class_name)) return;
    dom.classList.remove(class_name);
  }
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/elements/custom-element.js":
/*!************************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/elements/custom-element.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   create_custom_element: () => (/* binding */ create_custom_element)
/* harmony export */ });
/* harmony import */ var _legacy_legacy_client_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../legacy/legacy-client.js */ "../svelte/packages/svelte/src/legacy/legacy-client.js");
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../template.js */ "../svelte/packages/svelte/src/internal/client/dom/template.js");
/* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../shared/utils.js */ "../svelte/packages/svelte/src/internal/shared/utils.js");





/**
 * @typedef {Object} CustomElementPropDefinition
 * @property {string} [attribute]
 * @property {boolean} [reflect]
 * @property {'String'|'Boolean'|'Number'|'Array'|'Object'} [type]
 */

/** @type {any} */
let SvelteElement;
if (typeof HTMLElement === 'function') {
  SvelteElement = class extends HTMLElement {
    /** The Svelte component constructor */
    $$ctor;
    /** Slots */
    $$s;
    /** @type {any} The Svelte component instance */
    $$c;
    /** Whether or not the custom element is connected */
    $$cn = false;
    /** @type {Record<string, any>} Component props data */
    $$d = {};
    /** `true` if currently in the process of reflecting component props back to attributes */
    $$r = false;
    /** @type {Record<string, CustomElementPropDefinition>} Props definition (name, reflected, type etc) */
    $$p_d = {};
    /** @type {Record<string, EventListenerOrEventListenerObject[]>} Event listeners */
    $$l = {};
    /** @type {Map<EventListenerOrEventListenerObject, Function>} Event listener unsubscribe functions */
    $$l_u = new Map();
    /** @type {any} The managed render effect for reflecting attributes */
    $$me;

    /**
     * @param {*} $$componentCtor
     * @param {*} $$slots
     * @param {*} use_shadow_dom
     */
    constructor($$componentCtor, $$slots, use_shadow_dom) {
      super();
      this.$$ctor = $$componentCtor;
      this.$$s = $$slots;
      if (use_shadow_dom) {
        this.attachShadow({
          mode: 'open'
        });
      }
    }

    /**
     * @param {string} type
     * @param {EventListenerOrEventListenerObject} listener
     * @param {boolean | AddEventListenerOptions} [options]
     */
    addEventListener(type, listener, options) {
      // We can't determine upfront if the event is a custom event or not, so we have to
      // listen to both. If someone uses a custom event with the same name as a regular
      // browser event, this fires twice - we can't avoid that.
      this.$$l[type] = this.$$l[type] || [];
      this.$$l[type].push(listener);
      if (this.$$c) {
        const unsub = this.$$c.$on(type, listener);
        this.$$l_u.set(listener, unsub);
      }
      super.addEventListener(type, listener, options);
    }

    /**
     * @param {string} type
     * @param {EventListenerOrEventListenerObject} listener
     * @param {boolean | AddEventListenerOptions} [options]
     */
    removeEventListener(type, listener, options) {
      super.removeEventListener(type, listener, options);
      if (this.$$c) {
        const unsub = this.$$l_u.get(listener);
        if (unsub) {
          unsub();
          this.$$l_u.delete(listener);
        }
      }
    }
    async connectedCallback() {
      this.$$cn = true;
      if (!this.$$c) {
        // We wait one tick to let possible child slot elements be created/mounted
        await Promise.resolve();
        if (!this.$$cn || this.$$c) {
          return;
        }
        /** @param {string} name */
        function create_slot(name) {
          /**
           * @param {Element} anchor
           */
          return anchor => {
            const slot = document.createElement('slot');
            if (name !== 'default') slot.name = name;
            (0,_template_js__WEBPACK_IMPORTED_MODULE_2__.append)(anchor, slot);
          };
        }
        /** @type {Record<string, any>} */
        const $$slots = {};
        const existing_slots = get_custom_elements_slots(this);
        for (const name of this.$$s) {
          if (name in existing_slots) {
            if (name === 'default' && !this.$$d.children) {
              this.$$d.children = create_slot(name);
              $$slots.default = true;
            } else {
              $$slots[name] = create_slot(name);
            }
          }
        }
        for (const attribute of this.attributes) {
          // this.$$data takes precedence over this.attributes
          const name = this.$$g_p(attribute.name);
          if (!(name in this.$$d)) {
            this.$$d[name] = get_custom_element_value(name, attribute.value, this.$$p_d, 'toProp');
          }
        }
        // Port over props that were set programmatically before ce was initialized
        for (const key in this.$$p_d) {
          // @ts-expect-error
          if (!(key in this.$$d) && this[key] !== undefined) {
            // @ts-expect-error
            this.$$d[key] = this[key]; // don't transform, these were set through JavaScript
            // @ts-expect-error
            delete this[key]; // remove the property that shadows the getter/setter
          }
        }
        this.$$c = (0,_legacy_legacy_client_js__WEBPACK_IMPORTED_MODULE_0__.createClassComponent)({
          component: this.$$ctor,
          target: this.shadowRoot || this,
          props: {
            ...this.$$d,
            $$slots,
            $$host: this
          }
        });

        // Reflect component props as attributes
        this.$$me = (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.effect_root)(() => {
          (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.render_effect)(() => {
            this.$$r = true;
            for (const key of (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_3__.object_keys)(this.$$c)) {
              if (!this.$$p_d[key]?.reflect) continue;
              this.$$d[key] = this.$$c[key];
              const attribute_value = get_custom_element_value(key, this.$$d[key], this.$$p_d, 'toAttribute');
              if (attribute_value == null) {
                this.removeAttribute(this.$$p_d[key].attribute || key);
              } else {
                this.setAttribute(this.$$p_d[key].attribute || key, attribute_value);
              }
            }
            this.$$r = false;
          });
        });
        for (const type in this.$$l) {
          for (const listener of this.$$l[type]) {
            const unsub = this.$$c.$on(type, listener);
            this.$$l_u.set(listener, unsub);
          }
        }
        this.$$l = {};
      }
    }

    // We don't need this when working within Svelte code, but for compatibility of people using this outside of Svelte
    // and setting attributes through setAttribute etc, this is helpful

    /**
     * @param {string} attr
     * @param {string} _oldValue
     * @param {string} newValue
     */
    attributeChangedCallback(attr, _oldValue, newValue) {
      if (this.$$r) return;
      attr = this.$$g_p(attr);
      this.$$d[attr] = get_custom_element_value(attr, newValue, this.$$p_d, 'toProp');
      this.$$c?.$set({
        [attr]: this.$$d[attr]
      });
    }
    disconnectedCallback() {
      this.$$cn = false;
      // In a microtask, because this could be a move within the DOM
      Promise.resolve().then(() => {
        if (!this.$$cn && this.$$c) {
          this.$$c.$destroy();
          this.$$me();
          this.$$c = undefined;
        }
      });
    }

    /**
     * @param {string} attribute_name
     */
    $$g_p(attribute_name) {
      return (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_3__.object_keys)(this.$$p_d).find(key => this.$$p_d[key].attribute === attribute_name || !this.$$p_d[key].attribute && key.toLowerCase() === attribute_name) || attribute_name;
    }
  };
}

/**
 * @param {string} prop
 * @param {any} value
 * @param {Record<string, CustomElementPropDefinition>} props_definition
 * @param {'toAttribute' | 'toProp'} [transform]
 */
function get_custom_element_value(prop, value, props_definition, transform) {
  const type = props_definition[prop]?.type;
  value = type === 'Boolean' && typeof value !== 'boolean' ? value != null : value;
  if (!transform || !props_definition[prop]) {
    return value;
  } else if (transform === 'toAttribute') {
    switch (type) {
      case 'Object':
      case 'Array':
        return value == null ? null : JSON.stringify(value);
      case 'Boolean':
        return value ? '' : null;
      case 'Number':
        return value == null ? null : value;
      default:
        return value;
    }
  } else {
    switch (type) {
      case 'Object':
      case 'Array':
        return value && JSON.parse(value);
      case 'Boolean':
        return value;
      // conversion already handled above
      case 'Number':
        return value != null ? +value : value;
      default:
        return value;
    }
  }
}

/**
 * @param {HTMLElement} element
 */
function get_custom_elements_slots(element) {
  /** @type {Record<string, true>} */
  const result = {};
  element.childNodes.forEach(node => {
    result[/** @type {Element} node */node.slot || 'default'] = true;
  });
  return result;
}

/**
 * @internal
 *
 * Turn a Svelte component into a custom element.
 * @param {any} Component  A Svelte component function
 * @param {Record<string, CustomElementPropDefinition>} props_definition  The props to observe
 * @param {string[]} slots  The slots to create
 * @param {string[]} exports  Explicitly exported values, other than props
 * @param {boolean} use_shadow_dom  Whether to use shadow DOM
 * @param {(ce: new () => HTMLElement) => new () => HTMLElement} [extend]
 */
function create_custom_element(Component, props_definition, slots, exports, use_shadow_dom, extend) {
  let Class = class extends SvelteElement {
    constructor() {
      super(Component, slots, use_shadow_dom);
      this.$$p_d = props_definition;
    }
    static get observedAttributes() {
      return (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_3__.object_keys)(props_definition).map(key => (props_definition[key].attribute || key).toLowerCase());
    }
  };
  (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_3__.object_keys)(props_definition).forEach(prop => {
    (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_3__.define_property)(Class.prototype, prop, {
      get() {
        return this.$$c && prop in this.$$c ? this.$$c[prop] : this.$$d[prop];
      },
      set(value) {
        value = get_custom_element_value(prop, value, props_definition);
        this.$$d[prop] = value;
        var component = this.$$c;
        if (component) {
          // // If the instance has an accessor, use that instead
          var setter = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_3__.get_descriptor)(component, prop)?.get;
          if (setter) {
            component[prop] = value;
          } else {
            component.$set({
              [prop]: value
            });
          }
        }
      }
    });
  });
  exports.forEach(property => {
    (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_3__.define_property)(Class.prototype, property, {
      get() {
        return this.$$c?.[property];
      }
    });
  });
  if (extend) {
    // @ts-expect-error - assigning here is fine
    Class = extend(Class);
  }
  Component.element = /** @type {any} */Class;
  return Class;
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/elements/events.js":
/*!****************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/elements/events.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   all_registered_events: () => (/* binding */ all_registered_events),
/* harmony export */   apply: () => (/* binding */ apply),
/* harmony export */   create_event: () => (/* binding */ create_event),
/* harmony export */   delegate: () => (/* binding */ delegate),
/* harmony export */   event: () => (/* binding */ event),
/* harmony export */   handle_event_propagation: () => (/* binding */ handle_event_propagation),
/* harmony export */   on: () => (/* binding */ on),
/* harmony export */   replay_events: () => (/* binding */ replay_events),
/* harmony export */   root_event_handles: () => (/* binding */ root_event_handles)
/* harmony export */ });
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../shared/utils.js */ "../svelte/packages/svelte/src/internal/shared/utils.js");
/* harmony import */ var _hydration_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../hydration.js */ "../svelte/packages/svelte/src/internal/client/dom/hydration.js");
/* harmony import */ var _task_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../task.js */ "../svelte/packages/svelte/src/internal/client/dom/task.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../constants.js */ "../svelte/packages/svelte/src/constants.js");
/* harmony import */ var _warnings_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../warnings.js */ "../svelte/packages/svelte/src/internal/client/warnings.js");
/* harmony import */ var _runtime_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../runtime.js */ "../svelte/packages/svelte/src/internal/client/runtime.js");
/* harmony import */ var _bindings_shared_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./bindings/shared.js */ "../svelte/packages/svelte/src/internal/client/dom/elements/bindings/shared.js");
/** @import { Location } from 'locate-character' */









/** @type {Set<string>} */
const all_registered_events = new Set();

/** @type {Set<(events: Array<string>) => void>} */
const root_event_handles = new Set();

/**
 * SSR adds onload and onerror attributes to catch those events before the hydration.
 * This function detects those cases, removes the attributes and replays the events.
 * @param {HTMLElement} dom
 */
function replay_events(dom) {
  if (!_hydration_js__WEBPACK_IMPORTED_MODULE_2__.hydrating) return;
  if (dom.onload) {
    dom.removeAttribute('onload');
  }
  if (dom.onerror) {
    dom.removeAttribute('onerror');
  }
  // @ts-expect-error
  const event = dom.__e;
  if (event !== undefined) {
    // @ts-expect-error
    dom.__e = undefined;
    queueMicrotask(() => {
      if (dom.isConnected) {
        dom.dispatchEvent(event);
      }
    });
  }
}

/**
 * @param {string} event_name
 * @param {EventTarget} dom
 * @param {EventListener} [handler]
 * @param {AddEventListenerOptions} [options]
 */
function create_event(event_name, dom, handler, options = {}) {
  /**
   * @this {EventTarget}
   */
  function target_handler(/** @type {Event} */event) {
    if (!options.capture) {
      // Only call in the bubble phase, else delegated events would be called before the capturing events
      handle_event_propagation.call(dom, event);
    }
    if (!event.cancelBubble) {
      return (0,_bindings_shared_js__WEBPACK_IMPORTED_MODULE_7__.without_reactive_context)(() => {
        return handler?.call(this, event);
      });
    }
  }

  // Chrome has a bug where pointer events don't work when attached to a DOM element that has been cloned
  // with cloneNode() and the DOM element is disconnected from the document. To ensure the event works, we
  // defer the attachment till after it's been appended to the document. TODO: remove this once Chrome fixes
  // this bug. The same applies to wheel events and touch events.
  if (event_name.startsWith('pointer') || event_name.startsWith('touch') || event_name === 'wheel') {
    (0,_task_js__WEBPACK_IMPORTED_MODULE_3__.queue_micro_task)(() => {
      dom.addEventListener(event_name, target_handler, options);
    });
  } else {
    dom.addEventListener(event_name, target_handler, options);
  }
  return target_handler;
}

/**
 * Attaches an event handler to an element and returns a function that removes the handler. Using this
 * rather than `addEventListener` will preserve the correct order relative to handlers added declaratively
 * (with attributes like `onclick`), which use event delegation for performance reasons
 *
 * @param {EventTarget} element
 * @param {string} type
 * @param {EventListener} handler
 * @param {AddEventListenerOptions} [options]
 */
function on(element, type, handler, options = {}) {
  var target_handler = create_event(type, element, handler, options);
  return () => {
    element.removeEventListener(type, target_handler, options);
  };
}

/**
 * @param {string} event_name
 * @param {Element} dom
 * @param {EventListener} [handler]
 * @param {boolean} [capture]
 * @param {boolean} [passive]
 * @returns {void}
 */
function event(event_name, dom, handler, capture, passive) {
  var options = {
    capture,
    passive
  };
  var target_handler = create_event(event_name, dom, handler, options);

  // @ts-ignore
  if (dom === document.body || dom === window || dom === document) {
    (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_0__.teardown)(() => {
      dom.removeEventListener(event_name, target_handler, options);
    });
  }
}

/**
 * @param {Array<string>} events
 * @returns {void}
 */
function delegate(events) {
  for (var i = 0; i < events.length; i++) {
    all_registered_events.add(events[i]);
  }
  for (var fn of root_event_handles) {
    fn(events);
  }
}

/**
 * @this {EventTarget}
 * @param {Event} event
 * @returns {void}
 */
function handle_event_propagation(event) {
  var handler_element = this;
  var owner_document = /** @type {Node} */handler_element.ownerDocument;
  var event_name = event.type;
  var path = event.composedPath?.() || [];
  var current_target = /** @type {null | Element} */path[0] || event.target;

  // composedPath contains list of nodes the event has propagated through.
  // We check __root to skip all nodes below it in case this is a
  // parent of the __root node, which indicates that there's nested
  // mounted apps. In this case we don't want to trigger events multiple times.
  var path_idx = 0;

  // @ts-expect-error is added below
  var handled_at = event.__root;
  if (handled_at) {
    var at_idx = path.indexOf(handled_at);
    if (at_idx !== -1 && (handler_element === document || handler_element === (/** @type {any} */window))) {
      // This is the fallback document listener or a window listener, but the event was already handled
      // -> ignore, but set handle_at to document/window so that we're resetting the event
      // chain in case someone manually dispatches the same event object again.
      // @ts-expect-error
      event.__root = handler_element;
      return;
    }

    // We're deliberately not skipping if the index is higher, because
    // someone could create an event programmatically and emit it multiple times,
    // in which case we want to handle the whole propagation chain properly each time.
    // (this will only be a false negative if the event is dispatched multiple times and
    // the fallback document listener isn't reached in between, but that's super rare)
    var handler_idx = path.indexOf(handler_element);
    if (handler_idx === -1) {
      // handle_idx can theoretically be -1 (happened in some JSDOM testing scenarios with an event listener on the window object)
      // so guard against that, too, and assume that everything was handled at this point.
      return;
    }
    if (at_idx <= handler_idx) {
      path_idx = at_idx;
    }
  }
  current_target = /** @type {Element} */path[path_idx] || event.target;
  // there can only be one delegated event per element, and we either already handled the current target,
  // or this is the very first target in the chain which has a non-delegated listener, in which case it's safe
  // to handle a possible delegated event on it later (through the root delegation listener for example).
  if (current_target === handler_element) return;

  // Proxy currentTarget to correct target
  (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_1__.define_property)(event, 'currentTarget', {
    configurable: true,
    get() {
      return current_target || owner_document;
    }
  });

  // This started because of Chromium issue https://chromestatus.com/feature/5128696823545856,
  // where removal or moving of of the DOM can cause sync `blur` events to fire, which can cause logic
  // to run inside the current `active_reaction`, which isn't what we want at all. However, on reflection,
  // it's probably best that all event handled by Svelte have this behaviour, as we don't really want
  // an event handler to run in the context of another reaction or effect.
  var previous_reaction = _runtime_js__WEBPACK_IMPORTED_MODULE_6__.active_reaction;
  var previous_effect = _runtime_js__WEBPACK_IMPORTED_MODULE_6__.active_effect;
  (0,_runtime_js__WEBPACK_IMPORTED_MODULE_6__.set_active_reaction)(null);
  (0,_runtime_js__WEBPACK_IMPORTED_MODULE_6__.set_active_effect)(null);
  try {
    /**
     * @type {unknown}
     */
    var throw_error;
    /**
     * @type {unknown[]}
     */
    var other_errors = [];
    while (current_target !== null) {
      /** @type {null | Element} */
      var parent_element = current_target.assignedSlot || current_target.parentNode || /** @type {any} */current_target.host || null;
      try {
        // @ts-expect-error
        var delegated = current_target['__' + event_name];
        if (delegated !== undefined && (!(/** @type {any} */current_target.disabled) ||
        // DOM could've been updated already by the time this is reached, so we check this as well
        // -> the target could not have been disabled because it emits the event in the first place
        event.target === current_target)) {
          if ((0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_1__.is_array)(delegated)) {
            var [fn, ...data] = delegated;
            fn.apply(current_target, [event, ...data]);
          } else {
            delegated.call(current_target, event);
          }
        }
      } catch (error) {
        if (throw_error) {
          other_errors.push(error);
        } else {
          throw_error = error;
        }
      }
      if (event.cancelBubble || parent_element === handler_element || parent_element === null) {
        break;
      }
      current_target = parent_element;
    }
    if (throw_error) {
      for (let error of other_errors) {
        // Throw the rest of the errors, one-by-one on a microtask
        queueMicrotask(() => {
          throw error;
        });
      }
      throw throw_error;
    }
  } finally {
    // @ts-expect-error is used above
    event.__root = handler_element;
    // @ts-ignore remove proxy on currentTarget
    delete event.currentTarget;
    (0,_runtime_js__WEBPACK_IMPORTED_MODULE_6__.set_active_reaction)(previous_reaction);
    (0,_runtime_js__WEBPACK_IMPORTED_MODULE_6__.set_active_effect)(previous_effect);
  }
}

/**
 * In dev, warn if an event handler is not a function, as it means the
 * user probably called the handler or forgot to add a `() =>`
 * @param {() => (event: Event, ...args: any) => void} thunk
 * @param {EventTarget} element
 * @param {[Event, ...any]} args
 * @param {any} component
 * @param {[number, number]} [loc]
 * @param {boolean} [remove_parens]
 */
function apply(thunk, element, args, component, loc, has_side_effects = false, remove_parens = false) {
  let handler;
  let error;
  try {
    handler = thunk();
  } catch (e) {
    error = e;
  }
  if (typeof handler === 'function') {
    handler.apply(element, args);
  } else if (has_side_effects || handler != null || error) {
    const filename = component?.[_constants_js__WEBPACK_IMPORTED_MODULE_4__.FILENAME];
    const location = loc ? ` at ${filename}:${loc[0]}:${loc[1]}` : ` in ${filename}`;
    const event_name = args[0].type;
    const description = `\`${event_name}\` handler${location}`;
    const suggestion = remove_parens ? 'remove the trailing `()`' : 'add a leading `() =>`';
    _warnings_js__WEBPACK_IMPORTED_MODULE_5__.event_handler_invalid(description, suggestion);
    if (error) {
      throw error;
    }
  }
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/elements/misc.js":
/*!**************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/elements/misc.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   add_form_reset_listener: () => (/* binding */ add_form_reset_listener),
/* harmony export */   autofocus: () => (/* binding */ autofocus),
/* harmony export */   remove_textarea_child: () => (/* binding */ remove_textarea_child)
/* harmony export */ });
/* harmony import */ var _hydration_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../hydration.js */ "../svelte/packages/svelte/src/internal/client/dom/hydration.js");
/* harmony import */ var _operations_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../operations.js */ "../svelte/packages/svelte/src/internal/client/dom/operations.js");
/* harmony import */ var _task_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../task.js */ "../svelte/packages/svelte/src/internal/client/dom/task.js");




/**
 * @param {HTMLElement} dom
 * @param {boolean} value
 * @returns {void}
 */
function autofocus(dom, value) {
  if (value) {
    const body = document.body;
    dom.autofocus = true;
    (0,_task_js__WEBPACK_IMPORTED_MODULE_2__.queue_micro_task)(() => {
      if (document.activeElement === body) {
        dom.focus();
      }
    });
  }
}

/**
 * The child of a textarea actually corresponds to the defaultValue property, so we need
 * to remove it upon hydration to avoid a bug when someone resets the form value.
 * @param {HTMLTextAreaElement} dom
 * @returns {void}
 */
function remove_textarea_child(dom) {
  if (_hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrating && (0,_operations_js__WEBPACK_IMPORTED_MODULE_1__.get_first_child)(dom) !== null) {
    (0,_operations_js__WEBPACK_IMPORTED_MODULE_1__.clear_text_content)(dom);
  }
}
let listening_to_form_reset = false;
function add_form_reset_listener() {
  if (!listening_to_form_reset) {
    listening_to_form_reset = true;
    document.addEventListener('reset', evt => {
      // Needs to happen one tick later or else the dom properties of the form
      // elements have not updated to their reset values yet
      Promise.resolve().then(() => {
        if (!evt.defaultPrevented) {
          for (const e of /**@type {HTMLFormElement} */evt.target.elements) {
            // @ts-expect-error
            e.__on_r?.();
          }
        }
      });
    },
    // In the capture phase to guarantee we get noticed of it (no possiblity of stopPropagation)
    {
      capture: true
    });
  }
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/elements/style.js":
/*!***************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/elements/style.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   set_style: () => (/* binding */ set_style)
/* harmony export */ });
/**
 * @param {HTMLElement} dom
 * @param {string} key
 * @param {string} value
 * @param {boolean} [important]
 */
function set_style(dom, key, value, important) {
  // @ts-expect-error
  var styles = dom.__styles ??= {};
  if (styles[key] === value) {
    return;
  }
  styles[key] = value;
  if (value == null) {
    dom.style.removeProperty(key);
  } else {
    dom.style.setProperty(key, value, important ? 'important' : '');
  }
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/elements/transitions.js":
/*!*********************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/elements/transitions.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   animation: () => (/* binding */ animation),
/* harmony export */   transition: () => (/* binding */ transition)
/* harmony export */ });
/* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../shared/utils.js */ "../svelte/packages/svelte/src/internal/shared/utils.js");
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _runtime_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../runtime.js */ "../svelte/packages/svelte/src/internal/client/runtime.js");
/* harmony import */ var _loop_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../loop.js */ "../svelte/packages/svelte/src/internal/client/loop.js");
/* harmony import */ var _render_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../render.js */ "../svelte/packages/svelte/src/internal/client/render.js");
/* harmony import */ var _blocks_each_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../blocks/each.js */ "../svelte/packages/svelte/src/internal/client/dom/blocks/each.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../constants.js */ "../svelte/packages/svelte/src/constants.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../constants.js */ "../svelte/packages/svelte/src/internal/client/constants.js");
/* harmony import */ var _task_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../task.js */ "../svelte/packages/svelte/src/internal/client/dom/task.js");
/* harmony import */ var _bindings_shared_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./bindings/shared.js */ "../svelte/packages/svelte/src/internal/client/dom/elements/bindings/shared.js");
/** @import { AnimateFn, Animation, AnimationConfig, EachItem, Effect, TransitionFn, TransitionManager } from '#client' */











/**
 * @param {Element} element
 * @param {'introstart' | 'introend' | 'outrostart' | 'outroend'} type
 * @returns {void}
 */
function dispatch_event(element, type) {
  (0,_bindings_shared_js__WEBPACK_IMPORTED_MODULE_9__.without_reactive_context)(() => {
    element.dispatchEvent(new CustomEvent(type));
  });
}

/**
 * Converts a property to the camel-case format expected by Element.animate(), KeyframeEffect(), and KeyframeEffect.setKeyframes().
 * @param {string} style
 * @returns {string}
 */
function css_property_to_camelcase(style) {
  // in compliance with spec
  if (style === 'float') return 'cssFloat';
  if (style === 'offset') return 'cssOffset';

  // do not rename custom @properties
  if (style.startsWith('--')) return style;
  const parts = style.split('-');
  if (parts.length === 1) return parts[0];
  return parts[0] + parts.slice(1).map(/** @param {any} word */word => word[0].toUpperCase() + word.slice(1)).join('');
}

/**
 * @param {string} css
 * @returns {Keyframe}
 */
function css_to_keyframe(css) {
  /** @type {Keyframe} */
  const keyframe = {};
  const parts = css.split(';');
  for (const part of parts) {
    const [property, value] = part.split(':');
    if (!property || value === undefined) break;
    const formatted_property = css_property_to_camelcase(property.trim());
    keyframe[formatted_property] = value.trim();
  }
  return keyframe;
}

/** @param {number} t */
const linear = t => t;

/**
 * Called inside keyed `{#each ...}` blocks (as `$.animation(...)`). This creates an animation manager
 * and attaches it to the block, so that moves can be animated following reconciliation.
 * @template P
 * @param {Element} element
 * @param {() => AnimateFn<P | undefined>} get_fn
 * @param {(() => P) | null} get_params
 */
function animation(element, get_fn, get_params) {
  var item = /** @type {EachItem} */_blocks_each_js__WEBPACK_IMPORTED_MODULE_5__.current_each_item;

  /** @type {DOMRect} */
  var from;

  /** @type {DOMRect} */
  var to;

  /** @type {Animation | undefined} */
  var animation;

  /** @type {null | { position: string, width: string, height: string, transform: string }} */
  var original_styles = null;
  item.a ??= {
    element,
    measure() {
      from = this.element.getBoundingClientRect();
    },
    apply() {
      animation?.abort();
      to = this.element.getBoundingClientRect();
      if (from.left !== to.left || from.right !== to.right || from.top !== to.top || from.bottom !== to.bottom) {
        const options = get_fn()(this.element, {
          from,
          to
        }, get_params?.());
        animation = animate(this.element, options, undefined, 1, () => {
          animation?.abort();
          animation = undefined;
        });
      }
    },
    fix() {
      // If an animation is already running, transforming the element is likely to fail,
      // because the styles applied by the animation take precedence. In the case of crossfade,
      // that means the `translate(...)` of the crossfade transition overrules the `translate(...)`
      // we would apply below, leading to the element jumping somewhere to the top left.
      if (element.getAnimations().length) return;

      // It's important to destructure these to get fixed values - the object itself has getters,
      // and changing the style to 'absolute' can for example influence the width.
      var {
        position,
        width,
        height
      } = getComputedStyle(element);
      if (position !== 'absolute' && position !== 'fixed') {
        var style = /** @type {HTMLElement | SVGElement} */element.style;
        original_styles = {
          position: style.position,
          width: style.width,
          height: style.height,
          transform: style.transform
        };
        style.position = 'absolute';
        style.width = width;
        style.height = height;
        var to = element.getBoundingClientRect();
        if (from.left !== to.left || from.top !== to.top) {
          var transform = `translate(${from.left - to.left}px, ${from.top - to.top}px)`;
          style.transform = style.transform ? `${style.transform} ${transform}` : transform;
        }
      }
    },
    unfix() {
      if (original_styles) {
        var style = /** @type {HTMLElement | SVGElement} */element.style;
        style.position = original_styles.position;
        style.width = original_styles.width;
        style.height = original_styles.height;
        style.transform = original_styles.transform;
      }
    }
  };

  // in the case of a `<svelte:element>`, it's possible for `$.animation(...)` to be called
  // when an animation manager already exists, if the tag changes. in that case, we need to
  // swap out the element rather than creating a new manager, in case it happened at the same
  // moment as a reconciliation
  item.a.element = element;
}

/**
 * Called inside block effects as `$.transition(...)`. This creates a transition manager and
 * attaches it to the current effect — later, inside `pause_effect` and `resume_effect`, we
 * use this to create `intro` and `outro` transitions.
 * @template P
 * @param {number} flags
 * @param {HTMLElement} element
 * @param {() => TransitionFn<P | undefined>} get_fn
 * @param {(() => P) | null} get_params
 * @returns {void}
 */
function transition(flags, element, get_fn, get_params) {
  var is_intro = (flags & _constants_js__WEBPACK_IMPORTED_MODULE_6__.TRANSITION_IN) !== 0;
  var is_outro = (flags & _constants_js__WEBPACK_IMPORTED_MODULE_6__.TRANSITION_OUT) !== 0;
  var is_both = is_intro && is_outro;
  var is_global = (flags & _constants_js__WEBPACK_IMPORTED_MODULE_6__.TRANSITION_GLOBAL) !== 0;

  /** @type {'in' | 'out' | 'both'} */
  var direction = is_both ? 'both' : is_intro ? 'in' : 'out';

  /** @type {AnimationConfig | ((opts: { direction: 'in' | 'out' }) => AnimationConfig) | undefined} */
  var current_options;
  var inert = element.inert;

  /**
   * The default overflow style, stashed so we can revert changes during the transition
   * that are necessary to work around a Safari <18 bug
   * TODO 6.0 remove this, if older versions of Safari have died out enough
   */
  var overflow = element.style.overflow;

  /** @type {Animation | undefined} */
  var intro;

  /** @type {Animation | undefined} */
  var outro;
  function get_options() {
    var previous_reaction = _runtime_js__WEBPACK_IMPORTED_MODULE_2__.active_reaction;
    var previous_effect = _runtime_js__WEBPACK_IMPORTED_MODULE_2__.active_effect;
    (0,_runtime_js__WEBPACK_IMPORTED_MODULE_2__.set_active_reaction)(null);
    (0,_runtime_js__WEBPACK_IMPORTED_MODULE_2__.set_active_effect)(null);
    try {
      // If a transition is still ongoing, we use the existing options rather than generating
      // new ones. This ensures that reversible transitions reverse smoothly, rather than
      // jumping to a new spot because (for example) a different `duration` was used
      return current_options ??= get_fn()(element, get_params?.() ?? (/** @type {P} */{}), {
        direction
      });
    } finally {
      (0,_runtime_js__WEBPACK_IMPORTED_MODULE_2__.set_active_reaction)(previous_reaction);
      (0,_runtime_js__WEBPACK_IMPORTED_MODULE_2__.set_active_effect)(previous_effect);
    }
  }

  /** @type {TransitionManager} */
  var transition = {
    is_global,
    in() {
      element.inert = inert;
      if (!is_intro) {
        outro?.abort();
        outro?.reset?.();
        return;
      }
      if (!is_outro) {
        // if we intro then outro then intro again, we want to abort the first intro,
        // if it's not a bidirectional transition
        intro?.abort();
      }
      dispatch_event(element, 'introstart');
      intro = animate(element, get_options(), outro, 1, () => {
        dispatch_event(element, 'introend');

        // Ensure we cancel the animation to prevent leaking
        intro?.abort();
        intro = current_options = undefined;
        element.style.overflow = overflow;
      });
    },
    out(fn) {
      if (!is_outro) {
        fn?.();
        current_options = undefined;
        return;
      }
      element.inert = true;
      dispatch_event(element, 'outrostart');
      outro = animate(element, get_options(), intro, 0, () => {
        dispatch_event(element, 'outroend');
        fn?.();
      });
    },
    stop: () => {
      intro?.abort();
      outro?.abort();
    }
  };
  var e = /** @type {Effect} */_runtime_js__WEBPACK_IMPORTED_MODULE_2__.active_effect;
  (e.transitions ??= []).push(transition);

  // if this is a local transition, we only want to run it if the parent (branch) effect's
  // parent (block) effect is where the state change happened. we can determine that by
  // looking at whether the block effect is currently initializing
  if (is_intro && _render_js__WEBPACK_IMPORTED_MODULE_4__.should_intro) {
    var run = is_global;
    if (!run) {
      var block = /** @type {Effect | null} */e.parent;

      // skip over transparent blocks (e.g. snippets, else-if blocks)
      while (block && (block.f & _constants_js__WEBPACK_IMPORTED_MODULE_7__.EFFECT_TRANSPARENT) !== 0) {
        while (block = block.parent) {
          if ((block.f & _constants_js__WEBPACK_IMPORTED_MODULE_7__.BLOCK_EFFECT) !== 0) break;
        }
      }
      run = !block || (block.f & _constants_js__WEBPACK_IMPORTED_MODULE_7__.EFFECT_RAN) !== 0;
    }
    if (run) {
      (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.effect)(() => {
        (0,_runtime_js__WEBPACK_IMPORTED_MODULE_2__.untrack)(() => transition.in());
      });
    }
  }
}

/**
 * Animates an element, according to the provided configuration
 * @param {Element} element
 * @param {AnimationConfig | ((opts: { direction: 'in' | 'out' }) => AnimationConfig)} options
 * @param {Animation | undefined} counterpart The corresponding intro/outro to this outro/intro
 * @param {number} t2 The target `t` value — `1` for intro, `0` for outro
 * @param {(() => void)} on_finish Called after successfully completing the animation
 * @returns {Animation}
 */
function animate(element, options, counterpart, t2, on_finish) {
  var is_intro = t2 === 1;
  if ((0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.is_function)(options)) {
    // In the case of a deferred transition (such as `crossfade`), `option` will be
    // a function rather than an `AnimationConfig`. We need to call this function
    // once the DOM has been updated...
    /** @type {Animation} */
    var a;
    var aborted = false;
    (0,_task_js__WEBPACK_IMPORTED_MODULE_8__.queue_micro_task)(() => {
      if (aborted) return;
      var o = options({
        direction: is_intro ? 'in' : 'out'
      });
      a = animate(element, o, counterpart, t2, on_finish);
    });

    // ...but we want to do so without using `async`/`await` everywhere, so
    // we return a facade that allows everything to remain synchronous
    return {
      abort: () => {
        aborted = true;
        a?.abort();
      },
      deactivate: () => a.deactivate(),
      reset: () => a.reset(),
      t: () => a.t()
    };
  }
  counterpart?.deactivate();
  if (!options?.duration) {
    on_finish();
    return {
      abort: _shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.noop,
      deactivate: _shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.noop,
      reset: _shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.noop,
      t: () => t2
    };
  }
  const {
    delay = 0,
    css,
    tick,
    easing = linear
  } = options;
  var keyframes = [];
  if (is_intro && counterpart === undefined) {
    if (tick) {
      tick(0, 1); // TODO put in nested effect, to avoid interleaved reads/writes?
    }
    if (css) {
      var styles = css_to_keyframe(css(0, 1));
      keyframes.push(styles, styles);
    }
  }
  var get_t = () => 1 - t2;

  // create a dummy animation that lasts as long as the delay (but with whatever devtools
  // multiplier is in effect). in the common case that it is `0`, we keep it anyway so that
  // the CSS keyframes aren't created until the DOM is updated
  var animation = element.animate(keyframes, {
    duration: delay
  });
  animation.onfinish = () => {
    // for bidirectional transitions, we start from the current position,
    // rather than doing a full intro/outro
    var t1 = counterpart?.t() ?? 1 - t2;
    counterpart?.abort();
    var delta = t2 - t1;
    var duration = /** @type {number} */options.duration * Math.abs(delta);
    var keyframes = [];
    if (duration > 0) {
      /**
       * Whether or not the CSS includes `overflow: hidden`, in which case we need to
       * add it as an inline style to work around a Safari <18 bug
       * TODO 6.0 remove this, if possible
       */
      var needs_overflow_hidden = false;
      if (css) {
        var n = Math.ceil(duration / (1000 / 60)); // `n` must be an integer, or we risk missing the `t2` value

        for (var i = 0; i <= n; i += 1) {
          var t = t1 + delta * easing(i / n);
          var styles = css_to_keyframe(css(t, 1 - t));
          keyframes.push(styles);
          needs_overflow_hidden ||= styles.overflow === 'hidden';
        }
      }
      if (needs_overflow_hidden) {
        /** @type {HTMLElement} */element.style.overflow = 'hidden';
      }
      get_t = () => {
        var time = /** @type {number} */
        /** @type {globalThis.Animation} */animation.currentTime;
        return t1 + delta * easing(time / duration);
      };
      if (tick) {
        (0,_loop_js__WEBPACK_IMPORTED_MODULE_3__.loop)(() => {
          if (animation.playState !== 'running') return false;
          var t = get_t();
          tick(t, 1 - t);
          return true;
        });
      }
    }
    animation = element.animate(keyframes, {
      duration,
      fill: 'forwards'
    });
    animation.onfinish = () => {
      get_t = () => t2;
      tick?.(t2, 1 - t2);
      on_finish();
    };
  };
  return {
    abort: () => {
      if (animation) {
        animation.cancel();
        // This prevents memory leaks in Chromium
        animation.effect = null;
        // This prevents onfinish to be launched after cancel(),
        // which can happen in some rare cases
        // see https://github.com/sveltejs/svelte/issues/13681
        animation.onfinish = _shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.noop;
      }
    },
    deactivate: () => {
      on_finish = _shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.noop;
    },
    reset: () => {
      if (t2 === 0) {
        tick?.(1, 0);
      }
    },
    t: () => get_t()
  };
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/hydration.js":
/*!**********************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/hydration.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   hydrate_next: () => (/* binding */ hydrate_next),
/* harmony export */   hydrate_node: () => (/* binding */ hydrate_node),
/* harmony export */   hydrate_template: () => (/* binding */ hydrate_template),
/* harmony export */   hydrating: () => (/* binding */ hydrating),
/* harmony export */   next: () => (/* binding */ next),
/* harmony export */   remove_nodes: () => (/* binding */ remove_nodes),
/* harmony export */   reset: () => (/* binding */ reset),
/* harmony export */   set_hydrate_node: () => (/* binding */ set_hydrate_node),
/* harmony export */   set_hydrating: () => (/* binding */ set_hydrating)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../constants.js */ "../svelte/packages/svelte/src/constants.js");
/* harmony import */ var _warnings_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../warnings.js */ "../svelte/packages/svelte/src/internal/client/warnings.js");
/* harmony import */ var _operations_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operations.js */ "../svelte/packages/svelte/src/internal/client/dom/operations.js");
/** @import { TemplateNode } from '#client' */





/**
 * Use this variable to guard everything related to hydration code so it can be treeshaken out
 * if the user doesn't use the `hydrate` method and these code paths are therefore not needed.
 */
let hydrating = false;

/** @param {boolean} value */
function set_hydrating(value) {
  hydrating = value;
}

/**
 * The node that is currently being hydrated. This starts out as the first node inside the opening
 * <!--[--> comment, and updates each time a component calls `$.child(...)` or `$.sibling(...)`.
 * When entering a block (e.g. `{#if ...}`), `hydrate_node` is the block opening comment; by the
 * time we leave the block it is the closing comment, which serves as the block's anchor.
 * @type {TemplateNode}
 */
let hydrate_node;

/** @param {TemplateNode} node */
function set_hydrate_node(node) {
  if (node === null) {
    _warnings_js__WEBPACK_IMPORTED_MODULE_1__.hydration_mismatch();
    throw _constants_js__WEBPACK_IMPORTED_MODULE_0__.HYDRATION_ERROR;
  }
  return hydrate_node = node;
}
function hydrate_next() {
  return set_hydrate_node(/** @type {TemplateNode} */(0,_operations_js__WEBPACK_IMPORTED_MODULE_2__.get_next_sibling)(hydrate_node));
}

/** @param {TemplateNode} node */
function reset(node) {
  if (!hydrating) return;

  // If the node has remaining siblings, something has gone wrong
  if ((0,_operations_js__WEBPACK_IMPORTED_MODULE_2__.get_next_sibling)(hydrate_node) !== null) {
    _warnings_js__WEBPACK_IMPORTED_MODULE_1__.hydration_mismatch();
    throw _constants_js__WEBPACK_IMPORTED_MODULE_0__.HYDRATION_ERROR;
  }
  hydrate_node = node;
}

/**
 * @param {HTMLTemplateElement} template
 */
function hydrate_template(template) {
  if (hydrating) {
    // @ts-expect-error TemplateNode doesn't include DocumentFragment, but it's actually fine
    hydrate_node = template.content;
  }
}
function next(count = 1) {
  if (hydrating) {
    var i = count;
    var node = hydrate_node;
    while (i--) {
      node = /** @type {TemplateNode} */(0,_operations_js__WEBPACK_IMPORTED_MODULE_2__.get_next_sibling)(node);
    }
    hydrate_node = node;
  }
}

/**
 * Removes all nodes starting at `hydrate_node` up until the next hydration end comment
 */
function remove_nodes() {
  var depth = 0;
  var node = hydrate_node;
  while (true) {
    if (node.nodeType === 8) {
      var data = /** @type {Comment} */node.data;
      if (data === _constants_js__WEBPACK_IMPORTED_MODULE_0__.HYDRATION_END) {
        if (depth === 0) return node;
        depth -= 1;
      } else if (data === _constants_js__WEBPACK_IMPORTED_MODULE_0__.HYDRATION_START || data === _constants_js__WEBPACK_IMPORTED_MODULE_0__.HYDRATION_START_ELSE) {
        depth += 1;
      }
    }
    var next = /** @type {TemplateNode} */(0,_operations_js__WEBPACK_IMPORTED_MODULE_2__.get_next_sibling)(node);
    node.remove();
    node = next;
  }
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/legacy/event-modifiers.js":
/*!***********************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/legacy/event-modifiers.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   nonpassive: () => (/* binding */ nonpassive),
/* harmony export */   once: () => (/* binding */ once),
/* harmony export */   passive: () => (/* binding */ passive),
/* harmony export */   preventDefault: () => (/* binding */ preventDefault),
/* harmony export */   self: () => (/* binding */ self),
/* harmony export */   stopImmediatePropagation: () => (/* binding */ stopImmediatePropagation),
/* harmony export */   stopPropagation: () => (/* binding */ stopPropagation),
/* harmony export */   trusted: () => (/* binding */ trusted)
/* harmony export */ });
/* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../shared/utils.js */ "../svelte/packages/svelte/src/internal/shared/utils.js");
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _elements_events_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../elements/events.js */ "../svelte/packages/svelte/src/internal/client/dom/elements/events.js");
/** @import { ActionReturn } from 'svelte/action' */




/**
 * Substitute for the `trusted` event modifier
 * @deprecated
 * @param {(event: Event, ...args: Array<unknown>) => void} fn
 * @returns {(event: Event, ...args: unknown[]) => void}
 */
function trusted(fn) {
  return function (...args) {
    var event = /** @type {Event} */args[0];
    if (event.isTrusted) {
      // @ts-ignore
      fn?.apply(this, args);
    }
  };
}

/**
 * Substitute for the `self` event modifier
 * @deprecated
 * @param {(event: Event, ...args: Array<unknown>) => void} fn
 * @returns {(event: Event, ...args: unknown[]) => void}
 */
function self(fn) {
  return function (...args) {
    var event = /** @type {Event} */args[0];
    // @ts-ignore
    if (event.target === this) {
      // @ts-ignore
      fn?.apply(this, args);
    }
  };
}

/**
 * Substitute for the `stopPropagation` event modifier
 * @deprecated
 * @param {(event: Event, ...args: Array<unknown>) => void} fn
 * @returns {(event: Event, ...args: unknown[]) => void}
 */
function stopPropagation(fn) {
  return function (...args) {
    var event = /** @type {Event} */args[0];
    event.stopPropagation();
    // @ts-ignore
    return fn?.apply(this, args);
  };
}

/**
 * Substitute for the `once` event modifier
 * @deprecated
 * @param {(event: Event, ...args: Array<unknown>) => void} fn
 * @returns {(event: Event, ...args: unknown[]) => void}
 */
function once(fn) {
  var ran = false;
  return function (...args) {
    if (ran) return;
    ran = true;

    // @ts-ignore
    return fn?.apply(this, args);
  };
}

/**
 * Substitute for the `stopImmediatePropagation` event modifier
 * @deprecated
 * @param {(event: Event, ...args: Array<unknown>) => void} fn
 * @returns {(event: Event, ...args: unknown[]) => void}
 */
function stopImmediatePropagation(fn) {
  return function (...args) {
    var event = /** @type {Event} */args[0];
    event.stopImmediatePropagation();
    // @ts-ignore
    return fn?.apply(this, args);
  };
}

/**
 * Substitute for the `preventDefault` event modifier
 * @deprecated
 * @param {(event: Event, ...args: Array<unknown>) => void} fn
 * @returns {(event: Event, ...args: unknown[]) => void}
 */
function preventDefault(fn) {
  return function (...args) {
    var event = /** @type {Event} */args[0];
    event.preventDefault();
    // @ts-ignore
    return fn?.apply(this, args);
  };
}

/**
 * Substitute for the `passive` event modifier, implemented as an action
 * @deprecated
 * @param {HTMLElement} node
 * @param {[event: string, handler: () => EventListener]} options
 */
function passive(node, [event, handler]) {
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.user_pre_effect)(() => {
    return (0,_elements_events_js__WEBPACK_IMPORTED_MODULE_2__.on)(node, event, handler() ?? _shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.noop, {
      passive: true
    });
  });
}

/**
 * Substitute for the `nonpassive` event modifier, implemented as an action
 * @deprecated
 * @param {HTMLElement} node
 * @param {[event: string, handler: () => EventListener]} options
 */
function nonpassive(node, [event, handler]) {
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.user_pre_effect)(() => {
    return (0,_elements_events_js__WEBPACK_IMPORTED_MODULE_2__.on)(node, event, handler() ?? _shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.noop, {
      passive: false
    });
  });
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/legacy/lifecycle.js":
/*!*****************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/legacy/lifecycle.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   init: () => (/* binding */ init)
/* harmony export */ });
/* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../shared/utils.js */ "../svelte/packages/svelte/src/internal/shared/utils.js");
/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../context.js */ "../svelte/packages/svelte/src/internal/client/context.js");
/* harmony import */ var _reactivity_deriveds_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../reactivity/deriveds.js */ "../svelte/packages/svelte/src/internal/client/reactivity/deriveds.js");
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _runtime_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../runtime.js */ "../svelte/packages/svelte/src/internal/client/runtime.js");
/** @import { ComponentContextLegacy } from '#client' */






/**
 * Legacy-mode only: Call `onMount` callbacks and set up `beforeUpdate`/`afterUpdate` effects
 * @param {boolean} [immutable]
 */
function init(immutable = false) {
  const context = /** @type {ComponentContextLegacy} */_context_js__WEBPACK_IMPORTED_MODULE_1__.component_context;
  const callbacks = context.l.u;
  if (!callbacks) return;
  let props = () => (0,_runtime_js__WEBPACK_IMPORTED_MODULE_4__.deep_read_state)(context.s);
  if (immutable) {
    let version = 0;
    let prev = /** @type {Record<string, any>} */{};

    // In legacy immutable mode, before/afterUpdate only fire if the object identity of a prop changes
    const d = (0,_reactivity_deriveds_js__WEBPACK_IMPORTED_MODULE_2__.derived)(() => {
      let changed = false;
      const props = context.s;
      for (const key in props) {
        if (props[key] !== prev[key]) {
          prev[key] = props[key];
          changed = true;
        }
      }
      if (changed) version++;
      return version;
    });
    props = () => (0,_runtime_js__WEBPACK_IMPORTED_MODULE_4__.get)(d);
  }

  // beforeUpdate
  if (callbacks.b.length) {
    (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_3__.user_pre_effect)(() => {
      observe_all(context, props);
      (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.run_all)(callbacks.b);
    });
  }

  // onMount (must run before afterUpdate)
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_3__.user_effect)(() => {
    const fns = (0,_runtime_js__WEBPACK_IMPORTED_MODULE_4__.untrack)(() => callbacks.m.map(_shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.run));
    return () => {
      for (const fn of fns) {
        if (typeof fn === 'function') {
          fn();
        }
      }
    };
  });

  // afterUpdate
  if (callbacks.a.length) {
    (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_3__.user_effect)(() => {
      observe_all(context, props);
      (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.run_all)(callbacks.a);
    });
  }
}

/**
 * Invoke the getter of all signals associated with a component
 * so they can be registered to the effect this function is called in.
 * @param {ComponentContextLegacy} context
 * @param {(() => void)} props
 */
function observe_all(context, props) {
  if (context.l.s) {
    for (const signal of context.l.s) (0,_runtime_js__WEBPACK_IMPORTED_MODULE_4__.get)(signal);
  }
  props();
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/legacy/misc.js":
/*!************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/legacy/misc.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   add_legacy_event_listener: () => (/* binding */ add_legacy_event_listener),
/* harmony export */   bubble_event: () => (/* binding */ bubble_event),
/* harmony export */   reactive_import: () => (/* binding */ reactive_import),
/* harmony export */   update_legacy_props: () => (/* binding */ update_legacy_props)
/* harmony export */ });
/* harmony import */ var _reactivity_sources_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../reactivity/sources.js */ "../svelte/packages/svelte/src/internal/client/reactivity/sources.js");
/* harmony import */ var _runtime_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../runtime.js */ "../svelte/packages/svelte/src/internal/client/runtime.js");
/* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../shared/utils.js */ "../svelte/packages/svelte/src/internal/shared/utils.js");




/**
 * Under some circumstances, imports may be reactive in legacy mode. In that case,
 * they should be using `reactive_import` as part of the transformation
 * @param {() => any} fn
 */
function reactive_import(fn) {
  var s = (0,_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_0__.source)(0);
  return function () {
    if (arguments.length === 1) {
      (0,_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_0__.set)(s, (0,_runtime_js__WEBPACK_IMPORTED_MODULE_1__.get)(s) + 1);
      return arguments[0];
    } else {
      (0,_runtime_js__WEBPACK_IMPORTED_MODULE_1__.get)(s);
      return fn();
    }
  };
}

/**
 * @this {any}
 * @param {Record<string, unknown>} $$props
 * @param {Event} event
 * @returns {void}
 */
function bubble_event($$props, event) {
  var events = /** @type {Record<string, Function[] | Function>} */$$props.$$events?.[event.type];
  var callbacks = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.is_array)(events) ? events.slice() : events == null ? [] : [events];
  for (var fn of callbacks) {
    // Preserve "this" context
    fn.call(this, event);
  }
}

/**
 * Used to simulate `$on` on a component instance when `compatibility.componentApi === 4`
 * @param {Record<string, any>} $$props
 * @param {string} event_name
 * @param {Function} event_callback
 */
function add_legacy_event_listener($$props, event_name, event_callback) {
  $$props.$$events ||= {};
  $$props.$$events[event_name] ||= [];
  $$props.$$events[event_name].push(event_callback);
}

/**
 * Used to simulate `$set` on a component instance when `compatibility.componentApi === 4`.
 * Needs component accessors so that it can call the setter of the prop. Therefore doesn't
 * work for updating props in `$$props` or `$$restProps`.
 * @this {Record<string, any>}
 * @param {Record<string, any>} $$new_props
 */
function update_legacy_props($$new_props) {
  for (var key in $$new_props) {
    if (key in this) {
      this[key] = $$new_props[key];
    }
  }
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/operations.js":
/*!***********************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/operations.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $document: () => (/* binding */ $document),
/* harmony export */   $window: () => (/* binding */ $window),
/* harmony export */   child: () => (/* binding */ child),
/* harmony export */   clear_text_content: () => (/* binding */ clear_text_content),
/* harmony export */   create_text: () => (/* binding */ create_text),
/* harmony export */   first_child: () => (/* binding */ first_child),
/* harmony export */   get_first_child: () => (/* binding */ get_first_child),
/* harmony export */   get_next_sibling: () => (/* binding */ get_next_sibling),
/* harmony export */   init_operations: () => (/* binding */ init_operations),
/* harmony export */   is_firefox: () => (/* binding */ is_firefox),
/* harmony export */   sibling: () => (/* binding */ sibling)
/* harmony export */ });
/* harmony import */ var _hydration_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hydration.js */ "../svelte/packages/svelte/src/internal/client/dom/hydration.js");
/* harmony import */ var esm_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! esm-env */ "../svelte/node_modules/.pnpm/esm-env@1.2.1/node_modules/esm-env/index.js");
/* harmony import */ var _dev_equality_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dev/equality.js */ "../svelte/packages/svelte/src/internal/client/dev/equality.js");
/* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../shared/utils.js */ "../svelte/packages/svelte/src/internal/shared/utils.js");
/** @import { TemplateNode } from '#client' */





// export these for reference in the compiled code, making global name deduplication unnecessary
/** @type {Window} */
var $window;

/** @type {Document} */
var $document;

/** @type {boolean} */
var is_firefox;

/** @type {() => Node | null} */
var first_child_getter;
/** @type {() => Node | null} */
var next_sibling_getter;

/**
 * Initialize these lazily to avoid issues when using the runtime in a server context
 * where these globals are not available while avoiding a separate server entry point
 */
function init_operations() {
  if ($window !== undefined) {
    return;
  }
  $window = window;
  $document = document;
  is_firefox = /Firefox/.test(navigator.userAgent);
  var element_prototype = Element.prototype;
  var node_prototype = Node.prototype;

  // @ts-ignore
  first_child_getter = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_3__.get_descriptor)(node_prototype, 'firstChild').get;
  // @ts-ignore
  next_sibling_getter = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_3__.get_descriptor)(node_prototype, 'nextSibling').get;

  // the following assignments improve perf of lookups on DOM nodes
  // @ts-expect-error
  element_prototype.__click = undefined;
  // @ts-expect-error
  element_prototype.__className = '';
  // @ts-expect-error
  element_prototype.__attributes = null;
  // @ts-expect-error
  element_prototype.__styles = null;
  // @ts-expect-error
  element_prototype.__e = undefined;

  // @ts-expect-error
  Text.prototype.__t = undefined;
  if (esm_env__WEBPACK_IMPORTED_MODULE_1__.DEV) {
    // @ts-expect-error
    element_prototype.__svelte_meta = null;
    (0,_dev_equality_js__WEBPACK_IMPORTED_MODULE_2__.init_array_prototype_warnings)();
  }
}

/**
 * @param {string} value
 * @returns {Text}
 */
function create_text(value = '') {
  return document.createTextNode(value);
}

/**
 * @template {Node} N
 * @param {N} node
 * @returns {Node | null}
 */
/*@__NO_SIDE_EFFECTS__*/
function get_first_child(node) {
  return first_child_getter.call(node);
}

/**
 * @template {Node} N
 * @param {N} node
 * @returns {Node | null}
 */
/*@__NO_SIDE_EFFECTS__*/
function get_next_sibling(node) {
  return next_sibling_getter.call(node);
}

/**
 * Don't mark this as side-effect-free, hydration needs to walk all nodes
 * @template {Node} N
 * @param {N} node
 * @param {boolean} is_text
 * @returns {Node | null}
 */
function child(node, is_text) {
  if (!_hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrating) {
    return get_first_child(node);
  }
  var child = /** @type {TemplateNode} */get_first_child(_hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrate_node);

  // Child can be null if we have an element with a single child, like `<p>{text}</p>`, where `text` is empty
  if (child === null) {
    child = _hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrate_node.appendChild(create_text());
  } else if (is_text && child.nodeType !== 3) {
    var text = create_text();
    child?.before(text);
    (0,_hydration_js__WEBPACK_IMPORTED_MODULE_0__.set_hydrate_node)(text);
    return text;
  }
  (0,_hydration_js__WEBPACK_IMPORTED_MODULE_0__.set_hydrate_node)(child);
  return child;
}

/**
 * Don't mark this as side-effect-free, hydration needs to walk all nodes
 * @param {DocumentFragment | TemplateNode[]} fragment
 * @param {boolean} is_text
 * @returns {Node | null}
 */
function first_child(fragment, is_text) {
  if (!_hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrating) {
    // when not hydrating, `fragment` is a `DocumentFragment` (the result of calling `open_frag`)
    var first = /** @type {DocumentFragment} */get_first_child(/** @type {Node} */fragment);

    // TODO prevent user comments with the empty string when preserveComments is true
    if (first instanceof Comment && first.data === '') return get_next_sibling(first);
    return first;
  }

  // if an {expression} is empty during SSR, there might be no
  // text node to hydrate — we must therefore create one
  if (is_text && _hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrate_node?.nodeType !== 3) {
    var text = create_text();
    _hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrate_node?.before(text);
    (0,_hydration_js__WEBPACK_IMPORTED_MODULE_0__.set_hydrate_node)(text);
    return text;
  }
  return _hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrate_node;
}

/**
 * Don't mark this as side-effect-free, hydration needs to walk all nodes
 * @param {TemplateNode} node
 * @param {number} count
 * @param {boolean} is_text
 * @returns {Node | null}
 */
function sibling(node, count = 1, is_text = false) {
  let next_sibling = _hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrating ? _hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrate_node : node;
  var last_sibling;
  while (count--) {
    last_sibling = next_sibling;
    next_sibling = /** @type {TemplateNode} */get_next_sibling(next_sibling);
  }
  if (!_hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrating) {
    return next_sibling;
  }
  var type = next_sibling?.nodeType;

  // if a sibling {expression} is empty during SSR, there might be no
  // text node to hydrate — we must therefore create one
  if (is_text && type !== 3) {
    var text = create_text();
    // If the next sibling is `null` and we're handling text then it's because
    // the SSR content was empty for the text, so we need to generate a new text
    // node and insert it after the last sibling
    if (next_sibling === null) {
      last_sibling?.after(text);
    } else {
      next_sibling.before(text);
    }
    (0,_hydration_js__WEBPACK_IMPORTED_MODULE_0__.set_hydrate_node)(text);
    return text;
  }
  (0,_hydration_js__WEBPACK_IMPORTED_MODULE_0__.set_hydrate_node)(next_sibling);
  return /** @type {TemplateNode} */next_sibling;
}

/**
 * @template {Node} N
 * @param {N} node
 * @returns {void}
 */
function clear_text_content(node) {
  node.textContent = '';
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/reconciler.js":
/*!***********************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/reconciler.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   create_fragment_from_html: () => (/* binding */ create_fragment_from_html)
/* harmony export */ });
/** @param {string} html */
function create_fragment_from_html(html) {
  var elem = document.createElement('template');
  elem.innerHTML = html;
  return elem.content;
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/task.js":
/*!*****************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/task.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   flush_tasks: () => (/* binding */ flush_tasks),
/* harmony export */   queue_idle_task: () => (/* binding */ queue_idle_task),
/* harmony export */   queue_micro_task: () => (/* binding */ queue_micro_task),
/* harmony export */   request_idle_callback: () => (/* binding */ request_idle_callback)
/* harmony export */ });
/* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/utils.js */ "../svelte/packages/svelte/src/internal/shared/utils.js");


// Fallback for when requestIdleCallback is not available
const request_idle_callback = typeof requestIdleCallback === 'undefined' ? (/** @type {() => void} */cb) => setTimeout(cb, 1) : requestIdleCallback;
let is_micro_task_queued = false;
let is_idle_task_queued = false;

/** @type {Array<() => void>} */
let current_queued_micro_tasks = [];
/** @type {Array<() => void>} */
let current_queued_idle_tasks = [];
function process_micro_tasks() {
  is_micro_task_queued = false;
  const tasks = current_queued_micro_tasks.slice();
  current_queued_micro_tasks = [];
  (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.run_all)(tasks);
}
function process_idle_tasks() {
  is_idle_task_queued = false;
  const tasks = current_queued_idle_tasks.slice();
  current_queued_idle_tasks = [];
  (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.run_all)(tasks);
}

/**
 * @param {() => void} fn
 */
function queue_micro_task(fn) {
  if (!is_micro_task_queued) {
    is_micro_task_queued = true;
    queueMicrotask(process_micro_tasks);
  }
  current_queued_micro_tasks.push(fn);
}

/**
 * @param {() => void} fn
 */
function queue_idle_task(fn) {
  if (!is_idle_task_queued) {
    is_idle_task_queued = true;
    request_idle_callback(process_idle_tasks);
  }
  current_queued_idle_tasks.push(fn);
}

/**
 * Synchronously run any queued tasks.
 */
function flush_tasks() {
  if (is_micro_task_queued) {
    process_micro_tasks();
  }
  if (is_idle_task_queued) {
    process_idle_tasks();
  }
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/dom/template.js":
/*!*********************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/dom/template.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   append: () => (/* binding */ append),
/* harmony export */   assign_nodes: () => (/* binding */ assign_nodes),
/* harmony export */   comment: () => (/* binding */ comment),
/* harmony export */   mathml_template: () => (/* binding */ mathml_template),
/* harmony export */   ns_template: () => (/* binding */ ns_template),
/* harmony export */   props_id: () => (/* binding */ props_id),
/* harmony export */   reset_props_id: () => (/* binding */ reset_props_id),
/* harmony export */   svg_template_with_script: () => (/* binding */ svg_template_with_script),
/* harmony export */   template: () => (/* binding */ template),
/* harmony export */   template_with_script: () => (/* binding */ template_with_script),
/* harmony export */   text: () => (/* binding */ text)
/* harmony export */ });
/* harmony import */ var _hydration_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hydration.js */ "../svelte/packages/svelte/src/internal/client/dom/hydration.js");
/* harmony import */ var _operations_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./operations.js */ "../svelte/packages/svelte/src/internal/client/dom/operations.js");
/* harmony import */ var _reconciler_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./reconciler.js */ "../svelte/packages/svelte/src/internal/client/dom/reconciler.js");
/* harmony import */ var _runtime_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../runtime.js */ "../svelte/packages/svelte/src/internal/client/runtime.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../constants.js */ "../svelte/packages/svelte/src/constants.js");
/** @import { Effect, TemplateNode } from '#client' */






/**
 * @param {TemplateNode} start
 * @param {TemplateNode | null} end
 */
function assign_nodes(start, end) {
  var effect = /** @type {Effect} */_runtime_js__WEBPACK_IMPORTED_MODULE_3__.active_effect;
  if (effect.nodes_start === null) {
    effect.nodes_start = start;
    effect.nodes_end = end;
  }
}

/**
 * @param {string} content
 * @param {number} flags
 * @returns {() => Node | Node[]}
 */
/*#__NO_SIDE_EFFECTS__*/
function template(content, flags) {
  var is_fragment = (flags & _constants_js__WEBPACK_IMPORTED_MODULE_4__.TEMPLATE_FRAGMENT) !== 0;
  var use_import_node = (flags & _constants_js__WEBPACK_IMPORTED_MODULE_4__.TEMPLATE_USE_IMPORT_NODE) !== 0;

  /** @type {Node} */
  var node;

  /**
   * Whether or not the first item is a text/element node. If not, we need to
   * create an additional comment node to act as `effect.nodes.start`
   */
  var has_start = !content.startsWith('<!>');
  return () => {
    if (_hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrating) {
      assign_nodes(_hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrate_node, null);
      return _hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrate_node;
    }
    if (node === undefined) {
      node = (0,_reconciler_js__WEBPACK_IMPORTED_MODULE_2__.create_fragment_from_html)(has_start ? content : '<!>' + content);
      if (!is_fragment) node = /** @type {Node} */(0,_operations_js__WEBPACK_IMPORTED_MODULE_1__.get_first_child)(node);
    }
    var clone = /** @type {TemplateNode} */
    use_import_node || _operations_js__WEBPACK_IMPORTED_MODULE_1__.is_firefox ? document.importNode(node, true) : node.cloneNode(true);
    if (is_fragment) {
      var start = /** @type {TemplateNode} */(0,_operations_js__WEBPACK_IMPORTED_MODULE_1__.get_first_child)(clone);
      var end = /** @type {TemplateNode} */clone.lastChild;
      assign_nodes(start, end);
    } else {
      assign_nodes(clone, clone);
    }
    return clone;
  };
}

/**
 * @param {string} content
 * @param {number} flags
 * @returns {() => Node | Node[]}
 */
/*#__NO_SIDE_EFFECTS__*/
function template_with_script(content, flags) {
  var fn = template(content, flags);
  return () => run_scripts(/** @type {Element | DocumentFragment} */fn());
}

/**
 * @param {string} content
 * @param {number} flags
 * @param {'svg' | 'math'} ns
 * @returns {() => Node | Node[]}
 */
/*#__NO_SIDE_EFFECTS__*/
function ns_template(content, flags, ns = 'svg') {
  /**
   * Whether or not the first item is a text/element node. If not, we need to
   * create an additional comment node to act as `effect.nodes.start`
   */
  var has_start = !content.startsWith('<!>');
  var is_fragment = (flags & _constants_js__WEBPACK_IMPORTED_MODULE_4__.TEMPLATE_FRAGMENT) !== 0;
  var wrapped = `<${ns}>${has_start ? content : '<!>' + content}</${ns}>`;

  /** @type {Element | DocumentFragment} */
  var node;
  return () => {
    if (_hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrating) {
      assign_nodes(_hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrate_node, null);
      return _hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrate_node;
    }
    if (!node) {
      var fragment = /** @type {DocumentFragment} */(0,_reconciler_js__WEBPACK_IMPORTED_MODULE_2__.create_fragment_from_html)(wrapped);
      var root = /** @type {Element} */(0,_operations_js__WEBPACK_IMPORTED_MODULE_1__.get_first_child)(fragment);
      if (is_fragment) {
        node = document.createDocumentFragment();
        while ((0,_operations_js__WEBPACK_IMPORTED_MODULE_1__.get_first_child)(root)) {
          node.appendChild(/** @type {Node} */(0,_operations_js__WEBPACK_IMPORTED_MODULE_1__.get_first_child)(root));
        }
      } else {
        node = /** @type {Element} */(0,_operations_js__WEBPACK_IMPORTED_MODULE_1__.get_first_child)(root);
      }
    }
    var clone = /** @type {TemplateNode} */node.cloneNode(true);
    if (is_fragment) {
      var start = /** @type {TemplateNode} */(0,_operations_js__WEBPACK_IMPORTED_MODULE_1__.get_first_child)(clone);
      var end = /** @type {TemplateNode} */clone.lastChild;
      assign_nodes(start, end);
    } else {
      assign_nodes(clone, clone);
    }
    return clone;
  };
}

/**
 * @param {string} content
 * @param {number} flags
 * @returns {() => Node | Node[]}
 */
/*#__NO_SIDE_EFFECTS__*/
function svg_template_with_script(content, flags) {
  var fn = ns_template(content, flags);
  return () => run_scripts(/** @type {Element | DocumentFragment} */fn());
}

/**
 * @param {string} content
 * @param {number} flags
 * @returns {() => Node | Node[]}
 */
/*#__NO_SIDE_EFFECTS__*/
function mathml_template(content, flags) {
  return ns_template(content, flags, 'math');
}

/**
 * Creating a document fragment from HTML that contains script tags will not execute
 * the scripts. We need to replace the script tags with new ones so that they are executed.
 * @param {Element | DocumentFragment} node
 * @returns {Node | Node[]}
 */
function run_scripts(node) {
  // scripts were SSR'd, in which case they will run
  if (_hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrating) return node;
  const is_fragment = node.nodeType === 11;
  const scripts = /** @type {HTMLElement} */node.tagName === 'SCRIPT' ? [(/** @type {HTMLScriptElement} */node)] : node.querySelectorAll('script');
  const effect = /** @type {Effect} */_runtime_js__WEBPACK_IMPORTED_MODULE_3__.active_effect;
  for (const script of scripts) {
    const clone = document.createElement('script');
    for (var attribute of script.attributes) {
      clone.setAttribute(attribute.name, attribute.value);
    }
    clone.textContent = script.textContent;

    // The script has changed - if it's at the edges, the effect now points at dead nodes
    if (is_fragment ? node.firstChild === script : node === script) {
      effect.nodes_start = clone;
    }
    if (is_fragment ? node.lastChild === script : node === script) {
      effect.nodes_end = clone;
    }
    script.replaceWith(clone);
  }
  return node;
}

/**
 * Don't mark this as side-effect-free, hydration needs to walk all nodes
 * @param {any} value
 */
function text(value = '') {
  if (!_hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrating) {
    var t = (0,_operations_js__WEBPACK_IMPORTED_MODULE_1__.create_text)(value + '');
    assign_nodes(t, t);
    return t;
  }
  var node = _hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrate_node;
  if (node.nodeType !== 3) {
    // if an {expression} is empty during SSR, we need to insert an empty text node
    node.before(node = (0,_operations_js__WEBPACK_IMPORTED_MODULE_1__.create_text)());
    (0,_hydration_js__WEBPACK_IMPORTED_MODULE_0__.set_hydrate_node)(node);
  }
  assign_nodes(node, node);
  return node;
}
function comment() {
  // we're not delegating to `template` here for performance reasons
  if (_hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrating) {
    assign_nodes(_hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrate_node, null);
    return _hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrate_node;
  }
  var frag = document.createDocumentFragment();
  var start = document.createComment('');
  var anchor = (0,_operations_js__WEBPACK_IMPORTED_MODULE_1__.create_text)();
  frag.append(start, anchor);
  assign_nodes(start, anchor);
  return frag;
}

/**
 * Assign the created (or in hydration mode, traversed) dom elements to the current block
 * and insert the elements into the dom (in client mode).
 * @param {Text | Comment | Element} anchor
 * @param {DocumentFragment | Element} dom
 */
function append(anchor, dom) {
  if (_hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrating) {
    /** @type {Effect} */_runtime_js__WEBPACK_IMPORTED_MODULE_3__.active_effect.nodes_end = _hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrate_node;
    (0,_hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrate_next)();
    return;
  }
  if (anchor === null) {
    // edge case — void `<svelte:element>` with content
    return;
  }
  anchor.before(/** @type {Node} */dom);
}
let uid = 1;
function reset_props_id() {
  uid = 1;
}

/**
 * Create (or hydrate) an unique UID for the component instance.
 */
function props_id() {
  if (_hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrating && _hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrate_node && _hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrate_node.nodeType === 8 && _hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrate_node.textContent?.startsWith('#s')) {
    const id = _hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrate_node.textContent.substring(1);
    (0,_hydration_js__WEBPACK_IMPORTED_MODULE_0__.hydrate_next)();
    return id;
  }
  return 'c' + uid++;
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/errors.js":
/*!***************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/errors.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   bind_invalid_checkbox_value: () => (/* binding */ bind_invalid_checkbox_value),
/* harmony export */   bind_invalid_export: () => (/* binding */ bind_invalid_export),
/* harmony export */   bind_not_bindable: () => (/* binding */ bind_not_bindable),
/* harmony export */   component_api_changed: () => (/* binding */ component_api_changed),
/* harmony export */   component_api_invalid_new: () => (/* binding */ component_api_invalid_new),
/* harmony export */   derived_references_self: () => (/* binding */ derived_references_self),
/* harmony export */   each_key_duplicate: () => (/* binding */ each_key_duplicate),
/* harmony export */   effect_in_teardown: () => (/* binding */ effect_in_teardown),
/* harmony export */   effect_in_unowned_derived: () => (/* binding */ effect_in_unowned_derived),
/* harmony export */   effect_orphan: () => (/* binding */ effect_orphan),
/* harmony export */   effect_update_depth_exceeded: () => (/* binding */ effect_update_depth_exceeded),
/* harmony export */   hydration_failed: () => (/* binding */ hydration_failed),
/* harmony export */   invalid_snippet: () => (/* binding */ invalid_snippet),
/* harmony export */   lifecycle_legacy_only: () => (/* binding */ lifecycle_legacy_only),
/* harmony export */   props_invalid_value: () => (/* binding */ props_invalid_value),
/* harmony export */   props_rest_readonly: () => (/* binding */ props_rest_readonly),
/* harmony export */   rune_outside_svelte: () => (/* binding */ rune_outside_svelte),
/* harmony export */   state_descriptors_fixed: () => (/* binding */ state_descriptors_fixed),
/* harmony export */   state_prototype_fixed: () => (/* binding */ state_prototype_fixed),
/* harmony export */   state_unsafe_local_read: () => (/* binding */ state_unsafe_local_read),
/* harmony export */   state_unsafe_mutation: () => (/* binding */ state_unsafe_mutation)
/* harmony export */ });
/* harmony import */ var esm_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! esm-env */ "../svelte/node_modules/.pnpm/esm-env@1.2.1/node_modules/esm-env/index.js");
/* This file is generated by scripts/process-messages/index.js. Do not edit! */



/**
 * Using `bind:value` together with a checkbox input is not allowed. Use `bind:checked` instead
 * @returns {never}
 */
function bind_invalid_checkbox_value() {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    const error = new Error(`bind_invalid_checkbox_value\nUsing \`bind:value\` together with a checkbox input is not allowed. Use \`bind:checked\` instead\nhttps://svelte.dev/e/bind_invalid_checkbox_value`);
    error.name = 'Svelte error';
    throw error;
  } else {
    throw new Error(`https://svelte.dev/e/bind_invalid_checkbox_value`);
  }
}

/**
 * Component %component% has an export named `%key%` that a consumer component is trying to access using `bind:%key%`, which is disallowed. Instead, use `bind:this` (e.g. `<%name% bind:this={component} />`) and then access the property on the bound component instance (e.g. `component.%key%`)
 * @param {string} component
 * @param {string} key
 * @param {string} name
 * @returns {never}
 */
function bind_invalid_export(component, key, name) {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    const error = new Error(`bind_invalid_export\nComponent ${component} has an export named \`${key}\` that a consumer component is trying to access using \`bind:${key}\`, which is disallowed. Instead, use \`bind:this\` (e.g. \`<${name} bind:this={component} />\`) and then access the property on the bound component instance (e.g. \`component.${key}\`)\nhttps://svelte.dev/e/bind_invalid_export`);
    error.name = 'Svelte error';
    throw error;
  } else {
    throw new Error(`https://svelte.dev/e/bind_invalid_export`);
  }
}

/**
 * A component is attempting to bind to a non-bindable property `%key%` belonging to %component% (i.e. `<%name% bind:%key%={...}>`). To mark a property as bindable: `let { %key% = $bindable() } = $props()`
 * @param {string} key
 * @param {string} component
 * @param {string} name
 * @returns {never}
 */
function bind_not_bindable(key, component, name) {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    const error = new Error(`bind_not_bindable\nA component is attempting to bind to a non-bindable property \`${key}\` belonging to ${component} (i.e. \`<${name} bind:${key}={...}>\`). To mark a property as bindable: \`let { ${key} = $bindable() } = $props()\`\nhttps://svelte.dev/e/bind_not_bindable`);
    error.name = 'Svelte error';
    throw error;
  } else {
    throw new Error(`https://svelte.dev/e/bind_not_bindable`);
  }
}

/**
 * %parent% called `%method%` on an instance of %component%, which is no longer valid in Svelte 5
 * @param {string} parent
 * @param {string} method
 * @param {string} component
 * @returns {never}
 */
function component_api_changed(parent, method, component) {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    const error = new Error(`component_api_changed\n${parent} called \`${method}\` on an instance of ${component}, which is no longer valid in Svelte 5\nhttps://svelte.dev/e/component_api_changed`);
    error.name = 'Svelte error';
    throw error;
  } else {
    throw new Error(`https://svelte.dev/e/component_api_changed`);
  }
}

/**
 * Attempted to instantiate %component% with `new %name%`, which is no longer valid in Svelte 5. If this component is not under your control, set the `compatibility.componentApi` compiler option to `4` to keep it working.
 * @param {string} component
 * @param {string} name
 * @returns {never}
 */
function component_api_invalid_new(component, name) {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    const error = new Error(`component_api_invalid_new\nAttempted to instantiate ${component} with \`new ${name}\`, which is no longer valid in Svelte 5. If this component is not under your control, set the \`compatibility.componentApi\` compiler option to \`4\` to keep it working.\nhttps://svelte.dev/e/component_api_invalid_new`);
    error.name = 'Svelte error';
    throw error;
  } else {
    throw new Error(`https://svelte.dev/e/component_api_invalid_new`);
  }
}

/**
 * A derived value cannot reference itself recursively
 * @returns {never}
 */
function derived_references_self() {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    const error = new Error(`derived_references_self\nA derived value cannot reference itself recursively\nhttps://svelte.dev/e/derived_references_self`);
    error.name = 'Svelte error';
    throw error;
  } else {
    throw new Error(`https://svelte.dev/e/derived_references_self`);
  }
}

/**
 * Keyed each block has duplicate key `%value%` at indexes %a% and %b%
 * @param {string} a
 * @param {string} b
 * @param {string | undefined | null} [value]
 * @returns {never}
 */
function each_key_duplicate(a, b, value) {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    const error = new Error(`each_key_duplicate\n${value ? `Keyed each block has duplicate key \`${value}\` at indexes ${a} and ${b}` : `Keyed each block has duplicate key at indexes ${a} and ${b}`}\nhttps://svelte.dev/e/each_key_duplicate`);
    error.name = 'Svelte error';
    throw error;
  } else {
    throw new Error(`https://svelte.dev/e/each_key_duplicate`);
  }
}

/**
 * `%rune%` cannot be used inside an effect cleanup function
 * @param {string} rune
 * @returns {never}
 */
function effect_in_teardown(rune) {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    const error = new Error(`effect_in_teardown\n\`${rune}\` cannot be used inside an effect cleanup function\nhttps://svelte.dev/e/effect_in_teardown`);
    error.name = 'Svelte error';
    throw error;
  } else {
    throw new Error(`https://svelte.dev/e/effect_in_teardown`);
  }
}

/**
 * Effect cannot be created inside a `$derived` value that was not itself created inside an effect
 * @returns {never}
 */
function effect_in_unowned_derived() {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    const error = new Error(`effect_in_unowned_derived\nEffect cannot be created inside a \`$derived\` value that was not itself created inside an effect\nhttps://svelte.dev/e/effect_in_unowned_derived`);
    error.name = 'Svelte error';
    throw error;
  } else {
    throw new Error(`https://svelte.dev/e/effect_in_unowned_derived`);
  }
}

/**
 * `%rune%` can only be used inside an effect (e.g. during component initialisation)
 * @param {string} rune
 * @returns {never}
 */
function effect_orphan(rune) {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    const error = new Error(`effect_orphan\n\`${rune}\` can only be used inside an effect (e.g. during component initialisation)\nhttps://svelte.dev/e/effect_orphan`);
    error.name = 'Svelte error';
    throw error;
  } else {
    throw new Error(`https://svelte.dev/e/effect_orphan`);
  }
}

/**
 * Maximum update depth exceeded. This can happen when a reactive block or effect repeatedly sets a new value. Svelte limits the number of nested updates to prevent infinite loops
 * @returns {never}
 */
function effect_update_depth_exceeded() {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    const error = new Error(`effect_update_depth_exceeded\nMaximum update depth exceeded. This can happen when a reactive block or effect repeatedly sets a new value. Svelte limits the number of nested updates to prevent infinite loops\nhttps://svelte.dev/e/effect_update_depth_exceeded`);
    error.name = 'Svelte error';
    throw error;
  } else {
    throw new Error(`https://svelte.dev/e/effect_update_depth_exceeded`);
  }
}

/**
 * Failed to hydrate the application
 * @returns {never}
 */
function hydration_failed() {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    const error = new Error(`hydration_failed\nFailed to hydrate the application\nhttps://svelte.dev/e/hydration_failed`);
    error.name = 'Svelte error';
    throw error;
  } else {
    throw new Error(`https://svelte.dev/e/hydration_failed`);
  }
}

/**
 * Could not `{@render}` snippet due to the expression being `null` or `undefined`. Consider using optional chaining `{@render snippet?.()}`
 * @returns {never}
 */
function invalid_snippet() {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    const error = new Error(`invalid_snippet\nCould not \`{@render}\` snippet due to the expression being \`null\` or \`undefined\`. Consider using optional chaining \`{@render snippet?.()}\`\nhttps://svelte.dev/e/invalid_snippet`);
    error.name = 'Svelte error';
    throw error;
  } else {
    throw new Error(`https://svelte.dev/e/invalid_snippet`);
  }
}

/**
 * `%name%(...)` cannot be used in runes mode
 * @param {string} name
 * @returns {never}
 */
function lifecycle_legacy_only(name) {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    const error = new Error(`lifecycle_legacy_only\n\`${name}(...)\` cannot be used in runes mode\nhttps://svelte.dev/e/lifecycle_legacy_only`);
    error.name = 'Svelte error';
    throw error;
  } else {
    throw new Error(`https://svelte.dev/e/lifecycle_legacy_only`);
  }
}

/**
 * Cannot do `bind:%key%={undefined}` when `%key%` has a fallback value
 * @param {string} key
 * @returns {never}
 */
function props_invalid_value(key) {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    const error = new Error(`props_invalid_value\nCannot do \`bind:${key}={undefined}\` when \`${key}\` has a fallback value\nhttps://svelte.dev/e/props_invalid_value`);
    error.name = 'Svelte error';
    throw error;
  } else {
    throw new Error(`https://svelte.dev/e/props_invalid_value`);
  }
}

/**
 * Rest element properties of `$props()` such as `%property%` are readonly
 * @param {string} property
 * @returns {never}
 */
function props_rest_readonly(property) {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    const error = new Error(`props_rest_readonly\nRest element properties of \`$props()\` such as \`${property}\` are readonly\nhttps://svelte.dev/e/props_rest_readonly`);
    error.name = 'Svelte error';
    throw error;
  } else {
    throw new Error(`https://svelte.dev/e/props_rest_readonly`);
  }
}

/**
 * The `%rune%` rune is only available inside `.svelte` and `.svelte.js/ts` files
 * @param {string} rune
 * @returns {never}
 */
function rune_outside_svelte(rune) {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    const error = new Error(`rune_outside_svelte\nThe \`${rune}\` rune is only available inside \`.svelte\` and \`.svelte.js/ts\` files\nhttps://svelte.dev/e/rune_outside_svelte`);
    error.name = 'Svelte error';
    throw error;
  } else {
    throw new Error(`https://svelte.dev/e/rune_outside_svelte`);
  }
}

/**
 * Property descriptors defined on `$state` objects must contain `value` and always be `enumerable`, `configurable` and `writable`.
 * @returns {never}
 */
function state_descriptors_fixed() {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    const error = new Error(`state_descriptors_fixed\nProperty descriptors defined on \`$state\` objects must contain \`value\` and always be \`enumerable\`, \`configurable\` and \`writable\`.\nhttps://svelte.dev/e/state_descriptors_fixed`);
    error.name = 'Svelte error';
    throw error;
  } else {
    throw new Error(`https://svelte.dev/e/state_descriptors_fixed`);
  }
}

/**
 * Cannot set prototype of `$state` object
 * @returns {never}
 */
function state_prototype_fixed() {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    const error = new Error(`state_prototype_fixed\nCannot set prototype of \`$state\` object\nhttps://svelte.dev/e/state_prototype_fixed`);
    error.name = 'Svelte error';
    throw error;
  } else {
    throw new Error(`https://svelte.dev/e/state_prototype_fixed`);
  }
}

/**
 * Reading state that was created inside the same derived is forbidden. Consider using `untrack` to read locally created state
 * @returns {never}
 */
function state_unsafe_local_read() {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    const error = new Error(`state_unsafe_local_read\nReading state that was created inside the same derived is forbidden. Consider using \`untrack\` to read locally created state\nhttps://svelte.dev/e/state_unsafe_local_read`);
    error.name = 'Svelte error';
    throw error;
  } else {
    throw new Error(`https://svelte.dev/e/state_unsafe_local_read`);
  }
}

/**
 * Updating state inside a derived or a template expression is forbidden. If the value should not be reactive, declare it without `$state`
 * @returns {never}
 */
function state_unsafe_mutation() {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    const error = new Error(`state_unsafe_mutation\nUpdating state inside a derived or a template expression is forbidden. If the value should not be reactive, declare it without \`$state\`\nhttps://svelte.dev/e/state_unsafe_mutation`);
    error.name = 'Svelte error';
    throw error;
  } else {
    throw new Error(`https://svelte.dev/e/state_unsafe_mutation`);
  }
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/index.js":
/*!**************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ADD_OWNER: () => (/* reexport safe */ _dev_ownership_js__WEBPACK_IMPORTED_MODULE_6__.ADD_OWNER),
/* harmony export */   FILENAME: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.FILENAME),
/* harmony export */   HMR: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.HMR),
/* harmony export */   NAMESPACE_SVG: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.NAMESPACE_SVG),
/* harmony export */   action: () => (/* reexport safe */ _dom_elements_actions_js__WEBPACK_IMPORTED_MODULE_22__.action),
/* harmony export */   add_legacy_event_listener: () => (/* reexport safe */ _dom_legacy_misc_js__WEBPACK_IMPORTED_MODULE_42__.add_legacy_event_listener),
/* harmony export */   add_locations: () => (/* reexport safe */ _dev_elements_js__WEBPACK_IMPORTED_MODULE_4__.add_locations),
/* harmony export */   add_owner: () => (/* reexport safe */ _dev_ownership_js__WEBPACK_IMPORTED_MODULE_6__.add_owner),
/* harmony export */   add_owner_effect: () => (/* reexport safe */ _dev_ownership_js__WEBPACK_IMPORTED_MODULE_6__.add_owner_effect),
/* harmony export */   add_owner_to_class: () => (/* reexport safe */ _dev_ownership_js__WEBPACK_IMPORTED_MODULE_6__.add_owner_to_class),
/* harmony export */   animation: () => (/* reexport safe */ _dom_elements_transitions_js__WEBPACK_IMPORTED_MODULE_28__.animation),
/* harmony export */   append: () => (/* reexport safe */ _dom_template_js__WEBPACK_IMPORTED_MODULE_43__.append),
/* harmony export */   append_styles: () => (/* reexport safe */ _dom_css_js__WEBPACK_IMPORTED_MODULE_21__.append_styles),
/* harmony export */   apply: () => (/* reexport safe */ _dom_elements_events_js__WEBPACK_IMPORTED_MODULE_25__.apply),
/* harmony export */   assign: () => (/* reexport safe */ _dev_assign_js__WEBPACK_IMPORTED_MODULE_2__.assign),
/* harmony export */   assign_and: () => (/* reexport safe */ _dev_assign_js__WEBPACK_IMPORTED_MODULE_2__.assign_and),
/* harmony export */   assign_nullish: () => (/* reexport safe */ _dev_assign_js__WEBPACK_IMPORTED_MODULE_2__.assign_nullish),
/* harmony export */   assign_or: () => (/* reexport safe */ _dev_assign_js__WEBPACK_IMPORTED_MODULE_2__.assign_or),
/* harmony export */   attr: () => (/* reexport safe */ _shared_attributes_js__WEBPACK_IMPORTED_MODULE_57__.attr),
/* harmony export */   autofocus: () => (/* reexport safe */ _dom_elements_misc_js__WEBPACK_IMPORTED_MODULE_26__.autofocus),
/* harmony export */   "await": () => (/* reexport safe */ _dom_blocks_await_js__WEBPACK_IMPORTED_MODULE_10__.await_block),
/* harmony export */   bind_active_element: () => (/* reexport safe */ _dom_elements_bindings_document_js__WEBPACK_IMPORTED_MODULE_29__.bind_active_element),
/* harmony export */   bind_buffered: () => (/* reexport safe */ _dom_elements_bindings_media_js__WEBPACK_IMPORTED_MODULE_31__.bind_buffered),
/* harmony export */   bind_checked: () => (/* reexport safe */ _dom_elements_bindings_input_js__WEBPACK_IMPORTED_MODULE_30__.bind_checked),
/* harmony export */   bind_content_editable: () => (/* reexport safe */ _dom_elements_bindings_universal_js__WEBPACK_IMPORTED_MODULE_37__.bind_content_editable),
/* harmony export */   bind_current_time: () => (/* reexport safe */ _dom_elements_bindings_media_js__WEBPACK_IMPORTED_MODULE_31__.bind_current_time),
/* harmony export */   bind_element_size: () => (/* reexport safe */ _dom_elements_bindings_size_js__WEBPACK_IMPORTED_MODULE_35__.bind_element_size),
/* harmony export */   bind_ended: () => (/* reexport safe */ _dom_elements_bindings_media_js__WEBPACK_IMPORTED_MODULE_31__.bind_ended),
/* harmony export */   bind_files: () => (/* reexport safe */ _dom_elements_bindings_input_js__WEBPACK_IMPORTED_MODULE_30__.bind_files),
/* harmony export */   bind_focused: () => (/* reexport safe */ _dom_elements_bindings_universal_js__WEBPACK_IMPORTED_MODULE_37__.bind_focused),
/* harmony export */   bind_group: () => (/* reexport safe */ _dom_elements_bindings_input_js__WEBPACK_IMPORTED_MODULE_30__.bind_group),
/* harmony export */   bind_muted: () => (/* reexport safe */ _dom_elements_bindings_media_js__WEBPACK_IMPORTED_MODULE_31__.bind_muted),
/* harmony export */   bind_online: () => (/* reexport safe */ _dom_elements_bindings_navigator_js__WEBPACK_IMPORTED_MODULE_32__.bind_online),
/* harmony export */   bind_paused: () => (/* reexport safe */ _dom_elements_bindings_media_js__WEBPACK_IMPORTED_MODULE_31__.bind_paused),
/* harmony export */   bind_playback_rate: () => (/* reexport safe */ _dom_elements_bindings_media_js__WEBPACK_IMPORTED_MODULE_31__.bind_playback_rate),
/* harmony export */   bind_played: () => (/* reexport safe */ _dom_elements_bindings_media_js__WEBPACK_IMPORTED_MODULE_31__.bind_played),
/* harmony export */   bind_prop: () => (/* reexport safe */ _dom_elements_bindings_props_js__WEBPACK_IMPORTED_MODULE_33__.bind_prop),
/* harmony export */   bind_property: () => (/* reexport safe */ _dom_elements_bindings_universal_js__WEBPACK_IMPORTED_MODULE_37__.bind_property),
/* harmony export */   bind_ready_state: () => (/* reexport safe */ _dom_elements_bindings_media_js__WEBPACK_IMPORTED_MODULE_31__.bind_ready_state),
/* harmony export */   bind_resize_observer: () => (/* reexport safe */ _dom_elements_bindings_size_js__WEBPACK_IMPORTED_MODULE_35__.bind_resize_observer),
/* harmony export */   bind_seekable: () => (/* reexport safe */ _dom_elements_bindings_media_js__WEBPACK_IMPORTED_MODULE_31__.bind_seekable),
/* harmony export */   bind_seeking: () => (/* reexport safe */ _dom_elements_bindings_media_js__WEBPACK_IMPORTED_MODULE_31__.bind_seeking),
/* harmony export */   bind_select_value: () => (/* reexport safe */ _dom_elements_bindings_select_js__WEBPACK_IMPORTED_MODULE_34__.bind_select_value),
/* harmony export */   bind_this: () => (/* reexport safe */ _dom_elements_bindings_this_js__WEBPACK_IMPORTED_MODULE_36__.bind_this),
/* harmony export */   bind_value: () => (/* reexport safe */ _dom_elements_bindings_input_js__WEBPACK_IMPORTED_MODULE_30__.bind_value),
/* harmony export */   bind_volume: () => (/* reexport safe */ _dom_elements_bindings_media_js__WEBPACK_IMPORTED_MODULE_31__.bind_volume),
/* harmony export */   bind_window_scroll: () => (/* reexport safe */ _dom_elements_bindings_window_js__WEBPACK_IMPORTED_MODULE_38__.bind_window_scroll),
/* harmony export */   bind_window_size: () => (/* reexport safe */ _dom_elements_bindings_window_js__WEBPACK_IMPORTED_MODULE_38__.bind_window_size),
/* harmony export */   boundary: () => (/* reexport safe */ _dom_blocks_boundary_js__WEBPACK_IMPORTED_MODULE_49__.boundary),
/* harmony export */   bubble_event: () => (/* reexport safe */ _dom_legacy_misc_js__WEBPACK_IMPORTED_MODULE_42__.bubble_event),
/* harmony export */   check_target: () => (/* reexport safe */ _dev_legacy_js__WEBPACK_IMPORTED_MODULE_7__.check_target),
/* harmony export */   child: () => (/* reexport safe */ _dom_operations_js__WEBPACK_IMPORTED_MODULE_56__.child),
/* harmony export */   cleanup_styles: () => (/* reexport safe */ _dev_css_js__WEBPACK_IMPORTED_MODULE_3__.cleanup_styles),
/* harmony export */   clsx: () => (/* reexport safe */ _shared_attributes_js__WEBPACK_IMPORTED_MODULE_57__.clsx),
/* harmony export */   comment: () => (/* reexport safe */ _dom_template_js__WEBPACK_IMPORTED_MODULE_43__.comment),
/* harmony export */   component: () => (/* reexport safe */ _dom_blocks_svelte_component_js__WEBPACK_IMPORTED_MODULE_18__.component),
/* harmony export */   create_custom_element: () => (/* reexport safe */ _dom_elements_custom_element_js__WEBPACK_IMPORTED_MODULE_55__.create_custom_element),
/* harmony export */   css_props: () => (/* reexport safe */ _dom_blocks_css_props_js__WEBPACK_IMPORTED_MODULE_13__.css_props),
/* harmony export */   deep_read: () => (/* reexport safe */ _runtime_js__WEBPACK_IMPORTED_MODULE_51__.deep_read),
/* harmony export */   deep_read_state: () => (/* reexport safe */ _runtime_js__WEBPACK_IMPORTED_MODULE_51__.deep_read_state),
/* harmony export */   delegate: () => (/* reexport safe */ _dom_elements_events_js__WEBPACK_IMPORTED_MODULE_25__.delegate),
/* harmony export */   derived: () => (/* reexport safe */ _reactivity_deriveds_js__WEBPACK_IMPORTED_MODULE_44__.derived),
/* harmony export */   derived_safe_equal: () => (/* reexport safe */ _reactivity_deriveds_js__WEBPACK_IMPORTED_MODULE_44__.derived_safe_equal),
/* harmony export */   document: () => (/* reexport safe */ _dom_operations_js__WEBPACK_IMPORTED_MODULE_56__.$document),
/* harmony export */   each: () => (/* reexport safe */ _dom_blocks_each_js__WEBPACK_IMPORTED_MODULE_14__.each),
/* harmony export */   effect: () => (/* reexport safe */ _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_45__.effect),
/* harmony export */   effect_root: () => (/* reexport safe */ _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_45__.effect_root),
/* harmony export */   effect_tracking: () => (/* reexport safe */ _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_45__.effect_tracking),
/* harmony export */   element: () => (/* reexport safe */ _dom_blocks_svelte_element_js__WEBPACK_IMPORTED_MODULE_19__.element),
/* harmony export */   equals: () => (/* reexport safe */ _dev_equality_js__WEBPACK_IMPORTED_MODULE_61__.equals),
/* harmony export */   event: () => (/* reexport safe */ _dom_elements_events_js__WEBPACK_IMPORTED_MODULE_25__.event),
/* harmony export */   exclude_from_object: () => (/* reexport safe */ _runtime_js__WEBPACK_IMPORTED_MODULE_51__.exclude_from_object),
/* harmony export */   fallback: () => (/* reexport safe */ _shared_utils_js__WEBPACK_IMPORTED_MODULE_59__.fallback),
/* harmony export */   first_child: () => (/* reexport safe */ _dom_operations_js__WEBPACK_IMPORTED_MODULE_56__.first_child),
/* harmony export */   flush_sync: () => (/* reexport safe */ _runtime_js__WEBPACK_IMPORTED_MODULE_51__.flush_sync),
/* harmony export */   get: () => (/* reexport safe */ _runtime_js__WEBPACK_IMPORTED_MODULE_51__.get),
/* harmony export */   head: () => (/* reexport safe */ _dom_blocks_svelte_head_js__WEBPACK_IMPORTED_MODULE_20__.head),
/* harmony export */   hmr: () => (/* reexport safe */ _dev_hmr_js__WEBPACK_IMPORTED_MODULE_5__.hmr),
/* harmony export */   html: () => (/* reexport safe */ _dom_blocks_html_js__WEBPACK_IMPORTED_MODULE_15__.html),
/* harmony export */   hydrate_template: () => (/* reexport safe */ _dom_hydration_js__WEBPACK_IMPORTED_MODULE_39__.hydrate_template),
/* harmony export */   "if": () => (/* reexport safe */ _dom_blocks_if_js__WEBPACK_IMPORTED_MODULE_11__.if_block),
/* harmony export */   index: () => (/* reexport safe */ _dom_blocks_each_js__WEBPACK_IMPORTED_MODULE_14__.index),
/* harmony export */   init: () => (/* reexport safe */ _dom_legacy_lifecycle_js__WEBPACK_IMPORTED_MODULE_41__.init),
/* harmony export */   init_select: () => (/* reexport safe */ _dom_elements_bindings_select_js__WEBPACK_IMPORTED_MODULE_34__.init_select),
/* harmony export */   inspect: () => (/* reexport safe */ _dev_inspect_js__WEBPACK_IMPORTED_MODULE_9__.inspect),
/* harmony export */   invalid_default_snippet: () => (/* reexport safe */ _shared_validate_js__WEBPACK_IMPORTED_MODULE_60__.invalid_default_snippet),
/* harmony export */   invalidate_inner_signals: () => (/* reexport safe */ _runtime_js__WEBPACK_IMPORTED_MODULE_51__.invalidate_inner_signals),
/* harmony export */   invalidate_store: () => (/* reexport safe */ _reactivity_store_js__WEBPACK_IMPORTED_MODULE_48__.invalidate_store),
/* harmony export */   key: () => (/* reexport safe */ _dom_blocks_key_js__WEBPACK_IMPORTED_MODULE_12__.key_block),
/* harmony export */   legacy_api: () => (/* reexport safe */ _dev_legacy_js__WEBPACK_IMPORTED_MODULE_7__.legacy_api),
/* harmony export */   legacy_pre_effect: () => (/* reexport safe */ _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_45__.legacy_pre_effect),
/* harmony export */   legacy_pre_effect_reset: () => (/* reexport safe */ _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_45__.legacy_pre_effect_reset),
/* harmony export */   legacy_rest_props: () => (/* reexport safe */ _reactivity_props_js__WEBPACK_IMPORTED_MODULE_47__.legacy_rest_props),
/* harmony export */   log_if_contains_state: () => (/* reexport safe */ _dev_console_log_js__WEBPACK_IMPORTED_MODULE_62__.log_if_contains_state),
/* harmony export */   mark_module_end: () => (/* reexport safe */ _dev_ownership_js__WEBPACK_IMPORTED_MODULE_6__.mark_module_end),
/* harmony export */   mark_module_start: () => (/* reexport safe */ _dev_ownership_js__WEBPACK_IMPORTED_MODULE_6__.mark_module_start),
/* harmony export */   mark_store_binding: () => (/* reexport safe */ _reactivity_store_js__WEBPACK_IMPORTED_MODULE_48__.mark_store_binding),
/* harmony export */   mathml_template: () => (/* reexport safe */ _dom_template_js__WEBPACK_IMPORTED_MODULE_43__.mathml_template),
/* harmony export */   mutable_state: () => (/* reexport safe */ _reactivity_sources_js__WEBPACK_IMPORTED_MODULE_46__.mutable_state),
/* harmony export */   mutate: () => (/* reexport safe */ _reactivity_sources_js__WEBPACK_IMPORTED_MODULE_46__.mutate),
/* harmony export */   next: () => (/* reexport safe */ _dom_hydration_js__WEBPACK_IMPORTED_MODULE_39__.next),
/* harmony export */   noop: () => (/* reexport safe */ _shared_utils_js__WEBPACK_IMPORTED_MODULE_59__.noop),
/* harmony export */   ns_template: () => (/* reexport safe */ _dom_template_js__WEBPACK_IMPORTED_MODULE_43__.ns_template),
/* harmony export */   once: () => (/* reexport safe */ _dom_legacy_event_modifiers_js__WEBPACK_IMPORTED_MODULE_40__.once),
/* harmony export */   pop: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_1__.pop),
/* harmony export */   preventDefault: () => (/* reexport safe */ _dom_legacy_event_modifiers_js__WEBPACK_IMPORTED_MODULE_40__.preventDefault),
/* harmony export */   prop: () => (/* reexport safe */ _reactivity_props_js__WEBPACK_IMPORTED_MODULE_47__.prop),
/* harmony export */   props_id: () => (/* reexport safe */ _dom_template_js__WEBPACK_IMPORTED_MODULE_43__.props_id),
/* harmony export */   proxy: () => (/* reexport safe */ _proxy_js__WEBPACK_IMPORTED_MODULE_54__.proxy),
/* harmony export */   push: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_1__.push),
/* harmony export */   raf: () => (/* reexport safe */ _timing_js__WEBPACK_IMPORTED_MODULE_53__.raf),
/* harmony export */   reactive_import: () => (/* reexport safe */ _dom_legacy_misc_js__WEBPACK_IMPORTED_MODULE_42__.reactive_import),
/* harmony export */   remove_input_defaults: () => (/* reexport safe */ _dom_elements_attributes_js__WEBPACK_IMPORTED_MODULE_23__.remove_input_defaults),
/* harmony export */   remove_textarea_child: () => (/* reexport safe */ _dom_elements_misc_js__WEBPACK_IMPORTED_MODULE_26__.remove_textarea_child),
/* harmony export */   render_effect: () => (/* reexport safe */ _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_45__.render_effect),
/* harmony export */   replay_events: () => (/* reexport safe */ _dom_elements_events_js__WEBPACK_IMPORTED_MODULE_25__.replay_events),
/* harmony export */   reset: () => (/* reexport safe */ _dom_hydration_js__WEBPACK_IMPORTED_MODULE_39__.reset),
/* harmony export */   rest_props: () => (/* reexport safe */ _reactivity_props_js__WEBPACK_IMPORTED_MODULE_47__.rest_props),
/* harmony export */   safe_get: () => (/* reexport safe */ _runtime_js__WEBPACK_IMPORTED_MODULE_51__.safe_get),
/* harmony export */   sanitize_slots: () => (/* reexport safe */ _dom_blocks_slot_js__WEBPACK_IMPORTED_MODULE_16__.sanitize_slots),
/* harmony export */   select_option: () => (/* reexport safe */ _dom_elements_bindings_select_js__WEBPACK_IMPORTED_MODULE_34__.select_option),
/* harmony export */   self: () => (/* reexport safe */ _dom_legacy_event_modifiers_js__WEBPACK_IMPORTED_MODULE_40__.self),
/* harmony export */   set: () => (/* reexport safe */ _reactivity_sources_js__WEBPACK_IMPORTED_MODULE_46__.set),
/* harmony export */   set_attribute: () => (/* reexport safe */ _dom_elements_attributes_js__WEBPACK_IMPORTED_MODULE_23__.set_attribute),
/* harmony export */   set_attributes: () => (/* reexport safe */ _dom_elements_attributes_js__WEBPACK_IMPORTED_MODULE_23__.set_attributes),
/* harmony export */   set_checked: () => (/* reexport safe */ _dom_elements_attributes_js__WEBPACK_IMPORTED_MODULE_23__.set_checked),
/* harmony export */   set_class: () => (/* reexport safe */ _dom_elements_class_js__WEBPACK_IMPORTED_MODULE_24__.set_class),
/* harmony export */   set_custom_element_data: () => (/* reexport safe */ _dom_elements_attributes_js__WEBPACK_IMPORTED_MODULE_23__.set_custom_element_data),
/* harmony export */   set_default_checked: () => (/* reexport safe */ _dom_elements_attributes_js__WEBPACK_IMPORTED_MODULE_23__.set_default_checked),
/* harmony export */   set_default_value: () => (/* reexport safe */ _dom_elements_attributes_js__WEBPACK_IMPORTED_MODULE_23__.set_default_value),
/* harmony export */   set_mathml_class: () => (/* reexport safe */ _dom_elements_class_js__WEBPACK_IMPORTED_MODULE_24__.set_mathml_class),
/* harmony export */   set_selected: () => (/* reexport safe */ _dom_elements_attributes_js__WEBPACK_IMPORTED_MODULE_23__.set_selected),
/* harmony export */   set_style: () => (/* reexport safe */ _dom_elements_style_js__WEBPACK_IMPORTED_MODULE_27__.set_style),
/* harmony export */   set_svg_class: () => (/* reexport safe */ _dom_elements_class_js__WEBPACK_IMPORTED_MODULE_24__.set_svg_class),
/* harmony export */   set_text: () => (/* reexport safe */ _render_js__WEBPACK_IMPORTED_MODULE_50__.set_text),
/* harmony export */   set_value: () => (/* reexport safe */ _dom_elements_attributes_js__WEBPACK_IMPORTED_MODULE_23__.set_value),
/* harmony export */   set_xlink_attribute: () => (/* reexport safe */ _dom_elements_attributes_js__WEBPACK_IMPORTED_MODULE_23__.set_xlink_attribute),
/* harmony export */   setup_stores: () => (/* reexport safe */ _reactivity_store_js__WEBPACK_IMPORTED_MODULE_48__.setup_stores),
/* harmony export */   sibling: () => (/* reexport safe */ _dom_operations_js__WEBPACK_IMPORTED_MODULE_56__.sibling),
/* harmony export */   skip_ownership_validation: () => (/* reexport safe */ _dev_ownership_js__WEBPACK_IMPORTED_MODULE_6__.skip_ownership_validation),
/* harmony export */   slot: () => (/* reexport safe */ _dom_blocks_slot_js__WEBPACK_IMPORTED_MODULE_16__.slot),
/* harmony export */   snapshot: () => (/* reexport safe */ _shared_clone_js__WEBPACK_IMPORTED_MODULE_58__.snapshot),
/* harmony export */   snippet: () => (/* reexport safe */ _dom_blocks_snippet_js__WEBPACK_IMPORTED_MODULE_17__.snippet),
/* harmony export */   spread_props: () => (/* reexport safe */ _reactivity_props_js__WEBPACK_IMPORTED_MODULE_47__.spread_props),
/* harmony export */   state: () => (/* reexport safe */ _reactivity_sources_js__WEBPACK_IMPORTED_MODULE_46__.state),
/* harmony export */   stopImmediatePropagation: () => (/* reexport safe */ _dom_legacy_event_modifiers_js__WEBPACK_IMPORTED_MODULE_40__.stopImmediatePropagation),
/* harmony export */   stopPropagation: () => (/* reexport safe */ _dom_legacy_event_modifiers_js__WEBPACK_IMPORTED_MODULE_40__.stopPropagation),
/* harmony export */   store_get: () => (/* reexport safe */ _reactivity_store_js__WEBPACK_IMPORTED_MODULE_48__.store_get),
/* harmony export */   store_mutate: () => (/* reexport safe */ _reactivity_store_js__WEBPACK_IMPORTED_MODULE_48__.store_mutate),
/* harmony export */   store_set: () => (/* reexport safe */ _reactivity_store_js__WEBPACK_IMPORTED_MODULE_48__.store_set),
/* harmony export */   store_unsub: () => (/* reexport safe */ _reactivity_store_js__WEBPACK_IMPORTED_MODULE_48__.store_unsub),
/* harmony export */   strict_equals: () => (/* reexport safe */ _dev_equality_js__WEBPACK_IMPORTED_MODULE_61__.strict_equals),
/* harmony export */   svg_template_with_script: () => (/* reexport safe */ _dom_template_js__WEBPACK_IMPORTED_MODULE_43__.svg_template_with_script),
/* harmony export */   template: () => (/* reexport safe */ _dom_template_js__WEBPACK_IMPORTED_MODULE_43__.template),
/* harmony export */   template_effect: () => (/* reexport safe */ _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_45__.template_effect),
/* harmony export */   template_with_script: () => (/* reexport safe */ _dom_template_js__WEBPACK_IMPORTED_MODULE_43__.template_with_script),
/* harmony export */   text: () => (/* reexport safe */ _dom_template_js__WEBPACK_IMPORTED_MODULE_43__.text),
/* harmony export */   tick: () => (/* reexport safe */ _runtime_js__WEBPACK_IMPORTED_MODULE_51__.tick),
/* harmony export */   toggle_class: () => (/* reexport safe */ _dom_elements_class_js__WEBPACK_IMPORTED_MODULE_24__.toggle_class),
/* harmony export */   trace: () => (/* reexport safe */ _dev_tracing_js__WEBPACK_IMPORTED_MODULE_8__.trace),
/* harmony export */   transition: () => (/* reexport safe */ _dom_elements_transitions_js__WEBPACK_IMPORTED_MODULE_28__.transition),
/* harmony export */   trusted: () => (/* reexport safe */ _dom_legacy_event_modifiers_js__WEBPACK_IMPORTED_MODULE_40__.trusted),
/* harmony export */   untrack: () => (/* reexport safe */ _runtime_js__WEBPACK_IMPORTED_MODULE_51__.untrack),
/* harmony export */   update: () => (/* reexport safe */ _reactivity_sources_js__WEBPACK_IMPORTED_MODULE_46__.update),
/* harmony export */   update_legacy_props: () => (/* reexport safe */ _dom_legacy_misc_js__WEBPACK_IMPORTED_MODULE_42__.update_legacy_props),
/* harmony export */   update_pre: () => (/* reexport safe */ _reactivity_sources_js__WEBPACK_IMPORTED_MODULE_46__.update_pre),
/* harmony export */   update_pre_prop: () => (/* reexport safe */ _reactivity_props_js__WEBPACK_IMPORTED_MODULE_47__.update_pre_prop),
/* harmony export */   update_pre_store: () => (/* reexport safe */ _reactivity_store_js__WEBPACK_IMPORTED_MODULE_48__.update_pre_store),
/* harmony export */   update_prop: () => (/* reexport safe */ _reactivity_props_js__WEBPACK_IMPORTED_MODULE_47__.update_prop),
/* harmony export */   update_store: () => (/* reexport safe */ _reactivity_store_js__WEBPACK_IMPORTED_MODULE_48__.update_store),
/* harmony export */   user_effect: () => (/* reexport safe */ _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_45__.user_effect),
/* harmony export */   user_pre_effect: () => (/* reexport safe */ _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_45__.user_pre_effect),
/* harmony export */   validate_binding: () => (/* reexport safe */ _validate_js__WEBPACK_IMPORTED_MODULE_52__.validate_binding),
/* harmony export */   validate_dynamic_element_tag: () => (/* reexport safe */ _shared_validate_js__WEBPACK_IMPORTED_MODULE_60__.validate_dynamic_element_tag),
/* harmony export */   validate_each_keys: () => (/* reexport safe */ _validate_js__WEBPACK_IMPORTED_MODULE_52__.validate_each_keys),
/* harmony export */   validate_store: () => (/* reexport safe */ _shared_validate_js__WEBPACK_IMPORTED_MODULE_60__.validate_store),
/* harmony export */   validate_void_dynamic_element: () => (/* reexport safe */ _shared_validate_js__WEBPACK_IMPORTED_MODULE_60__.validate_void_dynamic_element),
/* harmony export */   window: () => (/* reexport safe */ _dom_operations_js__WEBPACK_IMPORTED_MODULE_56__.$window),
/* harmony export */   wrap_snippet: () => (/* reexport safe */ _dom_blocks_snippet_js__WEBPACK_IMPORTED_MODULE_17__.wrap_snippet)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../constants.js */ "../svelte/packages/svelte/src/constants.js");
/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./context.js */ "../svelte/packages/svelte/src/internal/client/context.js");
/* harmony import */ var _dev_assign_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dev/assign.js */ "../svelte/packages/svelte/src/internal/client/dev/assign.js");
/* harmony import */ var _dev_css_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dev/css.js */ "../svelte/packages/svelte/src/internal/client/dev/css.js");
/* harmony import */ var _dev_elements_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dev/elements.js */ "../svelte/packages/svelte/src/internal/client/dev/elements.js");
/* harmony import */ var _dev_hmr_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dev/hmr.js */ "../svelte/packages/svelte/src/internal/client/dev/hmr.js");
/* harmony import */ var _dev_ownership_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./dev/ownership.js */ "../svelte/packages/svelte/src/internal/client/dev/ownership.js");
/* harmony import */ var _dev_legacy_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dev/legacy.js */ "../svelte/packages/svelte/src/internal/client/dev/legacy.js");
/* harmony import */ var _dev_tracing_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./dev/tracing.js */ "../svelte/packages/svelte/src/internal/client/dev/tracing.js");
/* harmony import */ var _dev_inspect_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./dev/inspect.js */ "../svelte/packages/svelte/src/internal/client/dev/inspect.js");
/* harmony import */ var _dom_blocks_await_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./dom/blocks/await.js */ "../svelte/packages/svelte/src/internal/client/dom/blocks/await.js");
/* harmony import */ var _dom_blocks_if_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./dom/blocks/if.js */ "../svelte/packages/svelte/src/internal/client/dom/blocks/if.js");
/* harmony import */ var _dom_blocks_key_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./dom/blocks/key.js */ "../svelte/packages/svelte/src/internal/client/dom/blocks/key.js");
/* harmony import */ var _dom_blocks_css_props_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./dom/blocks/css-props.js */ "../svelte/packages/svelte/src/internal/client/dom/blocks/css-props.js");
/* harmony import */ var _dom_blocks_each_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./dom/blocks/each.js */ "../svelte/packages/svelte/src/internal/client/dom/blocks/each.js");
/* harmony import */ var _dom_blocks_html_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./dom/blocks/html.js */ "../svelte/packages/svelte/src/internal/client/dom/blocks/html.js");
/* harmony import */ var _dom_blocks_slot_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./dom/blocks/slot.js */ "../svelte/packages/svelte/src/internal/client/dom/blocks/slot.js");
/* harmony import */ var _dom_blocks_snippet_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./dom/blocks/snippet.js */ "../svelte/packages/svelte/src/internal/client/dom/blocks/snippet.js");
/* harmony import */ var _dom_blocks_svelte_component_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./dom/blocks/svelte-component.js */ "../svelte/packages/svelte/src/internal/client/dom/blocks/svelte-component.js");
/* harmony import */ var _dom_blocks_svelte_element_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./dom/blocks/svelte-element.js */ "../svelte/packages/svelte/src/internal/client/dom/blocks/svelte-element.js");
/* harmony import */ var _dom_blocks_svelte_head_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./dom/blocks/svelte-head.js */ "../svelte/packages/svelte/src/internal/client/dom/blocks/svelte-head.js");
/* harmony import */ var _dom_css_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./dom/css.js */ "../svelte/packages/svelte/src/internal/client/dom/css.js");
/* harmony import */ var _dom_elements_actions_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./dom/elements/actions.js */ "../svelte/packages/svelte/src/internal/client/dom/elements/actions.js");
/* harmony import */ var _dom_elements_attributes_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./dom/elements/attributes.js */ "../svelte/packages/svelte/src/internal/client/dom/elements/attributes.js");
/* harmony import */ var _dom_elements_class_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./dom/elements/class.js */ "../svelte/packages/svelte/src/internal/client/dom/elements/class.js");
/* harmony import */ var _dom_elements_events_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./dom/elements/events.js */ "../svelte/packages/svelte/src/internal/client/dom/elements/events.js");
/* harmony import */ var _dom_elements_misc_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./dom/elements/misc.js */ "../svelte/packages/svelte/src/internal/client/dom/elements/misc.js");
/* harmony import */ var _dom_elements_style_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./dom/elements/style.js */ "../svelte/packages/svelte/src/internal/client/dom/elements/style.js");
/* harmony import */ var _dom_elements_transitions_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./dom/elements/transitions.js */ "../svelte/packages/svelte/src/internal/client/dom/elements/transitions.js");
/* harmony import */ var _dom_elements_bindings_document_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./dom/elements/bindings/document.js */ "../svelte/packages/svelte/src/internal/client/dom/elements/bindings/document.js");
/* harmony import */ var _dom_elements_bindings_input_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./dom/elements/bindings/input.js */ "../svelte/packages/svelte/src/internal/client/dom/elements/bindings/input.js");
/* harmony import */ var _dom_elements_bindings_media_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./dom/elements/bindings/media.js */ "../svelte/packages/svelte/src/internal/client/dom/elements/bindings/media.js");
/* harmony import */ var _dom_elements_bindings_navigator_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./dom/elements/bindings/navigator.js */ "../svelte/packages/svelte/src/internal/client/dom/elements/bindings/navigator.js");
/* harmony import */ var _dom_elements_bindings_props_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./dom/elements/bindings/props.js */ "../svelte/packages/svelte/src/internal/client/dom/elements/bindings/props.js");
/* harmony import */ var _dom_elements_bindings_select_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./dom/elements/bindings/select.js */ "../svelte/packages/svelte/src/internal/client/dom/elements/bindings/select.js");
/* harmony import */ var _dom_elements_bindings_size_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./dom/elements/bindings/size.js */ "../svelte/packages/svelte/src/internal/client/dom/elements/bindings/size.js");
/* harmony import */ var _dom_elements_bindings_this_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./dom/elements/bindings/this.js */ "../svelte/packages/svelte/src/internal/client/dom/elements/bindings/this.js");
/* harmony import */ var _dom_elements_bindings_universal_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./dom/elements/bindings/universal.js */ "../svelte/packages/svelte/src/internal/client/dom/elements/bindings/universal.js");
/* harmony import */ var _dom_elements_bindings_window_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./dom/elements/bindings/window.js */ "../svelte/packages/svelte/src/internal/client/dom/elements/bindings/window.js");
/* harmony import */ var _dom_hydration_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./dom/hydration.js */ "../svelte/packages/svelte/src/internal/client/dom/hydration.js");
/* harmony import */ var _dom_legacy_event_modifiers_js__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./dom/legacy/event-modifiers.js */ "../svelte/packages/svelte/src/internal/client/dom/legacy/event-modifiers.js");
/* harmony import */ var _dom_legacy_lifecycle_js__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./dom/legacy/lifecycle.js */ "../svelte/packages/svelte/src/internal/client/dom/legacy/lifecycle.js");
/* harmony import */ var _dom_legacy_misc_js__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./dom/legacy/misc.js */ "../svelte/packages/svelte/src/internal/client/dom/legacy/misc.js");
/* harmony import */ var _dom_template_js__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./dom/template.js */ "../svelte/packages/svelte/src/internal/client/dom/template.js");
/* harmony import */ var _reactivity_deriveds_js__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./reactivity/deriveds.js */ "../svelte/packages/svelte/src/internal/client/reactivity/deriveds.js");
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _reactivity_sources_js__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./reactivity/sources.js */ "../svelte/packages/svelte/src/internal/client/reactivity/sources.js");
/* harmony import */ var _reactivity_props_js__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./reactivity/props.js */ "../svelte/packages/svelte/src/internal/client/reactivity/props.js");
/* harmony import */ var _reactivity_store_js__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./reactivity/store.js */ "../svelte/packages/svelte/src/internal/client/reactivity/store.js");
/* harmony import */ var _dom_blocks_boundary_js__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./dom/blocks/boundary.js */ "../svelte/packages/svelte/src/internal/client/dom/blocks/boundary.js");
/* harmony import */ var _render_js__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./render.js */ "../svelte/packages/svelte/src/internal/client/render.js");
/* harmony import */ var _runtime_js__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./runtime.js */ "../svelte/packages/svelte/src/internal/client/runtime.js");
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./validate.js */ "../svelte/packages/svelte/src/internal/client/validate.js");
/* harmony import */ var _timing_js__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./timing.js */ "../svelte/packages/svelte/src/internal/client/timing.js");
/* harmony import */ var _proxy_js__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./proxy.js */ "../svelte/packages/svelte/src/internal/client/proxy.js");
/* harmony import */ var _dom_elements_custom_element_js__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./dom/elements/custom-element.js */ "../svelte/packages/svelte/src/internal/client/dom/elements/custom-element.js");
/* harmony import */ var _dom_operations_js__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./dom/operations.js */ "../svelte/packages/svelte/src/internal/client/dom/operations.js");
/* harmony import */ var _shared_attributes_js__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ../shared/attributes.js */ "../svelte/packages/svelte/src/internal/shared/attributes.js");
/* harmony import */ var _shared_clone_js__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ../shared/clone.js */ "../svelte/packages/svelte/src/internal/shared/clone.js");
/* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ../shared/utils.js */ "../svelte/packages/svelte/src/internal/shared/utils.js");
/* harmony import */ var _shared_validate_js__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ../shared/validate.js */ "../svelte/packages/svelte/src/internal/shared/validate.js");
/* harmony import */ var _dev_equality_js__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./dev/equality.js */ "../svelte/packages/svelte/src/internal/client/dev/equality.js");
/* harmony import */ var _dev_console_log_js__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./dev/console-log.js */ "../svelte/packages/svelte/src/internal/client/dev/console-log.js");
































































/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/loop.js":
/*!*************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/loop.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   loop: () => (/* binding */ loop)
/* harmony export */ });
/* harmony import */ var _timing_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./timing.js */ "../svelte/packages/svelte/src/internal/client/timing.js");
/** @import { TaskCallback, Task, TaskEntry } from '#client' */


// TODO move this into timing.js where it probably belongs

/**
 * @returns {void}
 */
function run_tasks() {
  // use `raf.now()` instead of the `requestAnimationFrame` callback argument, because
  // otherwise things can get wonky https://github.com/sveltejs/svelte/pull/14541
  const now = _timing_js__WEBPACK_IMPORTED_MODULE_0__.raf.now();
  _timing_js__WEBPACK_IMPORTED_MODULE_0__.raf.tasks.forEach(task => {
    if (!task.c(now)) {
      _timing_js__WEBPACK_IMPORTED_MODULE_0__.raf.tasks.delete(task);
      task.f();
    }
  });
  if (_timing_js__WEBPACK_IMPORTED_MODULE_0__.raf.tasks.size !== 0) {
    _timing_js__WEBPACK_IMPORTED_MODULE_0__.raf.tick(run_tasks);
  }
}

/**
 * Creates a new task that runs on each raf frame
 * until it returns a falsy value or is aborted
 * @param {TaskCallback} callback
 * @returns {Task}
 */
function loop(callback) {
  /** @type {TaskEntry} */
  let task;
  if (_timing_js__WEBPACK_IMPORTED_MODULE_0__.raf.tasks.size === 0) {
    _timing_js__WEBPACK_IMPORTED_MODULE_0__.raf.tick(run_tasks);
  }
  return {
    promise: new Promise(fulfill => {
      _timing_js__WEBPACK_IMPORTED_MODULE_0__.raf.tasks.add(task = {
        c: callback,
        f: fulfill
      });
    }),
    abort() {
      _timing_js__WEBPACK_IMPORTED_MODULE_0__.raf.tasks.delete(task);
    }
  };
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/proxy.js":
/*!**************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/proxy.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   get_proxied_value: () => (/* binding */ get_proxied_value),
/* harmony export */   is: () => (/* binding */ is),
/* harmony export */   proxy: () => (/* binding */ proxy)
/* harmony export */ });
/* harmony import */ var esm_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! esm-env */ "../svelte/node_modules/.pnpm/esm-env@1.2.1/node_modules/esm-env/index.js");
/* harmony import */ var _runtime_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./runtime.js */ "../svelte/packages/svelte/src/internal/client/runtime.js");
/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./context.js */ "../svelte/packages/svelte/src/internal/client/context.js");
/* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/utils.js */ "../svelte/packages/svelte/src/internal/shared/utils.js");
/* harmony import */ var _dev_ownership_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dev/ownership.js */ "../svelte/packages/svelte/src/internal/client/dev/ownership.js");
/* harmony import */ var _reactivity_sources_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./reactivity/sources.js */ "../svelte/packages/svelte/src/internal/client/reactivity/sources.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./constants.js */ "../svelte/packages/svelte/src/internal/client/constants.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../constants.js */ "../svelte/packages/svelte/src/constants.js");
/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./errors.js */ "../svelte/packages/svelte/src/internal/client/errors.js");
/* harmony import */ var _dev_tracing_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./dev/tracing.js */ "../svelte/packages/svelte/src/internal/client/dev/tracing.js");
/* harmony import */ var _flags_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../flags/index.js */ "../svelte/packages/svelte/src/internal/flags/index.js");
/** @import { ProxyMetadata, Source } from '#client' */












/**
 * @template T
 * @param {T} value
 * @param {ProxyMetadata | null} [parent]
 * @param {Source<T>} [prev] dev mode only
 * @returns {T}
 */
function proxy(value, parent = null, prev) {
  /** @type {Error | null} */
  var stack = null;
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV && _flags_index_js__WEBPACK_IMPORTED_MODULE_10__.tracing_mode_flag) {
    stack = (0,_dev_tracing_js__WEBPACK_IMPORTED_MODULE_9__.get_stack)('CreatedAt');
  }
  // if non-proxyable, or is already a proxy, return `value`
  if (typeof value !== 'object' || value === null || _constants_js__WEBPACK_IMPORTED_MODULE_6__.STATE_SYMBOL in value) {
    return value;
  }
  const prototype = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_3__.get_prototype_of)(value);
  if (prototype !== _shared_utils_js__WEBPACK_IMPORTED_MODULE_3__.object_prototype && prototype !== _shared_utils_js__WEBPACK_IMPORTED_MODULE_3__.array_prototype) {
    return value;
  }

  /** @type {Map<any, Source<any>>} */
  var sources = new Map();
  var is_proxied_array = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_3__.is_array)(value);
  var version = (0,_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_5__.source)(0);
  if (is_proxied_array) {
    // We need to create the length source eagerly to ensure that
    // mutations to the array are properly synced with our proxy
    sources.set('length', (0,_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_5__.source)(/** @type {any[]} */value.length, stack));
  }

  /** @type {ProxyMetadata} */
  var metadata;
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    metadata = {
      parent,
      owners: null
    };
    if (prev) {
      // Reuse owners from previous state; necessary because reassignment is not guaranteed to have correct component context.
      // If no previous proxy exists we play it safe and assume ownerless state
      // @ts-expect-error
      const prev_owners = prev.v?.[_constants_js__WEBPACK_IMPORTED_MODULE_6__.STATE_SYMBOL_METADATA]?.owners;
      metadata.owners = prev_owners ? new Set(prev_owners) : null;
    } else {
      metadata.owners = parent === null ? _context_js__WEBPACK_IMPORTED_MODULE_2__.component_context !== null ? new Set([_context_js__WEBPACK_IMPORTED_MODULE_2__.component_context.function]) : null : new Set();
    }
  }
  return new Proxy(/** @type {any} */value, {
    defineProperty(_, prop, descriptor) {
      if (!('value' in descriptor) || descriptor.configurable === false || descriptor.enumerable === false || descriptor.writable === false) {
        // we disallow non-basic descriptors, because unless they are applied to the
        // target object — which we avoid, so that state can be forked — we will run
        // afoul of the various invariants
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/getOwnPropertyDescriptor#invariants
        _errors_js__WEBPACK_IMPORTED_MODULE_8__.state_descriptors_fixed();
      }
      var s = sources.get(prop);
      if (s === undefined) {
        s = (0,_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_5__.source)(descriptor.value, stack);
        sources.set(prop, s);
      } else {
        (0,_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_5__.set)(s, proxy(descriptor.value, metadata));
      }
      return true;
    },
    deleteProperty(target, prop) {
      var s = sources.get(prop);
      if (s === undefined) {
        if (prop in target) {
          sources.set(prop, (0,_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_5__.source)(_constants_js__WEBPACK_IMPORTED_MODULE_7__.UNINITIALIZED, stack));
        }
      } else {
        // When working with arrays, we need to also ensure we update the length when removing
        // an indexed property
        if (is_proxied_array && typeof prop === 'string') {
          var ls = /** @type {Source<number>} */sources.get('length');
          var n = Number(prop);
          if (Number.isInteger(n) && n < ls.v) {
            (0,_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_5__.set)(ls, n);
          }
        }
        (0,_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_5__.set)(s, _constants_js__WEBPACK_IMPORTED_MODULE_7__.UNINITIALIZED);
        update_version(version);
      }
      return true;
    },
    get(target, prop, receiver) {
      if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV && prop === _constants_js__WEBPACK_IMPORTED_MODULE_6__.STATE_SYMBOL_METADATA) {
        return metadata;
      }
      if (prop === _constants_js__WEBPACK_IMPORTED_MODULE_6__.STATE_SYMBOL) {
        return value;
      }
      var s = sources.get(prop);
      var exists = prop in target;

      // create a source, but only if it's an own property and not a prototype property
      if (s === undefined && (!exists || (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_3__.get_descriptor)(target, prop)?.writable)) {
        s = (0,_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_5__.source)(proxy(exists ? target[prop] : _constants_js__WEBPACK_IMPORTED_MODULE_7__.UNINITIALIZED, metadata), stack);
        sources.set(prop, s);
      }
      if (s !== undefined) {
        var v = (0,_runtime_js__WEBPACK_IMPORTED_MODULE_1__.get)(s);

        // In case of something like `foo = bar.map(...)`, foo would have ownership
        // of the array itself, while the individual items would have ownership
        // of the component that created bar. That means if we later do `foo[0].baz = 42`,
        // we could get a false-positive ownership violation, since the two proxies
        // are not connected to each other via the parent metadata relationship.
        // For this reason, we need to widen the ownership of the children
        // upon access when we detect they are not connected.
        if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
          /** @type {ProxyMetadata | undefined} */
          var prop_metadata = v?.[_constants_js__WEBPACK_IMPORTED_MODULE_6__.STATE_SYMBOL_METADATA];
          if (prop_metadata && prop_metadata?.parent !== metadata) {
            (0,_dev_ownership_js__WEBPACK_IMPORTED_MODULE_4__.widen_ownership)(metadata, prop_metadata);
          }
        }
        return v === _constants_js__WEBPACK_IMPORTED_MODULE_7__.UNINITIALIZED ? undefined : v;
      }
      return Reflect.get(target, prop, receiver);
    },
    getOwnPropertyDescriptor(target, prop) {
      var descriptor = Reflect.getOwnPropertyDescriptor(target, prop);
      if (descriptor && 'value' in descriptor) {
        var s = sources.get(prop);
        if (s) descriptor.value = (0,_runtime_js__WEBPACK_IMPORTED_MODULE_1__.get)(s);
      } else if (descriptor === undefined) {
        var source = sources.get(prop);
        var value = source?.v;
        if (source !== undefined && value !== _constants_js__WEBPACK_IMPORTED_MODULE_7__.UNINITIALIZED) {
          return {
            enumerable: true,
            configurable: true,
            value,
            writable: true
          };
        }
      }
      return descriptor;
    },
    has(target, prop) {
      if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV && prop === _constants_js__WEBPACK_IMPORTED_MODULE_6__.STATE_SYMBOL_METADATA) {
        return true;
      }
      if (prop === _constants_js__WEBPACK_IMPORTED_MODULE_6__.STATE_SYMBOL) {
        return true;
      }
      var s = sources.get(prop);
      var has = s !== undefined && s.v !== _constants_js__WEBPACK_IMPORTED_MODULE_7__.UNINITIALIZED || Reflect.has(target, prop);
      if (s !== undefined || _runtime_js__WEBPACK_IMPORTED_MODULE_1__.active_effect !== null && (!has || (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_3__.get_descriptor)(target, prop)?.writable)) {
        if (s === undefined) {
          s = (0,_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_5__.source)(has ? proxy(target[prop], metadata) : _constants_js__WEBPACK_IMPORTED_MODULE_7__.UNINITIALIZED, stack);
          sources.set(prop, s);
        }
        var value = (0,_runtime_js__WEBPACK_IMPORTED_MODULE_1__.get)(s);
        if (value === _constants_js__WEBPACK_IMPORTED_MODULE_7__.UNINITIALIZED) {
          return false;
        }
      }
      return has;
    },
    set(target, prop, value, receiver) {
      var s = sources.get(prop);
      var has = prop in target;

      // variable.length = value -> clear all signals with index >= value
      if (is_proxied_array && prop === 'length') {
        for (var i = value; i < /** @type {Source<number>} */s.v; i += 1) {
          var other_s = sources.get(i + '');
          if (other_s !== undefined) {
            (0,_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_5__.set)(other_s, _constants_js__WEBPACK_IMPORTED_MODULE_7__.UNINITIALIZED);
          } else if (i in target) {
            // If the item exists in the original, we need to create a uninitialized source,
            // else a later read of the property would result in a source being created with
            // the value of the original item at that index.
            other_s = (0,_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_5__.source)(_constants_js__WEBPACK_IMPORTED_MODULE_7__.UNINITIALIZED, stack);
            sources.set(i + '', other_s);
          }
        }
      }

      // If we haven't yet created a source for this property, we need to ensure
      // we do so otherwise if we read it later, then the write won't be tracked and
      // the heuristics of effects will be different vs if we had read the proxied
      // object property before writing to that property.
      if (s === undefined) {
        if (!has || (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_3__.get_descriptor)(target, prop)?.writable) {
          s = (0,_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_5__.source)(undefined, stack);
          (0,_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_5__.set)(s, proxy(value, metadata));
          sources.set(prop, s);
        }
      } else {
        has = s.v !== _constants_js__WEBPACK_IMPORTED_MODULE_7__.UNINITIALIZED;
        (0,_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_5__.set)(s, proxy(value, metadata));
      }
      if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
        /** @type {ProxyMetadata | undefined} */
        var prop_metadata = value?.[_constants_js__WEBPACK_IMPORTED_MODULE_6__.STATE_SYMBOL_METADATA];
        if (prop_metadata && prop_metadata?.parent !== metadata) {
          (0,_dev_ownership_js__WEBPACK_IMPORTED_MODULE_4__.widen_ownership)(metadata, prop_metadata);
        }
        (0,_dev_ownership_js__WEBPACK_IMPORTED_MODULE_4__.check_ownership)(metadata);
      }
      var descriptor = Reflect.getOwnPropertyDescriptor(target, prop);

      // Set the new value before updating any signals so that any listeners get the new value
      if (descriptor?.set) {
        descriptor.set.call(receiver, value);
      }
      if (!has) {
        // If we have mutated an array directly, we might need to
        // signal that length has also changed. Do it before updating metadata
        // to ensure that iterating over the array as a result of a metadata update
        // will not cause the length to be out of sync.
        if (is_proxied_array && typeof prop === 'string') {
          var ls = /** @type {Source<number>} */sources.get('length');
          var n = Number(prop);
          if (Number.isInteger(n) && n >= ls.v) {
            (0,_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_5__.set)(ls, n + 1);
          }
        }
        update_version(version);
      }
      return true;
    },
    ownKeys(target) {
      (0,_runtime_js__WEBPACK_IMPORTED_MODULE_1__.get)(version);
      var own_keys = Reflect.ownKeys(target).filter(key => {
        var source = sources.get(key);
        return source === undefined || source.v !== _constants_js__WEBPACK_IMPORTED_MODULE_7__.UNINITIALIZED;
      });
      for (var [key, source] of sources) {
        if (source.v !== _constants_js__WEBPACK_IMPORTED_MODULE_7__.UNINITIALIZED && !(key in target)) {
          own_keys.push(key);
        }
      }
      return own_keys;
    },
    setPrototypeOf() {
      _errors_js__WEBPACK_IMPORTED_MODULE_8__.state_prototype_fixed();
    }
  });
}

/**
 * @param {Source<number>} signal
 * @param {1 | -1} [d]
 */
function update_version(signal, d = 1) {
  (0,_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_5__.set)(signal, signal.v + d);
}

/**
 * @param {any} value
 */
function get_proxied_value(value) {
  if (value !== null && typeof value === 'object' && _constants_js__WEBPACK_IMPORTED_MODULE_6__.STATE_SYMBOL in value) {
    return value[_constants_js__WEBPACK_IMPORTED_MODULE_6__.STATE_SYMBOL];
  }
  return value;
}

/**
 * @param {any} a
 * @param {any} b
 */
function is(a, b) {
  return Object.is(get_proxied_value(a), get_proxied_value(b));
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/reactivity/deriveds.js":
/*!****************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/reactivity/deriveds.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   derived: () => (/* binding */ derived),
/* harmony export */   derived_safe_equal: () => (/* binding */ derived_safe_equal),
/* harmony export */   destroy_derived_effects: () => (/* binding */ destroy_derived_effects),
/* harmony export */   execute_derived: () => (/* binding */ execute_derived),
/* harmony export */   update_derived: () => (/* binding */ update_derived)
/* harmony export */ });
/* harmony import */ var esm_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! esm-env */ "../svelte/node_modules/.pnpm/esm-env@1.2.1/node_modules/esm-env/index.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "../svelte/packages/svelte/src/internal/client/constants.js");
/* harmony import */ var _runtime_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../runtime.js */ "../svelte/packages/svelte/src/internal/client/runtime.js");
/* harmony import */ var _equality_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./equality.js */ "../svelte/packages/svelte/src/internal/client/reactivity/equality.js");
/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../errors.js */ "../svelte/packages/svelte/src/internal/client/errors.js");
/* harmony import */ var _effects_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _sources_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./sources.js */ "../svelte/packages/svelte/src/internal/client/reactivity/sources.js");
/* harmony import */ var _dev_tracing_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../dev/tracing.js */ "../svelte/packages/svelte/src/internal/client/dev/tracing.js");
/* harmony import */ var _flags_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../flags/index.js */ "../svelte/packages/svelte/src/internal/flags/index.js");
/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../context.js */ "../svelte/packages/svelte/src/internal/client/context.js");
/** @import { Derived, Effect } from '#client' */











/**
 * @template V
 * @param {() => V} fn
 * @returns {Derived<V>}
 */
/*#__NO_SIDE_EFFECTS__*/
function derived(fn) {
  var flags = _constants_js__WEBPACK_IMPORTED_MODULE_1__.DERIVED | _constants_js__WEBPACK_IMPORTED_MODULE_1__.DIRTY;
  var parent_derived = _runtime_js__WEBPACK_IMPORTED_MODULE_2__.active_reaction !== null && (_runtime_js__WEBPACK_IMPORTED_MODULE_2__.active_reaction.f & _constants_js__WEBPACK_IMPORTED_MODULE_1__.DERIVED) !== 0 ? (/** @type {Derived} */_runtime_js__WEBPACK_IMPORTED_MODULE_2__.active_reaction) : null;
  if (_runtime_js__WEBPACK_IMPORTED_MODULE_2__.active_effect === null || parent_derived !== null && (parent_derived.f & _constants_js__WEBPACK_IMPORTED_MODULE_1__.UNOWNED) !== 0) {
    flags |= _constants_js__WEBPACK_IMPORTED_MODULE_1__.UNOWNED;
  } else {
    // Since deriveds are evaluated lazily, any effects created inside them are
    // created too late to ensure that the parent effect is added to the tree
    _runtime_js__WEBPACK_IMPORTED_MODULE_2__.active_effect.f |= _constants_js__WEBPACK_IMPORTED_MODULE_1__.EFFECT_HAS_DERIVED;
  }

  /** @type {Derived<V>} */
  const signal = {
    ctx: _context_js__WEBPACK_IMPORTED_MODULE_9__.component_context,
    deps: null,
    effects: null,
    equals: _equality_js__WEBPACK_IMPORTED_MODULE_3__.equals,
    f: flags,
    fn,
    reactions: null,
    rv: 0,
    v: (/** @type {V} */null),
    wv: 0,
    parent: parent_derived ?? _runtime_js__WEBPACK_IMPORTED_MODULE_2__.active_effect
  };
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV && _flags_index_js__WEBPACK_IMPORTED_MODULE_8__.tracing_mode_flag) {
    signal.created = (0,_dev_tracing_js__WEBPACK_IMPORTED_MODULE_7__.get_stack)('CreatedAt');
  }
  return signal;
}

/**
 * @template V
 * @param {() => V} fn
 * @returns {Derived<V>}
 */
/*#__NO_SIDE_EFFECTS__*/
function derived_safe_equal(fn) {
  const signal = derived(fn);
  signal.equals = _equality_js__WEBPACK_IMPORTED_MODULE_3__.safe_equals;
  return signal;
}

/**
 * @param {Derived} derived
 * @returns {void}
 */
function destroy_derived_effects(derived) {
  var effects = derived.effects;
  if (effects !== null) {
    derived.effects = null;
    for (var i = 0; i < effects.length; i += 1) {
      (0,_effects_js__WEBPACK_IMPORTED_MODULE_5__.destroy_effect)(/** @type {Effect} */effects[i]);
    }
  }
}

/**
 * The currently updating deriveds, used to detect infinite recursion
 * in dev mode and provide a nicer error than 'too much recursion'
 * @type {Derived[]}
 */
let stack = [];

/**
 * @param {Derived} derived
 * @returns {Effect | null}
 */
function get_derived_parent_effect(derived) {
  var parent = derived.parent;
  while (parent !== null) {
    if ((parent.f & _constants_js__WEBPACK_IMPORTED_MODULE_1__.DERIVED) === 0) {
      return /** @type {Effect} */parent;
    }
    parent = parent.parent;
  }
  return null;
}

/**
 * @template T
 * @param {Derived} derived
 * @returns {T}
 */
function execute_derived(derived) {
  var value;
  var prev_active_effect = _runtime_js__WEBPACK_IMPORTED_MODULE_2__.active_effect;
  (0,_runtime_js__WEBPACK_IMPORTED_MODULE_2__.set_active_effect)(get_derived_parent_effect(derived));
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    let prev_inspect_effects = _sources_js__WEBPACK_IMPORTED_MODULE_6__.inspect_effects;
    (0,_sources_js__WEBPACK_IMPORTED_MODULE_6__.set_inspect_effects)(new Set());
    try {
      if (stack.includes(derived)) {
        _errors_js__WEBPACK_IMPORTED_MODULE_4__.derived_references_self();
      }
      stack.push(derived);
      destroy_derived_effects(derived);
      value = (0,_runtime_js__WEBPACK_IMPORTED_MODULE_2__.update_reaction)(derived);
    } finally {
      (0,_runtime_js__WEBPACK_IMPORTED_MODULE_2__.set_active_effect)(prev_active_effect);
      (0,_sources_js__WEBPACK_IMPORTED_MODULE_6__.set_inspect_effects)(prev_inspect_effects);
      stack.pop();
    }
  } else {
    try {
      destroy_derived_effects(derived);
      value = (0,_runtime_js__WEBPACK_IMPORTED_MODULE_2__.update_reaction)(derived);
    } finally {
      (0,_runtime_js__WEBPACK_IMPORTED_MODULE_2__.set_active_effect)(prev_active_effect);
    }
  }
  return value;
}

/**
 * @param {Derived} derived
 * @returns {void}
 */
function update_derived(derived) {
  var value = execute_derived(derived);
  var status = (_runtime_js__WEBPACK_IMPORTED_MODULE_2__.skip_reaction || (derived.f & _constants_js__WEBPACK_IMPORTED_MODULE_1__.UNOWNED) !== 0) && derived.deps !== null ? _constants_js__WEBPACK_IMPORTED_MODULE_1__.MAYBE_DIRTY : _constants_js__WEBPACK_IMPORTED_MODULE_1__.CLEAN;
  (0,_runtime_js__WEBPACK_IMPORTED_MODULE_2__.set_signal_status)(derived, status);
  if (!derived.equals(value)) {
    derived.v = value;
    derived.wv = (0,_runtime_js__WEBPACK_IMPORTED_MODULE_2__.increment_write_version)();
  }
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js":
/*!***************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/reactivity/effects.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   block: () => (/* binding */ block),
/* harmony export */   branch: () => (/* binding */ branch),
/* harmony export */   component_root: () => (/* binding */ component_root),
/* harmony export */   destroy_block_effect_children: () => (/* binding */ destroy_block_effect_children),
/* harmony export */   destroy_effect: () => (/* binding */ destroy_effect),
/* harmony export */   destroy_effect_children: () => (/* binding */ destroy_effect_children),
/* harmony export */   effect: () => (/* binding */ effect),
/* harmony export */   effect_root: () => (/* binding */ effect_root),
/* harmony export */   effect_tracking: () => (/* binding */ effect_tracking),
/* harmony export */   execute_effect_teardown: () => (/* binding */ execute_effect_teardown),
/* harmony export */   inspect_effect: () => (/* binding */ inspect_effect),
/* harmony export */   legacy_pre_effect: () => (/* binding */ legacy_pre_effect),
/* harmony export */   legacy_pre_effect_reset: () => (/* binding */ legacy_pre_effect_reset),
/* harmony export */   pause_children: () => (/* binding */ pause_children),
/* harmony export */   pause_effect: () => (/* binding */ pause_effect),
/* harmony export */   render_effect: () => (/* binding */ render_effect),
/* harmony export */   resume_effect: () => (/* binding */ resume_effect),
/* harmony export */   run_out_transitions: () => (/* binding */ run_out_transitions),
/* harmony export */   teardown: () => (/* binding */ teardown),
/* harmony export */   template_effect: () => (/* binding */ template_effect),
/* harmony export */   unlink_effect: () => (/* binding */ unlink_effect),
/* harmony export */   user_effect: () => (/* binding */ user_effect),
/* harmony export */   user_pre_effect: () => (/* binding */ user_pre_effect),
/* harmony export */   validate_effect: () => (/* binding */ validate_effect)
/* harmony export */ });
/* harmony import */ var _runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../runtime.js */ "../svelte/packages/svelte/src/internal/client/runtime.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "../svelte/packages/svelte/src/internal/client/constants.js");
/* harmony import */ var _sources_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sources.js */ "../svelte/packages/svelte/src/internal/client/reactivity/sources.js");
/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../errors.js */ "../svelte/packages/svelte/src/internal/client/errors.js");
/* harmony import */ var esm_env__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! esm-env */ "../svelte/node_modules/.pnpm/esm-env@1.2.1/node_modules/esm-env/index.js");
/* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../shared/utils.js */ "../svelte/packages/svelte/src/internal/shared/utils.js");
/* harmony import */ var _dom_operations_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dom/operations.js */ "../svelte/packages/svelte/src/internal/client/dom/operations.js");
/* harmony import */ var _deriveds_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./deriveds.js */ "../svelte/packages/svelte/src/internal/client/reactivity/deriveds.js");
/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../context.js */ "../svelte/packages/svelte/src/internal/client/context.js");
/** @import { ComponentContext, ComponentContextLegacy, Derived, Effect, TemplateNode, TransitionManager } from '#client' */










/**
 * @param {'$effect' | '$effect.pre' | '$inspect'} rune
 */
function validate_effect(rune) {
  if (_runtime_js__WEBPACK_IMPORTED_MODULE_0__.active_effect === null && _runtime_js__WEBPACK_IMPORTED_MODULE_0__.active_reaction === null) {
    _errors_js__WEBPACK_IMPORTED_MODULE_3__.effect_orphan(rune);
  }
  if (_runtime_js__WEBPACK_IMPORTED_MODULE_0__.active_reaction !== null && (_runtime_js__WEBPACK_IMPORTED_MODULE_0__.active_reaction.f & _constants_js__WEBPACK_IMPORTED_MODULE_1__.UNOWNED) !== 0 && _runtime_js__WEBPACK_IMPORTED_MODULE_0__.active_effect === null) {
    _errors_js__WEBPACK_IMPORTED_MODULE_3__.effect_in_unowned_derived();
  }
  if (_runtime_js__WEBPACK_IMPORTED_MODULE_0__.is_destroying_effect) {
    _errors_js__WEBPACK_IMPORTED_MODULE_3__.effect_in_teardown(rune);
  }
}

/**
 * @param {Effect} effect
 * @param {Effect} parent_effect
 */
function push_effect(effect, parent_effect) {
  var parent_last = parent_effect.last;
  if (parent_last === null) {
    parent_effect.last = parent_effect.first = effect;
  } else {
    parent_last.next = effect;
    effect.prev = parent_last;
    parent_effect.last = effect;
  }
}

/**
 * @param {number} type
 * @param {null | (() => void | (() => void))} fn
 * @param {boolean} sync
 * @param {boolean} push
 * @returns {Effect}
 */
function create_effect(type, fn, sync, push = true) {
  var is_root = (type & _constants_js__WEBPACK_IMPORTED_MODULE_1__.ROOT_EFFECT) !== 0;
  var parent_effect = _runtime_js__WEBPACK_IMPORTED_MODULE_0__.active_effect;
  if (esm_env__WEBPACK_IMPORTED_MODULE_4__.DEV) {
    // Ensure the parent is never an inspect effect
    while (parent_effect !== null && (parent_effect.f & _constants_js__WEBPACK_IMPORTED_MODULE_1__.INSPECT_EFFECT) !== 0) {
      parent_effect = parent_effect.parent;
    }
  }

  /** @type {Effect} */
  var effect = {
    ctx: _context_js__WEBPACK_IMPORTED_MODULE_8__.component_context,
    deps: null,
    nodes_start: null,
    nodes_end: null,
    f: type | _constants_js__WEBPACK_IMPORTED_MODULE_1__.DIRTY,
    first: null,
    fn,
    last: null,
    next: null,
    parent: is_root ? null : parent_effect,
    prev: null,
    teardown: null,
    transitions: null,
    wv: 0
  };
  if (esm_env__WEBPACK_IMPORTED_MODULE_4__.DEV) {
    effect.component_function = _context_js__WEBPACK_IMPORTED_MODULE_8__.dev_current_component_function;
  }
  if (sync) {
    var previously_flushing_effect = _runtime_js__WEBPACK_IMPORTED_MODULE_0__.is_flushing_effect;
    try {
      (0,_runtime_js__WEBPACK_IMPORTED_MODULE_0__.set_is_flushing_effect)(true);
      (0,_runtime_js__WEBPACK_IMPORTED_MODULE_0__.update_effect)(effect);
      effect.f |= _constants_js__WEBPACK_IMPORTED_MODULE_1__.EFFECT_RAN;
    } catch (e) {
      destroy_effect(effect);
      throw e;
    } finally {
      (0,_runtime_js__WEBPACK_IMPORTED_MODULE_0__.set_is_flushing_effect)(previously_flushing_effect);
    }
  } else if (fn !== null) {
    (0,_runtime_js__WEBPACK_IMPORTED_MODULE_0__.schedule_effect)(effect);
  }

  // if an effect has no dependencies, no DOM and no teardown function,
  // don't bother adding it to the effect tree
  var inert = sync && effect.deps === null && effect.first === null && effect.nodes_start === null && effect.teardown === null && (effect.f & (_constants_js__WEBPACK_IMPORTED_MODULE_1__.EFFECT_HAS_DERIVED | _constants_js__WEBPACK_IMPORTED_MODULE_1__.BOUNDARY_EFFECT)) === 0;
  if (!inert && !is_root && push) {
    if (parent_effect !== null) {
      push_effect(effect, parent_effect);
    }

    // if we're in a derived, add the effect there too
    if (_runtime_js__WEBPACK_IMPORTED_MODULE_0__.active_reaction !== null && (_runtime_js__WEBPACK_IMPORTED_MODULE_0__.active_reaction.f & _constants_js__WEBPACK_IMPORTED_MODULE_1__.DERIVED) !== 0) {
      var derived = /** @type {Derived} */_runtime_js__WEBPACK_IMPORTED_MODULE_0__.active_reaction;
      (derived.effects ??= []).push(effect);
    }
  }
  return effect;
}

/**
 * Internal representation of `$effect.tracking()`
 * @returns {boolean}
 */
function effect_tracking() {
  return _runtime_js__WEBPACK_IMPORTED_MODULE_0__.active_reaction !== null && !_runtime_js__WEBPACK_IMPORTED_MODULE_0__.untracking;
}

/**
 * @param {() => void} fn
 */
function teardown(fn) {
  const effect = create_effect(_constants_js__WEBPACK_IMPORTED_MODULE_1__.RENDER_EFFECT, null, false);
  (0,_runtime_js__WEBPACK_IMPORTED_MODULE_0__.set_signal_status)(effect, _constants_js__WEBPACK_IMPORTED_MODULE_1__.CLEAN);
  effect.teardown = fn;
  return effect;
}

/**
 * Internal representation of `$effect(...)`
 * @param {() => void | (() => void)} fn
 */
function user_effect(fn) {
  validate_effect('$effect');

  // Non-nested `$effect(...)` in a component should be deferred
  // until the component is mounted
  var defer = _runtime_js__WEBPACK_IMPORTED_MODULE_0__.active_effect !== null && (_runtime_js__WEBPACK_IMPORTED_MODULE_0__.active_effect.f & _constants_js__WEBPACK_IMPORTED_MODULE_1__.BRANCH_EFFECT) !== 0 && _context_js__WEBPACK_IMPORTED_MODULE_8__.component_context !== null && !_context_js__WEBPACK_IMPORTED_MODULE_8__.component_context.m;
  if (esm_env__WEBPACK_IMPORTED_MODULE_4__.DEV) {
    (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_5__.define_property)(fn, 'name', {
      value: '$effect'
    });
  }
  if (defer) {
    var context = /** @type {ComponentContext} */_context_js__WEBPACK_IMPORTED_MODULE_8__.component_context;
    (context.e ??= []).push({
      fn,
      effect: _runtime_js__WEBPACK_IMPORTED_MODULE_0__.active_effect,
      reaction: _runtime_js__WEBPACK_IMPORTED_MODULE_0__.active_reaction
    });
  } else {
    var signal = effect(fn);
    return signal;
  }
}

/**
 * Internal representation of `$effect.pre(...)`
 * @param {() => void | (() => void)} fn
 * @returns {Effect}
 */
function user_pre_effect(fn) {
  validate_effect('$effect.pre');
  if (esm_env__WEBPACK_IMPORTED_MODULE_4__.DEV) {
    (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_5__.define_property)(fn, 'name', {
      value: '$effect.pre'
    });
  }
  return render_effect(fn);
}

/** @param {() => void | (() => void)} fn */
function inspect_effect(fn) {
  return create_effect(_constants_js__WEBPACK_IMPORTED_MODULE_1__.INSPECT_EFFECT, fn, true);
}

/**
 * Internal representation of `$effect.root(...)`
 * @param {() => void | (() => void)} fn
 * @returns {() => void}
 */
function effect_root(fn) {
  const effect = create_effect(_constants_js__WEBPACK_IMPORTED_MODULE_1__.ROOT_EFFECT, fn, true);
  return () => {
    destroy_effect(effect);
  };
}

/**
 * An effect root whose children can transition out
 * @param {() => void} fn
 * @returns {(options?: { outro?: boolean }) => Promise<void>}
 */
function component_root(fn) {
  const effect = create_effect(_constants_js__WEBPACK_IMPORTED_MODULE_1__.ROOT_EFFECT, fn, true);
  return (options = {}) => {
    return new Promise(fulfil => {
      if (options.outro) {
        pause_effect(effect, () => {
          destroy_effect(effect);
          fulfil(undefined);
        });
      } else {
        destroy_effect(effect);
        fulfil(undefined);
      }
    });
  };
}

/**
 * @param {() => void | (() => void)} fn
 * @returns {Effect}
 */
function effect(fn) {
  return create_effect(_constants_js__WEBPACK_IMPORTED_MODULE_1__.EFFECT, fn, false);
}

/**
 * Internal representation of `$: ..`
 * @param {() => any} deps
 * @param {() => void | (() => void)} fn
 */
function legacy_pre_effect(deps, fn) {
  var context = /** @type {ComponentContextLegacy} */_context_js__WEBPACK_IMPORTED_MODULE_8__.component_context;

  /** @type {{ effect: null | Effect, ran: boolean }} */
  var token = {
    effect: null,
    ran: false
  };
  context.l.r1.push(token);
  token.effect = render_effect(() => {
    deps();

    // If this legacy pre effect has already run before the end of the reset, then
    // bail out to emulate the same behavior.
    if (token.ran) return;
    token.ran = true;
    (0,_sources_js__WEBPACK_IMPORTED_MODULE_2__.set)(context.l.r2, true);
    (0,_runtime_js__WEBPACK_IMPORTED_MODULE_0__.untrack)(fn);
  });
}
function legacy_pre_effect_reset() {
  var context = /** @type {ComponentContextLegacy} */_context_js__WEBPACK_IMPORTED_MODULE_8__.component_context;
  render_effect(() => {
    if (!(0,_runtime_js__WEBPACK_IMPORTED_MODULE_0__.get)(context.l.r2)) return;

    // Run dirty `$:` statements
    for (var token of context.l.r1) {
      var effect = token.effect;

      // If the effect is CLEAN, then make it MAYBE_DIRTY. This ensures we traverse through
      // the effects dependencies and correctly ensure each dependency is up-to-date.
      if ((effect.f & _constants_js__WEBPACK_IMPORTED_MODULE_1__.CLEAN) !== 0) {
        (0,_runtime_js__WEBPACK_IMPORTED_MODULE_0__.set_signal_status)(effect, _constants_js__WEBPACK_IMPORTED_MODULE_1__.MAYBE_DIRTY);
      }
      if ((0,_runtime_js__WEBPACK_IMPORTED_MODULE_0__.check_dirtiness)(effect)) {
        (0,_runtime_js__WEBPACK_IMPORTED_MODULE_0__.update_effect)(effect);
      }
      token.ran = false;
    }
    context.l.r2.v = false; // set directly to avoid rerunning this effect
  });
}

/**
 * @param {() => void | (() => void)} fn
 * @returns {Effect}
 */
function render_effect(fn) {
  return create_effect(_constants_js__WEBPACK_IMPORTED_MODULE_1__.RENDER_EFFECT, fn, true);
}

/**
 * @param {(...expressions: any) => void | (() => void)} fn
 * @param {Array<() => any>} thunks
 * @returns {Effect}
 */
function template_effect(fn, thunks = [], d = _deriveds_js__WEBPACK_IMPORTED_MODULE_7__.derived) {
  const deriveds = thunks.map(d);
  const effect = () => fn(...deriveds.map(_runtime_js__WEBPACK_IMPORTED_MODULE_0__.get));
  if (esm_env__WEBPACK_IMPORTED_MODULE_4__.DEV) {
    (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_5__.define_property)(effect, 'name', {
      value: '{expression}'
    });
  }
  return block(effect);
}

/**
 * @param {(() => void)} fn
 * @param {number} flags
 */
function block(fn, flags = 0) {
  return create_effect(_constants_js__WEBPACK_IMPORTED_MODULE_1__.RENDER_EFFECT | _constants_js__WEBPACK_IMPORTED_MODULE_1__.BLOCK_EFFECT | flags, fn, true);
}

/**
 * @param {(() => void)} fn
 * @param {boolean} [push]
 */
function branch(fn, push = true) {
  return create_effect(_constants_js__WEBPACK_IMPORTED_MODULE_1__.RENDER_EFFECT | _constants_js__WEBPACK_IMPORTED_MODULE_1__.BRANCH_EFFECT, fn, true, push);
}

/**
 * @param {Effect} effect
 */
function execute_effect_teardown(effect) {
  var teardown = effect.teardown;
  if (teardown !== null) {
    const previously_destroying_effect = _runtime_js__WEBPACK_IMPORTED_MODULE_0__.is_destroying_effect;
    const previous_reaction = _runtime_js__WEBPACK_IMPORTED_MODULE_0__.active_reaction;
    (0,_runtime_js__WEBPACK_IMPORTED_MODULE_0__.set_is_destroying_effect)(true);
    (0,_runtime_js__WEBPACK_IMPORTED_MODULE_0__.set_active_reaction)(null);
    try {
      teardown.call(null);
    } finally {
      (0,_runtime_js__WEBPACK_IMPORTED_MODULE_0__.set_is_destroying_effect)(previously_destroying_effect);
      (0,_runtime_js__WEBPACK_IMPORTED_MODULE_0__.set_active_reaction)(previous_reaction);
    }
  }
}

/**
 * @param {Effect} signal
 * @param {boolean} remove_dom
 * @returns {void}
 */
function destroy_effect_children(signal, remove_dom = false) {
  var effect = signal.first;
  signal.first = signal.last = null;
  while (effect !== null) {
    var next = effect.next;
    destroy_effect(effect, remove_dom);
    effect = next;
  }
}

/**
 * @param {Effect} signal
 * @returns {void}
 */
function destroy_block_effect_children(signal) {
  var effect = signal.first;
  while (effect !== null) {
    var next = effect.next;
    if ((effect.f & _constants_js__WEBPACK_IMPORTED_MODULE_1__.BRANCH_EFFECT) === 0) {
      destroy_effect(effect);
    }
    effect = next;
  }
}

/**
 * @param {Effect} effect
 * @param {boolean} [remove_dom]
 * @returns {void}
 */
function destroy_effect(effect, remove_dom = true) {
  var removed = false;
  if ((remove_dom || (effect.f & _constants_js__WEBPACK_IMPORTED_MODULE_1__.HEAD_EFFECT) !== 0) && effect.nodes_start !== null) {
    /** @type {TemplateNode | null} */
    var node = effect.nodes_start;
    var end = effect.nodes_end;
    while (node !== null) {
      /** @type {TemplateNode | null} */
      var next = node === end ? null : (/** @type {TemplateNode} */(0,_dom_operations_js__WEBPACK_IMPORTED_MODULE_6__.get_next_sibling)(node));
      node.remove();
      node = next;
    }
    removed = true;
  }
  destroy_effect_children(effect, remove_dom && !removed);
  (0,_runtime_js__WEBPACK_IMPORTED_MODULE_0__.remove_reactions)(effect, 0);
  (0,_runtime_js__WEBPACK_IMPORTED_MODULE_0__.set_signal_status)(effect, _constants_js__WEBPACK_IMPORTED_MODULE_1__.DESTROYED);
  var transitions = effect.transitions;
  if (transitions !== null) {
    for (const transition of transitions) {
      transition.stop();
    }
  }
  execute_effect_teardown(effect);
  var parent = effect.parent;

  // If the parent doesn't have any children, then skip this work altogether
  if (parent !== null && parent.first !== null) {
    unlink_effect(effect);
  }
  if (esm_env__WEBPACK_IMPORTED_MODULE_4__.DEV) {
    effect.component_function = null;
  }

  // `first` and `child` are nulled out in destroy_effect_children
  // we don't null out `parent` so that error propagation can work correctly
  effect.next = effect.prev = effect.teardown = effect.ctx = effect.deps = effect.fn = effect.nodes_start = effect.nodes_end = null;
}

/**
 * Detach an effect from the effect tree, freeing up memory and
 * reducing the amount of work that happens on subsequent traversals
 * @param {Effect} effect
 */
function unlink_effect(effect) {
  var parent = effect.parent;
  var prev = effect.prev;
  var next = effect.next;
  if (prev !== null) prev.next = next;
  if (next !== null) next.prev = prev;
  if (parent !== null) {
    if (parent.first === effect) parent.first = next;
    if (parent.last === effect) parent.last = prev;
  }
}

/**
 * When a block effect is removed, we don't immediately destroy it or yank it
 * out of the DOM, because it might have transitions. Instead, we 'pause' it.
 * It stays around (in memory, and in the DOM) until outro transitions have
 * completed, and if the state change is reversed then we _resume_ it.
 * A paused effect does not update, and the DOM subtree becomes inert.
 * @param {Effect} effect
 * @param {() => void} [callback]
 */
function pause_effect(effect, callback) {
  /** @type {TransitionManager[]} */
  var transitions = [];
  pause_children(effect, transitions, true);
  run_out_transitions(transitions, () => {
    destroy_effect(effect);
    if (callback) callback();
  });
}

/**
 * @param {TransitionManager[]} transitions
 * @param {() => void} fn
 */
function run_out_transitions(transitions, fn) {
  var remaining = transitions.length;
  if (remaining > 0) {
    var check = () => --remaining || fn();
    for (var transition of transitions) {
      transition.out(check);
    }
  } else {
    fn();
  }
}

/**
 * @param {Effect} effect
 * @param {TransitionManager[]} transitions
 * @param {boolean} local
 */
function pause_children(effect, transitions, local) {
  if ((effect.f & _constants_js__WEBPACK_IMPORTED_MODULE_1__.INERT) !== 0) return;
  effect.f ^= _constants_js__WEBPACK_IMPORTED_MODULE_1__.INERT;
  if (effect.transitions !== null) {
    for (const transition of effect.transitions) {
      if (transition.is_global || local) {
        transitions.push(transition);
      }
    }
  }
  var child = effect.first;
  while (child !== null) {
    var sibling = child.next;
    var transparent = (child.f & _constants_js__WEBPACK_IMPORTED_MODULE_1__.EFFECT_TRANSPARENT) !== 0 || (child.f & _constants_js__WEBPACK_IMPORTED_MODULE_1__.BRANCH_EFFECT) !== 0;
    // TODO we don't need to call pause_children recursively with a linked list in place
    // it's slightly more involved though as we have to account for `transparent` changing
    // through the tree.
    pause_children(child, transitions, transparent ? local : false);
    child = sibling;
  }
}

/**
 * The opposite of `pause_effect`. We call this if (for example)
 * `x` becomes falsy then truthy: `{#if x}...{/if}`
 * @param {Effect} effect
 */
function resume_effect(effect) {
  resume_children(effect, true);
}

/**
 * @param {Effect} effect
 * @param {boolean} local
 */
function resume_children(effect, local) {
  if ((effect.f & _constants_js__WEBPACK_IMPORTED_MODULE_1__.INERT) === 0) return;
  effect.f ^= _constants_js__WEBPACK_IMPORTED_MODULE_1__.INERT;

  // Ensure the effect is marked as clean again so that any dirty child
  // effects can schedule themselves for execution
  if ((effect.f & _constants_js__WEBPACK_IMPORTED_MODULE_1__.CLEAN) === 0) {
    effect.f ^= _constants_js__WEBPACK_IMPORTED_MODULE_1__.CLEAN;
  }

  // If a dependency of this effect changed while it was paused,
  // schedule the effect to update
  if ((0,_runtime_js__WEBPACK_IMPORTED_MODULE_0__.check_dirtiness)(effect)) {
    (0,_runtime_js__WEBPACK_IMPORTED_MODULE_0__.set_signal_status)(effect, _constants_js__WEBPACK_IMPORTED_MODULE_1__.DIRTY);
    (0,_runtime_js__WEBPACK_IMPORTED_MODULE_0__.schedule_effect)(effect);
  }
  var child = effect.first;
  while (child !== null) {
    var sibling = child.next;
    var transparent = (child.f & _constants_js__WEBPACK_IMPORTED_MODULE_1__.EFFECT_TRANSPARENT) !== 0 || (child.f & _constants_js__WEBPACK_IMPORTED_MODULE_1__.BRANCH_EFFECT) !== 0;
    // TODO we don't need to call resume_children recursively with a linked list in place
    // it's slightly more involved though as we have to account for `transparent` changing
    // through the tree.
    resume_children(child, transparent ? local : false);
    child = sibling;
  }
  if (effect.transitions !== null) {
    for (const transition of effect.transitions) {
      if (transition.is_global || local) {
        transition.in();
      }
    }
  }
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/reactivity/equality.js":
/*!****************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/reactivity/equality.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   equals: () => (/* binding */ equals),
/* harmony export */   not_equal: () => (/* binding */ not_equal),
/* harmony export */   safe_equals: () => (/* binding */ safe_equals),
/* harmony export */   safe_not_equal: () => (/* binding */ safe_not_equal)
/* harmony export */ });
/** @import { Equals } from '#client' */
/** @type {Equals} */
function equals(value) {
  return value === this.v;
}

/**
 * @param {unknown} a
 * @param {unknown} b
 * @returns {boolean}
 */
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || a !== null && typeof a === 'object' || typeof a === 'function';
}

/**
 * @param {unknown} a
 * @param {unknown} b
 * @returns {boolean}
 */
function not_equal(a, b) {
  return a !== b;
}

/** @type {Equals} */
function safe_equals(value) {
  return !safe_not_equal(value, this.v);
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/reactivity/props.js":
/*!*************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/reactivity/props.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   legacy_rest_props: () => (/* binding */ legacy_rest_props),
/* harmony export */   prop: () => (/* binding */ prop),
/* harmony export */   rest_props: () => (/* binding */ rest_props),
/* harmony export */   spread_props: () => (/* binding */ spread_props),
/* harmony export */   update_pre_prop: () => (/* binding */ update_pre_prop),
/* harmony export */   update_prop: () => (/* binding */ update_prop)
/* harmony export */ });
/* harmony import */ var esm_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! esm-env */ "../svelte/node_modules/.pnpm/esm-env@1.2.1/node_modules/esm-env/index.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../constants.js */ "../svelte/packages/svelte/src/constants.js");
/* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../shared/utils.js */ "../svelte/packages/svelte/src/internal/shared/utils.js");
/* harmony import */ var _sources_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sources.js */ "../svelte/packages/svelte/src/internal/client/reactivity/sources.js");
/* harmony import */ var _deriveds_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./deriveds.js */ "../svelte/packages/svelte/src/internal/client/reactivity/deriveds.js");
/* harmony import */ var _runtime_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../runtime.js */ "../svelte/packages/svelte/src/internal/client/runtime.js");
/* harmony import */ var _equality_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./equality.js */ "../svelte/packages/svelte/src/internal/client/reactivity/equality.js");
/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../errors.js */ "../svelte/packages/svelte/src/internal/client/errors.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../constants.js */ "../svelte/packages/svelte/src/internal/client/constants.js");
/* harmony import */ var _proxy_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../proxy.js */ "../svelte/packages/svelte/src/internal/client/proxy.js");
/* harmony import */ var _store_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./store.js */ "../svelte/packages/svelte/src/internal/client/reactivity/store.js");
/* harmony import */ var _flags_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../flags/index.js */ "../svelte/packages/svelte/src/internal/flags/index.js");
/** @import { Source } from './types.js' */













/**
 * @param {((value?: number) => number)} fn
 * @param {1 | -1} [d]
 * @returns {number}
 */
function update_prop(fn, d = 1) {
  const value = fn();
  fn(value + d);
  return value;
}

/**
 * @param {((value?: number) => number)} fn
 * @param {1 | -1} [d]
 * @returns {number}
 */
function update_pre_prop(fn, d = 1) {
  const value = fn() + d;
  fn(value);
  return value;
}

/**
 * The proxy handler for rest props (i.e. `const { x, ...rest } = $props()`).
 * Is passed the full `$$props` object and excludes the named props.
 * @type {ProxyHandler<{ props: Record<string | symbol, unknown>, exclude: Array<string | symbol>, name?: string }>}}
 */
const rest_props_handler = {
  get(target, key) {
    if (target.exclude.includes(key)) return;
    return target.props[key];
  },
  set(target, key) {
    if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
      // TODO should this happen in prod too?
      _errors_js__WEBPACK_IMPORTED_MODULE_7__.props_rest_readonly(`${target.name}.${String(key)}`);
    }
    return false;
  },
  getOwnPropertyDescriptor(target, key) {
    if (target.exclude.includes(key)) return;
    if (key in target.props) {
      return {
        enumerable: true,
        configurable: true,
        value: target.props[key]
      };
    }
  },
  has(target, key) {
    if (target.exclude.includes(key)) return false;
    return key in target.props;
  },
  ownKeys(target) {
    return Reflect.ownKeys(target.props).filter(key => !target.exclude.includes(key));
  }
};

/**
 * @param {Record<string, unknown>} props
 * @param {string[]} exclude
 * @param {string} [name]
 * @returns {Record<string, unknown>}
 */
/*#__NO_SIDE_EFFECTS__*/
function rest_props(props, exclude, name) {
  return new Proxy(esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV ? {
    props,
    exclude,
    name,
    other: {},
    to_proxy: []
  } : {
    props,
    exclude
  }, rest_props_handler);
}

/**
 * The proxy handler for legacy $$restProps and $$props
 * @type {ProxyHandler<{ props: Record<string | symbol, unknown>, exclude: Array<string | symbol>, special: Record<string | symbol, (v?: unknown) => unknown>, version: Source<number> }>}}
 */
const legacy_rest_props_handler = {
  get(target, key) {
    if (target.exclude.includes(key)) return;
    (0,_runtime_js__WEBPACK_IMPORTED_MODULE_5__.get)(target.version);
    return key in target.special ? target.special[key]() : target.props[key];
  },
  set(target, key, value) {
    if (!(key in target.special)) {
      // Handle props that can temporarily get out of sync with the parent
      /** @type {Record<string, (v?: unknown) => unknown>} */
      target.special[key] = prop({
        get [key]() {
          return target.props[key];
        }
      }, /** @type {string} */key, _constants_js__WEBPACK_IMPORTED_MODULE_1__.PROPS_IS_UPDATED);
    }
    target.special[key](value);
    (0,_sources_js__WEBPACK_IMPORTED_MODULE_3__.update)(target.version); // $$props is coarse-grained: when $$props.x is updated, usages of $$props.y etc are also rerun
    return true;
  },
  getOwnPropertyDescriptor(target, key) {
    if (target.exclude.includes(key)) return;
    if (key in target.props) {
      return {
        enumerable: true,
        configurable: true,
        value: target.props[key]
      };
    }
  },
  deleteProperty(target, key) {
    // Svelte 4 allowed for deletions on $$restProps
    if (target.exclude.includes(key)) return true;
    target.exclude.push(key);
    (0,_sources_js__WEBPACK_IMPORTED_MODULE_3__.update)(target.version);
    return true;
  },
  has(target, key) {
    if (target.exclude.includes(key)) return false;
    return key in target.props;
  },
  ownKeys(target) {
    return Reflect.ownKeys(target.props).filter(key => !target.exclude.includes(key));
  }
};

/**
 * @param {Record<string, unknown>} props
 * @param {string[]} exclude
 * @returns {Record<string, unknown>}
 */
function legacy_rest_props(props, exclude) {
  return new Proxy({
    props,
    exclude,
    special: {},
    version: (0,_sources_js__WEBPACK_IMPORTED_MODULE_3__.source)(0)
  }, legacy_rest_props_handler);
}

/**
 * The proxy handler for spread props. Handles the incoming array of props
 * that looks like `() => { dynamic: props }, { static: prop }, ..` and wraps
 * them so that the whole thing is passed to the component as the `$$props` argument.
 * @template {Record<string | symbol, unknown>} T
 * @type {ProxyHandler<{ props: Array<T | (() => T)> }>}}
 */
const spread_props_handler = {
  get(target, key) {
    let i = target.props.length;
    while (i--) {
      let p = target.props[i];
      if ((0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.is_function)(p)) p = p();
      if (typeof p === 'object' && p !== null && key in p) return p[key];
    }
  },
  set(target, key, value) {
    let i = target.props.length;
    while (i--) {
      let p = target.props[i];
      if ((0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.is_function)(p)) p = p();
      const desc = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.get_descriptor)(p, key);
      if (desc && desc.set) {
        desc.set(value);
        return true;
      }
    }
    return false;
  },
  getOwnPropertyDescriptor(target, key) {
    let i = target.props.length;
    while (i--) {
      let p = target.props[i];
      if ((0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.is_function)(p)) p = p();
      if (typeof p === 'object' && p !== null && key in p) {
        const descriptor = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.get_descriptor)(p, key);
        if (descriptor && !descriptor.configurable) {
          // Prevent a "Non-configurability Report Error": The target is an array, it does
          // not actually contain this property. If it is now described as non-configurable,
          // the proxy throws a validation error. Setting it to true avoids that.
          descriptor.configurable = true;
        }
        return descriptor;
      }
    }
  },
  has(target, key) {
    // To prevent a false positive `is_entry_props` in the `prop` function
    if (key === _constants_js__WEBPACK_IMPORTED_MODULE_8__.STATE_SYMBOL || key === _constants_js__WEBPACK_IMPORTED_MODULE_8__.LEGACY_PROPS) return false;
    for (let p of target.props) {
      if ((0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.is_function)(p)) p = p();
      if (p != null && key in p) return true;
    }
    return false;
  },
  ownKeys(target) {
    /** @type {Array<string | symbol>} */
    const keys = [];
    for (let p of target.props) {
      if ((0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.is_function)(p)) p = p();
      for (const key in p) {
        if (!keys.includes(key)) keys.push(key);
      }
    }
    return keys;
  }
};

/**
 * @param {Array<Record<string, unknown> | (() => Record<string, unknown>)>} props
 * @returns {any}
 */
function spread_props(...props) {
  return new Proxy({
    props
  }, spread_props_handler);
}

/**
 * This function is responsible for synchronizing a possibly bound prop with the inner component state.
 * It is used whenever the compiler sees that the component writes to the prop, or when it has a default prop_value.
 * @template V
 * @param {Record<string, unknown>} props
 * @param {string} key
 * @param {number} flags
 * @param {V | (() => V)} [fallback]
 * @returns {(() => V | ((arg: V) => V) | ((arg: V, mutation: boolean) => V))}
 */
function prop(props, key, flags, fallback) {
  var immutable = (flags & _constants_js__WEBPACK_IMPORTED_MODULE_1__.PROPS_IS_IMMUTABLE) !== 0;
  var runes = !_flags_index_js__WEBPACK_IMPORTED_MODULE_11__.legacy_mode_flag || (flags & _constants_js__WEBPACK_IMPORTED_MODULE_1__.PROPS_IS_RUNES) !== 0;
  var bindable = (flags & _constants_js__WEBPACK_IMPORTED_MODULE_1__.PROPS_IS_BINDABLE) !== 0;
  var lazy = (flags & _constants_js__WEBPACK_IMPORTED_MODULE_1__.PROPS_IS_LAZY_INITIAL) !== 0;
  var is_store_sub = false;
  var prop_value;
  if (bindable) {
    [prop_value, is_store_sub] = (0,_store_js__WEBPACK_IMPORTED_MODULE_10__.capture_store_binding)(() => (/** @type {V} */props[key]));
  } else {
    prop_value = /** @type {V} */props[key];
  }

  // Can be the case when someone does `mount(Component, props)` with `let props = $state({...})`
  // or `createClassComponent(Component, props)`
  var is_entry_props = _constants_js__WEBPACK_IMPORTED_MODULE_8__.STATE_SYMBOL in props || _constants_js__WEBPACK_IMPORTED_MODULE_8__.LEGACY_PROPS in props;
  var setter = bindable && ((0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.get_descriptor)(props, key)?.set ?? (is_entry_props && key in props && (v => props[key] = v))) || undefined;
  var fallback_value = /** @type {V} */fallback;
  var fallback_dirty = true;
  var fallback_used = false;
  var get_fallback = () => {
    fallback_used = true;
    if (fallback_dirty) {
      fallback_dirty = false;
      if (lazy) {
        fallback_value = (0,_runtime_js__WEBPACK_IMPORTED_MODULE_5__.untrack)(/** @type {() => V} */fallback);
      } else {
        fallback_value = /** @type {V} */fallback;
      }
    }
    return fallback_value;
  };
  if (prop_value === undefined && fallback !== undefined) {
    if (setter && runes) {
      _errors_js__WEBPACK_IMPORTED_MODULE_7__.props_invalid_value(key);
    }
    prop_value = get_fallback();
    if (setter) setter(prop_value);
  }

  /** @type {() => V} */
  var getter;
  if (runes) {
    getter = () => {
      var value = /** @type {V} */props[key];
      if (value === undefined) return get_fallback();
      fallback_dirty = true;
      fallback_used = false;
      return value;
    };
  } else {
    // Svelte 4 did not trigger updates when a primitive value was updated to the same value.
    // Replicate that behavior through using a derived
    var derived_getter = (immutable ? _deriveds_js__WEBPACK_IMPORTED_MODULE_4__.derived : _deriveds_js__WEBPACK_IMPORTED_MODULE_4__.derived_safe_equal)(() => (/** @type {V} */props[key]));
    derived_getter.f |= _constants_js__WEBPACK_IMPORTED_MODULE_8__.LEGACY_DERIVED_PROP;
    getter = () => {
      var value = (0,_runtime_js__WEBPACK_IMPORTED_MODULE_5__.get)(derived_getter);
      if (value !== undefined) fallback_value = /** @type {V} */undefined;
      return value === undefined ? fallback_value : value;
    };
  }

  // easy mode — prop is never written to
  if ((flags & _constants_js__WEBPACK_IMPORTED_MODULE_1__.PROPS_IS_UPDATED) === 0) {
    return getter;
  }

  // intermediate mode — prop is written to, but the parent component had
  // `bind:foo` which means we can just call `$$props.foo = value` directly
  if (setter) {
    var legacy_parent = props.$$legacy;
    return function (/** @type {any} */value, /** @type {boolean} */mutation) {
      if (arguments.length > 0) {
        // We don't want to notify if the value was mutated and the parent is in runes mode.
        // In that case the state proxy (if it exists) should take care of the notification.
        // If the parent is not in runes mode, we need to notify on mutation, too, that the prop
        // has changed because the parent will not be able to detect the change otherwise.
        if (!runes || !mutation || legacy_parent || is_store_sub) {
          /** @type {Function} */setter(mutation ? getter() : value);
        }
        return value;
      } else {
        return getter();
      }
    };
  }

  // hard mode. this is where it gets ugly — the value in the child should
  // synchronize with the parent, but it should also be possible to temporarily
  // set the value to something else locally.
  var from_child = false;
  var was_from_child = false;

  // The derived returns the current value. The underlying mutable
  // source is written to from various places to persist this value.
  var inner_current_value = (0,_sources_js__WEBPACK_IMPORTED_MODULE_3__.mutable_source)(prop_value);
  var current_value = (0,_deriveds_js__WEBPACK_IMPORTED_MODULE_4__.derived)(() => {
    var parent_value = getter();
    var child_value = (0,_runtime_js__WEBPACK_IMPORTED_MODULE_5__.get)(inner_current_value);
    if (from_child) {
      from_child = false;
      was_from_child = true;
      return child_value;
    }
    was_from_child = false;
    return inner_current_value.v = parent_value;
  });
  if (!immutable) current_value.equals = _equality_js__WEBPACK_IMPORTED_MODULE_6__.safe_equals;
  return function (/** @type {any} */value, /** @type {boolean} */mutation) {
    // legacy nonsense — need to ensure the source is invalidated when necessary
    // also needed for when handling inspect logic so we can inspect the correct source signal
    if (_runtime_js__WEBPACK_IMPORTED_MODULE_5__.captured_signals !== null) {
      // set this so that we don't reset to the parent value if `d`
      // is invalidated because of `invalidate_inner_signals` (rather
      // than because the parent or child value changed)
      from_child = was_from_child;
      // invoke getters so that signals are picked up by `invalidate_inner_signals`
      getter();
      (0,_runtime_js__WEBPACK_IMPORTED_MODULE_5__.get)(inner_current_value);
    }
    if (arguments.length > 0) {
      const new_value = mutation ? (0,_runtime_js__WEBPACK_IMPORTED_MODULE_5__.get)(current_value) : runes && bindable ? (0,_proxy_js__WEBPACK_IMPORTED_MODULE_9__.proxy)(value) : value;
      if (!current_value.equals(new_value)) {
        from_child = true;
        (0,_sources_js__WEBPACK_IMPORTED_MODULE_3__.set)(inner_current_value, new_value);
        // To ensure the fallback value is consistent when used with proxies, we
        // update the local fallback_value, but only if the fallback is actively used
        if (fallback_used && fallback_value !== undefined) {
          fallback_value = new_value;
        }
        (0,_runtime_js__WEBPACK_IMPORTED_MODULE_5__.untrack)(() => (0,_runtime_js__WEBPACK_IMPORTED_MODULE_5__.get)(current_value)); // force a synchronisation immediately
      }
      return value;
    }
    return (0,_runtime_js__WEBPACK_IMPORTED_MODULE_5__.get)(current_value);
  };
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/reactivity/sources.js":
/*!***************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/reactivity/sources.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   inspect_effects: () => (/* binding */ inspect_effects),
/* harmony export */   internal_set: () => (/* binding */ internal_set),
/* harmony export */   mutable_source: () => (/* binding */ mutable_source),
/* harmony export */   mutable_state: () => (/* binding */ mutable_state),
/* harmony export */   mutate: () => (/* binding */ mutate),
/* harmony export */   set: () => (/* binding */ set),
/* harmony export */   set_inspect_effects: () => (/* binding */ set_inspect_effects),
/* harmony export */   source: () => (/* binding */ source),
/* harmony export */   state: () => (/* binding */ state),
/* harmony export */   update: () => (/* binding */ update),
/* harmony export */   update_pre: () => (/* binding */ update_pre)
/* harmony export */ });
/* harmony import */ var esm_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! esm-env */ "../svelte/node_modules/.pnpm/esm-env@1.2.1/node_modules/esm-env/index.js");
/* harmony import */ var _runtime_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../runtime.js */ "../svelte/packages/svelte/src/internal/client/runtime.js");
/* harmony import */ var _equality_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./equality.js */ "../svelte/packages/svelte/src/internal/client/reactivity/equality.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../constants.js */ "../svelte/packages/svelte/src/internal/client/constants.js");
/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../errors.js */ "../svelte/packages/svelte/src/internal/client/errors.js");
/* harmony import */ var _flags_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../flags/index.js */ "../svelte/packages/svelte/src/internal/flags/index.js");
/* harmony import */ var _dev_tracing_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dev/tracing.js */ "../svelte/packages/svelte/src/internal/client/dev/tracing.js");
/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../context.js */ "../svelte/packages/svelte/src/internal/client/context.js");
/** @import { Derived, Effect, Reaction, Source, Value } from '#client' */








let inspect_effects = new Set();

/**
 * @param {Set<any>} v
 */
function set_inspect_effects(v) {
  inspect_effects = v;
}

/**
 * @template V
 * @param {V} v
 * @param {Error | null} [stack]
 * @returns {Source<V>}
 */
function source(v, stack) {
  /** @type {Value} */
  var signal = {
    f: 0,
    // TODO ideally we could skip this altogether, but it causes type errors
    v,
    reactions: null,
    equals: _equality_js__WEBPACK_IMPORTED_MODULE_2__.equals,
    rv: 0,
    wv: 0
  };
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV && _flags_index_js__WEBPACK_IMPORTED_MODULE_5__.tracing_mode_flag) {
    signal.created = stack ?? (0,_dev_tracing_js__WEBPACK_IMPORTED_MODULE_6__.get_stack)('CreatedAt');
    signal.debug = null;
  }
  return signal;
}

/**
 * @template V
 * @param {V} v
 */
function state(v) {
  return push_derived_source(source(v));
}

/**
 * @template V
 * @param {V} initial_value
 * @param {boolean} [immutable]
 * @returns {Source<V>}
 */
/*#__NO_SIDE_EFFECTS__*/
function mutable_source(initial_value, immutable = false) {
  const s = source(initial_value);
  if (!immutable) {
    s.equals = _equality_js__WEBPACK_IMPORTED_MODULE_2__.safe_equals;
  }

  // bind the signal to the component context, in case we need to
  // track updates to trigger beforeUpdate/afterUpdate callbacks
  if (_flags_index_js__WEBPACK_IMPORTED_MODULE_5__.legacy_mode_flag && _context_js__WEBPACK_IMPORTED_MODULE_7__.component_context !== null && _context_js__WEBPACK_IMPORTED_MODULE_7__.component_context.l !== null) {
    (_context_js__WEBPACK_IMPORTED_MODULE_7__.component_context.l.s ??= []).push(s);
  }
  return s;
}

/**
 * @template V
 * @param {V} v
 * @param {boolean} [immutable]
 * @returns {Source<V>}
 */
function mutable_state(v, immutable = false) {
  return push_derived_source(mutable_source(v, immutable));
}

/**
 * @template V
 * @param {Source<V>} source
 */
/*#__NO_SIDE_EFFECTS__*/
function push_derived_source(source) {
  if (_runtime_js__WEBPACK_IMPORTED_MODULE_1__.active_reaction !== null && !_runtime_js__WEBPACK_IMPORTED_MODULE_1__.untracking && (_runtime_js__WEBPACK_IMPORTED_MODULE_1__.active_reaction.f & _constants_js__WEBPACK_IMPORTED_MODULE_3__.DERIVED) !== 0) {
    if (_runtime_js__WEBPACK_IMPORTED_MODULE_1__.derived_sources === null) {
      (0,_runtime_js__WEBPACK_IMPORTED_MODULE_1__.set_derived_sources)([source]);
    } else {
      _runtime_js__WEBPACK_IMPORTED_MODULE_1__.derived_sources.push(source);
    }
  }
  return source;
}

/**
 * @template V
 * @param {Value<V>} source
 * @param {V} value
 */
function mutate(source, value) {
  set(source, (0,_runtime_js__WEBPACK_IMPORTED_MODULE_1__.untrack)(() => (0,_runtime_js__WEBPACK_IMPORTED_MODULE_1__.get)(source)));
  return value;
}

/**
 * @template V
 * @param {Source<V>} source
 * @param {V} value
 * @returns {V}
 */
function set(source, value) {
  if (_runtime_js__WEBPACK_IMPORTED_MODULE_1__.active_reaction !== null && !_runtime_js__WEBPACK_IMPORTED_MODULE_1__.untracking && (0,_context_js__WEBPACK_IMPORTED_MODULE_7__.is_runes)() && (_runtime_js__WEBPACK_IMPORTED_MODULE_1__.active_reaction.f & (_constants_js__WEBPACK_IMPORTED_MODULE_3__.DERIVED | _constants_js__WEBPACK_IMPORTED_MODULE_3__.BLOCK_EFFECT)) !== 0 && (
  // If the source was created locally within the current derived, then
  // we allow the mutation.
  _runtime_js__WEBPACK_IMPORTED_MODULE_1__.derived_sources === null || !_runtime_js__WEBPACK_IMPORTED_MODULE_1__.derived_sources.includes(source))) {
    _errors_js__WEBPACK_IMPORTED_MODULE_4__.state_unsafe_mutation();
  }
  return internal_set(source, value);
}

/**
 * @template V
 * @param {Source<V>} source
 * @param {V} value
 * @returns {V}
 */
function internal_set(source, value) {
  if (!source.equals(value)) {
    var old_value = source.v;
    source.v = value;
    source.wv = (0,_runtime_js__WEBPACK_IMPORTED_MODULE_1__.increment_write_version)();
    if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV && _flags_index_js__WEBPACK_IMPORTED_MODULE_5__.tracing_mode_flag) {
      source.updated = (0,_dev_tracing_js__WEBPACK_IMPORTED_MODULE_6__.get_stack)('UpdatedAt');
      if (_runtime_js__WEBPACK_IMPORTED_MODULE_1__.active_effect != null) {
        source.trace_need_increase = true;
        source.trace_v ??= old_value;
      }
    }
    mark_reactions(source, _constants_js__WEBPACK_IMPORTED_MODULE_3__.DIRTY);

    // It's possible that the current reaction might not have up-to-date dependencies
    // whilst it's actively running. So in the case of ensuring it registers the reaction
    // properly for itself, we need to ensure the current effect actually gets
    // scheduled. i.e: `$effect(() => x++)`
    if ((0,_context_js__WEBPACK_IMPORTED_MODULE_7__.is_runes)() && _runtime_js__WEBPACK_IMPORTED_MODULE_1__.active_effect !== null && (_runtime_js__WEBPACK_IMPORTED_MODULE_1__.active_effect.f & _constants_js__WEBPACK_IMPORTED_MODULE_3__.CLEAN) !== 0 && (_runtime_js__WEBPACK_IMPORTED_MODULE_1__.active_effect.f & (_constants_js__WEBPACK_IMPORTED_MODULE_3__.BRANCH_EFFECT | _constants_js__WEBPACK_IMPORTED_MODULE_3__.ROOT_EFFECT)) === 0) {
      if (_runtime_js__WEBPACK_IMPORTED_MODULE_1__.untracked_writes === null) {
        (0,_runtime_js__WEBPACK_IMPORTED_MODULE_1__.set_untracked_writes)([source]);
      } else {
        _runtime_js__WEBPACK_IMPORTED_MODULE_1__.untracked_writes.push(source);
      }
    }
    if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV && inspect_effects.size > 0) {
      const inspects = Array.from(inspect_effects);
      var previously_flushing_effect = _runtime_js__WEBPACK_IMPORTED_MODULE_1__.is_flushing_effect;
      (0,_runtime_js__WEBPACK_IMPORTED_MODULE_1__.set_is_flushing_effect)(true);
      try {
        for (const effect of inspects) {
          // Mark clean inspect-effects as maybe dirty and then check their dirtiness
          // instead of just updating the effects - this way we avoid overfiring.
          if ((effect.f & _constants_js__WEBPACK_IMPORTED_MODULE_3__.CLEAN) !== 0) {
            (0,_runtime_js__WEBPACK_IMPORTED_MODULE_1__.set_signal_status)(effect, _constants_js__WEBPACK_IMPORTED_MODULE_3__.MAYBE_DIRTY);
          }
          if ((0,_runtime_js__WEBPACK_IMPORTED_MODULE_1__.check_dirtiness)(effect)) {
            (0,_runtime_js__WEBPACK_IMPORTED_MODULE_1__.update_effect)(effect);
          }
        }
      } finally {
        (0,_runtime_js__WEBPACK_IMPORTED_MODULE_1__.set_is_flushing_effect)(previously_flushing_effect);
      }
      inspect_effects.clear();
    }
  }
  return value;
}

/**
 * @template {number | bigint} T
 * @param {Source<T>} source
 * @param {1 | -1} [d]
 * @returns {T}
 */
function update(source, d = 1) {
  var value = (0,_runtime_js__WEBPACK_IMPORTED_MODULE_1__.get)(source);
  var result = d === 1 ? value++ : value--;
  set(source, value);

  // @ts-expect-error
  return result;
}

/**
 * @template {number | bigint} T
 * @param {Source<T>} source
 * @param {1 | -1} [d]
 * @returns {T}
 */
function update_pre(source, d = 1) {
  var value = (0,_runtime_js__WEBPACK_IMPORTED_MODULE_1__.get)(source);

  // @ts-expect-error
  return set(source, d === 1 ? ++value : --value);
}

/**
 * @param {Value} signal
 * @param {number} status should be DIRTY or MAYBE_DIRTY
 * @returns {void}
 */
function mark_reactions(signal, status) {
  var reactions = signal.reactions;
  if (reactions === null) return;
  var runes = (0,_context_js__WEBPACK_IMPORTED_MODULE_7__.is_runes)();
  var length = reactions.length;
  for (var i = 0; i < length; i++) {
    var reaction = reactions[i];
    var flags = reaction.f;

    // Skip any effects that are already dirty
    if ((flags & _constants_js__WEBPACK_IMPORTED_MODULE_3__.DIRTY) !== 0) continue;

    // In legacy mode, skip the current effect to prevent infinite loops
    if (!runes && reaction === _runtime_js__WEBPACK_IMPORTED_MODULE_1__.active_effect) continue;

    // Inspect effects need to run immediately, so that the stack trace makes sense
    if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV && (flags & _constants_js__WEBPACK_IMPORTED_MODULE_3__.INSPECT_EFFECT) !== 0) {
      inspect_effects.add(reaction);
      continue;
    }
    (0,_runtime_js__WEBPACK_IMPORTED_MODULE_1__.set_signal_status)(reaction, status);

    // If the signal a) was previously clean or b) is an unowned derived, then mark it
    if ((flags & (_constants_js__WEBPACK_IMPORTED_MODULE_3__.CLEAN | _constants_js__WEBPACK_IMPORTED_MODULE_3__.UNOWNED)) !== 0) {
      if ((flags & _constants_js__WEBPACK_IMPORTED_MODULE_3__.DERIVED) !== 0) {
        mark_reactions(/** @type {Derived} */reaction, _constants_js__WEBPACK_IMPORTED_MODULE_3__.MAYBE_DIRTY);
      } else {
        (0,_runtime_js__WEBPACK_IMPORTED_MODULE_1__.schedule_effect)(/** @type {Effect} */reaction);
      }
    }
  }
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/reactivity/store.js":
/*!*************************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/reactivity/store.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   capture_store_binding: () => (/* binding */ capture_store_binding),
/* harmony export */   invalidate_store: () => (/* binding */ invalidate_store),
/* harmony export */   mark_store_binding: () => (/* binding */ mark_store_binding),
/* harmony export */   setup_stores: () => (/* binding */ setup_stores),
/* harmony export */   store_get: () => (/* binding */ store_get),
/* harmony export */   store_mutate: () => (/* binding */ store_mutate),
/* harmony export */   store_set: () => (/* binding */ store_set),
/* harmony export */   store_unsub: () => (/* binding */ store_unsub),
/* harmony export */   update_pre_store: () => (/* binding */ update_pre_store),
/* harmony export */   update_store: () => (/* binding */ update_store)
/* harmony export */ });
/* harmony import */ var _store_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../store/utils.js */ "../svelte/packages/svelte/src/store/utils.js");
/* harmony import */ var _store_shared_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../store/shared/index.js */ "../svelte/packages/svelte/src/store/shared/index.js");
/* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../shared/utils.js */ "../svelte/packages/svelte/src/internal/shared/utils.js");
/* harmony import */ var _runtime_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../runtime.js */ "../svelte/packages/svelte/src/internal/client/runtime.js");
/* harmony import */ var _effects_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _sources_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./sources.js */ "../svelte/packages/svelte/src/internal/client/reactivity/sources.js");
/** @import { StoreReferencesContainer } from '#client' */
/** @import { Store } from '#shared' */







/**
 * Whether or not the prop currently being read is a store binding, as in
 * `<Child bind:x={$y} />`. If it is, we treat the prop as mutable even in
 * runes mode, and skip `binding_property_non_reactive` validation
 */
let is_store_binding = false;
let IS_UNMOUNTED = Symbol();

/**
 * Gets the current value of a store. If the store isn't subscribed to yet, it will create a proxy
 * signal that will be updated when the store is. The store references container is needed to
 * track reassignments to stores and to track the correct component context.
 * @template V
 * @param {Store<V> | null | undefined} store
 * @param {string} store_name
 * @param {StoreReferencesContainer} stores
 * @returns {V}
 */
function store_get(store, store_name, stores) {
  const entry = stores[store_name] ??= {
    store: null,
    source: (0,_sources_js__WEBPACK_IMPORTED_MODULE_5__.mutable_source)(undefined),
    unsubscribe: _shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.noop
  };

  // if the component that setup this is already unmounted we don't want to register a subscription
  if (entry.store !== store && !(IS_UNMOUNTED in stores)) {
    entry.unsubscribe();
    entry.store = store ?? null;
    if (store == null) {
      entry.source.v = undefined; // see synchronous callback comment below
      entry.unsubscribe = _shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.noop;
    } else {
      var is_synchronous_callback = true;
      entry.unsubscribe = (0,_store_utils_js__WEBPACK_IMPORTED_MODULE_0__.subscribe_to_store)(store, v => {
        if (is_synchronous_callback) {
          // If the first updates to the store value (possibly multiple of them) are synchronously
          // inside a derived, we will hit the `state_unsafe_mutation` error if we `set` the value
          entry.source.v = v;
        } else {
          (0,_sources_js__WEBPACK_IMPORTED_MODULE_5__.set)(entry.source, v);
        }
      });
      is_synchronous_callback = false;
    }
  }

  // if the component that setup this stores is already unmounted the source will be out of sync
  // so we just use the `get` for the stores, less performant but it avoids to create a memory leak
  // and it will keep the value consistent
  if (store && IS_UNMOUNTED in stores) {
    return (0,_store_shared_index_js__WEBPACK_IMPORTED_MODULE_1__.get)(store);
  }
  return (0,_runtime_js__WEBPACK_IMPORTED_MODULE_3__.get)(entry.source);
}

/**
 * Unsubscribe from a store if it's not the same as the one in the store references container.
 * We need this in addition to `store_get` because someone could unsubscribe from a store but
 * then never subscribe to the new one (if any), causing the subscription to stay open wrongfully.
 * @param {Store<any> | null | undefined} store
 * @param {string} store_name
 * @param {StoreReferencesContainer} stores
 */
function store_unsub(store, store_name, stores) {
  /** @type {StoreReferencesContainer[''] | undefined} */
  let entry = stores[store_name];
  if (entry && entry.store !== store) {
    // Don't reset store yet, so that store_get above can resubscribe to new store if necessary
    entry.unsubscribe();
    entry.unsubscribe = _shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.noop;
  }
  return store;
}

/**
 * Sets the new value of a store and returns that value.
 * @template V
 * @param {Store<V>} store
 * @param {V} value
 * @returns {V}
 */
function store_set(store, value) {
  store.set(value);
  return value;
}

/**
 * @param {StoreReferencesContainer} stores
 * @param {string} store_name
 */
function invalidate_store(stores, store_name) {
  var entry = stores[store_name];
  if (entry.store !== null) {
    store_set(entry.store, entry.source.v);
  }
}

/**
 * Unsubscribes from all auto-subscribed stores on destroy
 * @returns {[StoreReferencesContainer, ()=>void]}
 */
function setup_stores() {
  /** @type {StoreReferencesContainer} */
  const stores = {};
  function cleanup() {
    (0,_effects_js__WEBPACK_IMPORTED_MODULE_4__.teardown)(() => {
      for (var store_name in stores) {
        const ref = stores[store_name];
        ref.unsubscribe();
      }
      (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.define_property)(stores, IS_UNMOUNTED, {
        enumerable: false,
        value: true
      });
    });
  }
  return [stores, cleanup];
}

/**
 * Updates a store with a new value.
 * @param {Store<V>} store  the store to update
 * @param {any} expression  the expression that mutates the store
 * @param {V} new_value  the new store value
 * @template V
 */
function store_mutate(store, expression, new_value) {
  store.set(new_value);
  return expression;
}

/**
 * @param {Store<number>} store
 * @param {number} store_value
 * @param {1 | -1} [d]
 * @returns {number}
 */
function update_store(store, store_value, d = 1) {
  store.set(store_value + d);
  return store_value;
}

/**
 * @param {Store<number>} store
 * @param {number} store_value
 * @param {1 | -1} [d]
 * @returns {number}
 */
function update_pre_store(store, store_value, d = 1) {
  const value = store_value + d;
  store.set(value);
  return value;
}

/**
 * Called inside prop getters to communicate that the prop is a store binding
 */
function mark_store_binding() {
  is_store_binding = true;
}

/**
 * Returns a tuple that indicates whether `fn()` reads a prop that is a store binding.
 * Used to prevent `binding_property_non_reactive` validation false positives and
 * ensure that these props are treated as mutable even in runes mode
 * @template T
 * @param {() => T} fn
 * @returns {[T, boolean]}
 */
function capture_store_binding(fn) {
  var previous_is_store_binding = is_store_binding;
  try {
    is_store_binding = false;
    return [fn(), is_store_binding];
  } finally {
    is_store_binding = previous_is_store_binding;
  }
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/render.js":
/*!***************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/render.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   hydrate: () => (/* binding */ hydrate),
/* harmony export */   mount: () => (/* binding */ mount),
/* harmony export */   set_should_intro: () => (/* binding */ set_should_intro),
/* harmony export */   set_text: () => (/* binding */ set_text),
/* harmony export */   should_intro: () => (/* binding */ should_intro),
/* harmony export */   unmount: () => (/* binding */ unmount)
/* harmony export */ });
/* harmony import */ var esm_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! esm-env */ "../svelte/node_modules/.pnpm/esm-env@1.2.1/node_modules/esm-env/index.js");
/* harmony import */ var _dom_operations_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom/operations.js */ "../svelte/packages/svelte/src/internal/client/dom/operations.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../constants.js */ "../svelte/packages/svelte/src/constants.js");
/* harmony import */ var _runtime_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./runtime.js */ "../svelte/packages/svelte/src/internal/client/runtime.js");
/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./context.js */ "../svelte/packages/svelte/src/internal/client/context.js");
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _dom_hydration_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./dom/hydration.js */ "../svelte/packages/svelte/src/internal/client/dom/hydration.js");
/* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../shared/utils.js */ "../svelte/packages/svelte/src/internal/shared/utils.js");
/* harmony import */ var _dom_elements_events_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./dom/elements/events.js */ "../svelte/packages/svelte/src/internal/client/dom/elements/events.js");
/* harmony import */ var _dom_blocks_svelte_head_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./dom/blocks/svelte-head.js */ "../svelte/packages/svelte/src/internal/client/dom/blocks/svelte-head.js");
/* harmony import */ var _warnings_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./warnings.js */ "../svelte/packages/svelte/src/internal/client/warnings.js");
/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./errors.js */ "../svelte/packages/svelte/src/internal/client/errors.js");
/* harmony import */ var _dom_template_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./dom/template.js */ "../svelte/packages/svelte/src/internal/client/dom/template.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../utils.js */ "../svelte/packages/svelte/src/utils.js");
/** @import { ComponentContext, Effect, TemplateNode } from '#client' */
/** @import { Component, ComponentType, SvelteComponent, MountOptions } from '../../index.js' */















/**
 * This is normally true — block effects should run their intro transitions —
 * but is false during hydration (unless `options.intro` is `true`) and
 * when creating the children of a `<svelte:element>` that just changed tag
 */
let should_intro = true;

/** @param {boolean} value */
function set_should_intro(value) {
  should_intro = value;
}

/**
 * @param {Element} text
 * @param {string} value
 * @returns {void}
 */
function set_text(text, value) {
  // For objects, we apply string coercion (which might make things like $state array references in the template reactive) before diffing
  var str = value == null ? '' : typeof value === 'object' ? value + '' : value;
  // @ts-expect-error
  if (str !== (text.__t ??= text.nodeValue)) {
    // @ts-expect-error
    text.__t = str;
    text.nodeValue = str + '';
  }
}

/**
 * Mounts a component to the given target and returns the exports and potentially the props (if compiled with `accessors: true`) of the component.
 * Transitions will play during the initial render unless the `intro` option is set to `false`.
 *
 * @template {Record<string, any>} Props
 * @template {Record<string, any>} Exports
 * @param {ComponentType<SvelteComponent<Props>> | Component<Props, Exports, any>} component
 * @param {MountOptions<Props>} options
 * @returns {Exports}
 */
function mount(component, options) {
  return _mount(component, options);
}

/**
 * Hydrates a component on the given target and returns the exports and potentially the props (if compiled with `accessors: true`) of the component
 *
 * @template {Record<string, any>} Props
 * @template {Record<string, any>} Exports
 * @param {ComponentType<SvelteComponent<Props>> | Component<Props, Exports, any>} component
 * @param {{} extends Props ? {
 * 		target: Document | Element | ShadowRoot;
 * 		props?: Props;
 * 		events?: Record<string, (e: any) => any>;
 *  	context?: Map<any, any>;
 * 		intro?: boolean;
 * 		recover?: boolean;
 * 	} : {
 * 		target: Document | Element | ShadowRoot;
 * 		props: Props;
 * 		events?: Record<string, (e: any) => any>;
 *  	context?: Map<any, any>;
 * 		intro?: boolean;
 * 		recover?: boolean;
 * 	}} options
 * @returns {Exports}
 */
function hydrate(component, options) {
  (0,_dom_operations_js__WEBPACK_IMPORTED_MODULE_1__.init_operations)();
  options.intro = options.intro ?? false;
  const target = options.target;
  const was_hydrating = _dom_hydration_js__WEBPACK_IMPORTED_MODULE_6__.hydrating;
  const previous_hydrate_node = _dom_hydration_js__WEBPACK_IMPORTED_MODULE_6__.hydrate_node;
  try {
    var anchor = /** @type {TemplateNode} */(0,_dom_operations_js__WEBPACK_IMPORTED_MODULE_1__.get_first_child)(target);
    while (anchor && (anchor.nodeType !== 8 || /** @type {Comment} */anchor.data !== _constants_js__WEBPACK_IMPORTED_MODULE_2__.HYDRATION_START)) {
      anchor = /** @type {TemplateNode} */(0,_dom_operations_js__WEBPACK_IMPORTED_MODULE_1__.get_next_sibling)(anchor);
    }
    if (!anchor) {
      throw _constants_js__WEBPACK_IMPORTED_MODULE_2__.HYDRATION_ERROR;
    }
    (0,_dom_hydration_js__WEBPACK_IMPORTED_MODULE_6__.set_hydrating)(true);
    (0,_dom_hydration_js__WEBPACK_IMPORTED_MODULE_6__.set_hydrate_node)(/** @type {Comment} */anchor);
    (0,_dom_hydration_js__WEBPACK_IMPORTED_MODULE_6__.hydrate_next)();
    const instance = _mount(component, {
      ...options,
      anchor
    });
    if (_dom_hydration_js__WEBPACK_IMPORTED_MODULE_6__.hydrate_node === null || _dom_hydration_js__WEBPACK_IMPORTED_MODULE_6__.hydrate_node.nodeType !== 8 || /** @type {Comment} */_dom_hydration_js__WEBPACK_IMPORTED_MODULE_6__.hydrate_node.data !== _constants_js__WEBPACK_IMPORTED_MODULE_2__.HYDRATION_END) {
      _warnings_js__WEBPACK_IMPORTED_MODULE_10__.hydration_mismatch();
      throw _constants_js__WEBPACK_IMPORTED_MODULE_2__.HYDRATION_ERROR;
    }
    (0,_dom_hydration_js__WEBPACK_IMPORTED_MODULE_6__.set_hydrating)(false);
    return /**  @type {Exports} */instance;
  } catch (error) {
    if (error === _constants_js__WEBPACK_IMPORTED_MODULE_2__.HYDRATION_ERROR) {
      if (options.recover === false) {
        _errors_js__WEBPACK_IMPORTED_MODULE_11__.hydration_failed();
      }

      // If an error occured above, the operations might not yet have been initialised.
      (0,_dom_operations_js__WEBPACK_IMPORTED_MODULE_1__.init_operations)();
      (0,_dom_operations_js__WEBPACK_IMPORTED_MODULE_1__.clear_text_content)(target);
      (0,_dom_hydration_js__WEBPACK_IMPORTED_MODULE_6__.set_hydrating)(false);
      return mount(component, options);
    }
    throw error;
  } finally {
    (0,_dom_hydration_js__WEBPACK_IMPORTED_MODULE_6__.set_hydrating)(was_hydrating);
    (0,_dom_hydration_js__WEBPACK_IMPORTED_MODULE_6__.set_hydrate_node)(previous_hydrate_node);
    (0,_dom_blocks_svelte_head_js__WEBPACK_IMPORTED_MODULE_9__.reset_head_anchor)();
  }
}

/** @type {Map<string, number>} */
const document_listeners = new Map();

/**
 * @template {Record<string, any>} Exports
 * @param {ComponentType<SvelteComponent<any>> | Component<any>} Component
 * @param {MountOptions} options
 * @returns {Exports}
 */
function _mount(Component, {
  target,
  anchor,
  props = {},
  events,
  context,
  intro = true
}) {
  (0,_dom_operations_js__WEBPACK_IMPORTED_MODULE_1__.init_operations)();
  var registered_events = new Set();

  /** @param {Array<string>} events */
  var event_handle = events => {
    for (var i = 0; i < events.length; i++) {
      var event_name = events[i];
      if (registered_events.has(event_name)) continue;
      registered_events.add(event_name);
      var passive = (0,_utils_js__WEBPACK_IMPORTED_MODULE_13__.is_passive_event)(event_name);

      // Add the event listener to both the container and the document.
      // The container listener ensures we catch events from within in case
      // the outer content stops propagation of the event.
      target.addEventListener(event_name, _dom_elements_events_js__WEBPACK_IMPORTED_MODULE_8__.handle_event_propagation, {
        passive
      });
      var n = document_listeners.get(event_name);
      if (n === undefined) {
        // The document listener ensures we catch events that originate from elements that were
        // manually moved outside of the container (e.g. via manual portals).
        document.addEventListener(event_name, _dom_elements_events_js__WEBPACK_IMPORTED_MODULE_8__.handle_event_propagation, {
          passive
        });
        document_listeners.set(event_name, 1);
      } else {
        document_listeners.set(event_name, n + 1);
      }
    }
  };
  event_handle((0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_7__.array_from)(_dom_elements_events_js__WEBPACK_IMPORTED_MODULE_8__.all_registered_events));
  _dom_elements_events_js__WEBPACK_IMPORTED_MODULE_8__.root_event_handles.add(event_handle);

  /** @type {Exports} */
  // @ts-expect-error will be defined because the render effect runs synchronously
  var component = undefined;
  var unmount = (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_5__.component_root)(() => {
    var anchor_node = anchor ?? target.appendChild((0,_dom_operations_js__WEBPACK_IMPORTED_MODULE_1__.create_text)());
    (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_5__.branch)(() => {
      if (context) {
        (0,_context_js__WEBPACK_IMPORTED_MODULE_4__.push)({});
        var ctx = /** @type {ComponentContext} */_context_js__WEBPACK_IMPORTED_MODULE_4__.component_context;
        ctx.c = context;
      }
      if (events) {
        // We can't spread the object or else we'd lose the state proxy stuff, if it is one
        /** @type {any} */
        props.$$events = events;
      }
      if (_dom_hydration_js__WEBPACK_IMPORTED_MODULE_6__.hydrating) {
        (0,_dom_template_js__WEBPACK_IMPORTED_MODULE_12__.assign_nodes)(/** @type {TemplateNode} */anchor_node, null);
      }
      should_intro = intro;
      // @ts-expect-error the public typings are not what the actual function looks like
      component = Component(anchor_node, props) || {};
      should_intro = true;
      if (_dom_hydration_js__WEBPACK_IMPORTED_MODULE_6__.hydrating) {
        /** @type {Effect} */_runtime_js__WEBPACK_IMPORTED_MODULE_3__.active_effect.nodes_end = _dom_hydration_js__WEBPACK_IMPORTED_MODULE_6__.hydrate_node;
      }
      if (context) {
        (0,_context_js__WEBPACK_IMPORTED_MODULE_4__.pop)();
      }
    });
    return () => {
      for (var event_name of registered_events) {
        target.removeEventListener(event_name, _dom_elements_events_js__WEBPACK_IMPORTED_MODULE_8__.handle_event_propagation);
        var n = /** @type {number} */document_listeners.get(event_name);
        if (--n === 0) {
          document.removeEventListener(event_name, _dom_elements_events_js__WEBPACK_IMPORTED_MODULE_8__.handle_event_propagation);
          document_listeners.delete(event_name);
        } else {
          document_listeners.set(event_name, n);
        }
      }
      _dom_elements_events_js__WEBPACK_IMPORTED_MODULE_8__.root_event_handles.delete(event_handle);
      if (anchor_node !== anchor) {
        anchor_node.parentNode?.removeChild(anchor_node);
      }
    };
  });
  mounted_components.set(component, unmount);
  return component;
}

/**
 * References of the components that were mounted or hydrated.
 * Uses a `WeakMap` to avoid memory leaks.
 */
let mounted_components = new WeakMap();

/**
 * Unmounts a component that was previously mounted using `mount` or `hydrate`.
 *
 * Since 5.13.0, if `options.outro` is `true`, [transitions](https://svelte.dev/docs/svelte/transition) will play before the component is removed from the DOM.
 *
 * Returns a `Promise` that resolves after transitions have completed if `options.outro` is true, or immediately otherwise (prior to 5.13.0, returns `void`).
 *
 * ```js
 * import { mount, unmount } from 'svelte';
 * import App from './App.svelte';
 *
 * const app = mount(App, { target: document.body });
 *
 * // later...
 * unmount(app, { outro: true });
 * ```
 * @param {Record<string, any>} component
 * @param {{ outro?: boolean }} [options]
 * @returns {Promise<void>}
 */
function unmount(component, options) {
  const fn = mounted_components.get(component);
  if (fn) {
    mounted_components.delete(component);
    return fn(options);
  }
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    _warnings_js__WEBPACK_IMPORTED_MODULE_10__.lifecycle_double_unmount();
  }
  return Promise.resolve();
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/runtime.js":
/*!****************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/runtime.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   active_effect: () => (/* binding */ active_effect),
/* harmony export */   active_reaction: () => (/* binding */ active_reaction),
/* harmony export */   capture_signals: () => (/* binding */ capture_signals),
/* harmony export */   captured_signals: () => (/* binding */ captured_signals),
/* harmony export */   check_dirtiness: () => (/* binding */ check_dirtiness),
/* harmony export */   deep_read: () => (/* binding */ deep_read),
/* harmony export */   deep_read_state: () => (/* binding */ deep_read_state),
/* harmony export */   derived_sources: () => (/* binding */ derived_sources),
/* harmony export */   exclude_from_object: () => (/* binding */ exclude_from_object),
/* harmony export */   flush_sync: () => (/* binding */ flush_sync),
/* harmony export */   get: () => (/* binding */ get),
/* harmony export */   handle_error: () => (/* binding */ handle_error),
/* harmony export */   increment_write_version: () => (/* binding */ increment_write_version),
/* harmony export */   invalidate_inner_signals: () => (/* binding */ invalidate_inner_signals),
/* harmony export */   is_destroying_effect: () => (/* binding */ is_destroying_effect),
/* harmony export */   is_flushing_effect: () => (/* binding */ is_flushing_effect),
/* harmony export */   is_throwing_error: () => (/* binding */ is_throwing_error),
/* harmony export */   new_deps: () => (/* binding */ new_deps),
/* harmony export */   remove_reactions: () => (/* binding */ remove_reactions),
/* harmony export */   reset_is_throwing_error: () => (/* binding */ reset_is_throwing_error),
/* harmony export */   safe_get: () => (/* binding */ safe_get),
/* harmony export */   schedule_effect: () => (/* binding */ schedule_effect),
/* harmony export */   set_active_effect: () => (/* binding */ set_active_effect),
/* harmony export */   set_active_reaction: () => (/* binding */ set_active_reaction),
/* harmony export */   set_captured_signals: () => (/* binding */ set_captured_signals),
/* harmony export */   set_derived_sources: () => (/* binding */ set_derived_sources),
/* harmony export */   set_is_destroying_effect: () => (/* binding */ set_is_destroying_effect),
/* harmony export */   set_is_flushing_effect: () => (/* binding */ set_is_flushing_effect),
/* harmony export */   set_signal_status: () => (/* binding */ set_signal_status),
/* harmony export */   set_untracked_writes: () => (/* binding */ set_untracked_writes),
/* harmony export */   skip_reaction: () => (/* binding */ skip_reaction),
/* harmony export */   tick: () => (/* binding */ tick),
/* harmony export */   untrack: () => (/* binding */ untrack),
/* harmony export */   untracked_writes: () => (/* binding */ untracked_writes),
/* harmony export */   untracking: () => (/* binding */ untracking),
/* harmony export */   update_effect: () => (/* binding */ update_effect),
/* harmony export */   update_reaction: () => (/* binding */ update_reaction)
/* harmony export */ });
/* harmony import */ var esm_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! esm-env */ "../svelte/node_modules/.pnpm/esm-env@1.2.1/node_modules/esm-env/index.js");
/* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.js */ "../svelte/packages/svelte/src/internal/shared/utils.js");
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants.js */ "../svelte/packages/svelte/src/internal/client/constants.js");
/* harmony import */ var _dom_task_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dom/task.js */ "../svelte/packages/svelte/src/internal/client/dom/task.js");
/* harmony import */ var _reactivity_sources_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./reactivity/sources.js */ "../svelte/packages/svelte/src/internal/client/reactivity/sources.js");
/* harmony import */ var _reactivity_deriveds_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./reactivity/deriveds.js */ "../svelte/packages/svelte/src/internal/client/reactivity/deriveds.js");
/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./errors.js */ "../svelte/packages/svelte/src/internal/client/errors.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../constants.js */ "../svelte/packages/svelte/src/constants.js");
/* harmony import */ var _flags_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../flags/index.js */ "../svelte/packages/svelte/src/internal/flags/index.js");
/* harmony import */ var _dev_tracing_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./dev/tracing.js */ "../svelte/packages/svelte/src/internal/client/dev/tracing.js");
/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./context.js */ "../svelte/packages/svelte/src/internal/client/context.js");
/* harmony import */ var _dom_operations_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./dom/operations.js */ "../svelte/packages/svelte/src/internal/client/dom/operations.js");
/** @import { ComponentContext, Derived, Effect, Reaction, Signal, Source, Value } from '#client' */













const FLUSH_MICROTASK = 0;
const FLUSH_SYNC = 1;
// Used for DEV time error handling
/** @param {WeakSet<Error>} value */
const handled_errors = new WeakSet();
let is_throwing_error = false;

// Used for controlling the flush of effects.
let scheduler_mode = FLUSH_MICROTASK;
// Used for handling scheduling
let is_micro_task_queued = false;

/** @type {Effect | null} */
let last_scheduled_effect = null;
let is_flushing_effect = false;
let is_destroying_effect = false;

/** @param {boolean} value */
function set_is_flushing_effect(value) {
  is_flushing_effect = value;
}

/** @param {boolean} value */
function set_is_destroying_effect(value) {
  is_destroying_effect = value;
}

// Handle effect queues

/** @type {Effect[]} */
let queued_root_effects = [];
let flush_count = 0;
/** @type {Effect[]} Stack of effects, dev only */
let dev_effect_stack = [];
// Handle signal reactivity tree dependencies and reactions

/** @type {null | Reaction} */
let active_reaction = null;
let untracking = false;

/** @param {null | Reaction} reaction */
function set_active_reaction(reaction) {
  active_reaction = reaction;
}

/** @type {null | Effect} */
let active_effect = null;

/** @param {null | Effect} effect */
function set_active_effect(effect) {
  active_effect = effect;
}

/**
 * When sources are created within a derived, we record them so that we can safely allow
 * local mutations to these sources without the side-effect error being invoked unnecessarily.
 * @type {null | Source[]}
 */
let derived_sources = null;

/**
 * @param {Source[] | null} sources
 */
function set_derived_sources(sources) {
  derived_sources = sources;
}

/**
 * The dependencies of the reaction that is currently being executed. In many cases,
 * the dependencies are unchanged between runs, and so this will be `null` unless
 * and until a new dependency is accessed — we track this via `skipped_deps`
 * @type {null | Value[]}
 */
let new_deps = null;
let skipped_deps = 0;

/**
 * Tracks writes that the effect it's executed in doesn't listen to yet,
 * so that the dependency can be added to the effect later on if it then reads it
 * @type {null | Source[]}
 */
let untracked_writes = null;

/** @param {null | Source[]} value */
function set_untracked_writes(value) {
  untracked_writes = value;
}

/**
 * @type {number} Used by sources and deriveds for handling updates.
 * Version starts from 1 so that unowned deriveds differentiate between a created effect and a run one for tracing
 **/
let write_version = 1;

/** @type {number} Used to version each read of a source of derived to avoid duplicating depedencies inside a reaction */
let read_version = 0;

// If we are working with a get() chain that has no active container,
// to prevent memory leaks, we skip adding the reaction.
let skip_reaction = false;
// Handle collecting all signals which are read during a specific time frame
/** @type {Set<Value> | null} */
let captured_signals = null;

/** @param {Set<Value> | null} value */
function set_captured_signals(value) {
  captured_signals = value;
}
function increment_write_version() {
  return ++write_version;
}

/**
 * Determines whether a derived or effect is dirty.
 * If it is MAYBE_DIRTY, will set the status to CLEAN
 * @param {Reaction} reaction
 * @returns {boolean}
 */
function check_dirtiness(reaction) {
  var flags = reaction.f;
  if ((flags & _constants_js__WEBPACK_IMPORTED_MODULE_3__.DIRTY) !== 0) {
    return true;
  }
  if ((flags & _constants_js__WEBPACK_IMPORTED_MODULE_3__.MAYBE_DIRTY) !== 0) {
    var dependencies = reaction.deps;
    var is_unowned = (flags & _constants_js__WEBPACK_IMPORTED_MODULE_3__.UNOWNED) !== 0;
    if (dependencies !== null) {
      var i;
      var dependency;
      var is_disconnected = (flags & _constants_js__WEBPACK_IMPORTED_MODULE_3__.DISCONNECTED) !== 0;
      var is_unowned_connected = is_unowned && active_effect !== null && !skip_reaction;
      var length = dependencies.length;

      // If we are working with a disconnected or an unowned signal that is now connected (due to an active effect)
      // then we need to re-connect the reaction to the dependency
      if (is_disconnected || is_unowned_connected) {
        var derived = /** @type {Derived} */reaction;
        var parent = derived.parent;
        for (i = 0; i < length; i++) {
          dependency = dependencies[i];

          // We always re-add all reactions (even duplicates) if the derived was
          // previously disconnected, however we don't if it was unowned as we
          // de-duplicate dependencies in that case
          if (is_disconnected || !dependency?.reactions?.includes(derived)) {
            (dependency.reactions ??= []).push(derived);
          }
        }
        if (is_disconnected) {
          derived.f ^= _constants_js__WEBPACK_IMPORTED_MODULE_3__.DISCONNECTED;
        }
        // If the unowned derived is now fully connected to the graph again (it's unowned and reconnected, has a parent
        // and the parent is not unowned), then we can mark it as connected again, removing the need for the unowned
        // flag
        if (is_unowned_connected && parent !== null && (parent.f & _constants_js__WEBPACK_IMPORTED_MODULE_3__.UNOWNED) === 0) {
          derived.f ^= _constants_js__WEBPACK_IMPORTED_MODULE_3__.UNOWNED;
        }
      }
      for (i = 0; i < length; i++) {
        dependency = dependencies[i];
        if (check_dirtiness(/** @type {Derived} */dependency)) {
          (0,_reactivity_deriveds_js__WEBPACK_IMPORTED_MODULE_6__.update_derived)(/** @type {Derived} */dependency);
        }
        if (dependency.wv > reaction.wv) {
          return true;
        }
      }
    }

    // Unowned signals should never be marked as clean unless they
    // are used within an active_effect without skip_reaction
    if (!is_unowned || active_effect !== null && !skip_reaction) {
      set_signal_status(reaction, _constants_js__WEBPACK_IMPORTED_MODULE_3__.CLEAN);
    }
  }
  return false;
}

/**
 * @param {unknown} error
 * @param {Effect} effect
 */
function propagate_error(error, effect) {
  /** @type {Effect | null} */
  var current = effect;
  while (current !== null) {
    if ((current.f & _constants_js__WEBPACK_IMPORTED_MODULE_3__.BOUNDARY_EFFECT) !== 0) {
      try {
        // @ts-expect-error
        current.fn(error);
        return;
      } catch {
        // Remove boundary flag from effect
        current.f ^= _constants_js__WEBPACK_IMPORTED_MODULE_3__.BOUNDARY_EFFECT;
      }
    }
    current = current.parent;
  }
  is_throwing_error = false;
  throw error;
}

/**
 * @param {Effect} effect
 */
function should_rethrow_error(effect) {
  return (effect.f & _constants_js__WEBPACK_IMPORTED_MODULE_3__.DESTROYED) === 0 && (effect.parent === null || (effect.parent.f & _constants_js__WEBPACK_IMPORTED_MODULE_3__.BOUNDARY_EFFECT) === 0);
}
function reset_is_throwing_error() {
  is_throwing_error = false;
}

/**
 * @param {unknown} error
 * @param {Effect} effect
 * @param {Effect | null} previous_effect
 * @param {ComponentContext | null} component_context
 */
function handle_error(error, effect, previous_effect, component_context) {
  if (is_throwing_error) {
    if (previous_effect === null) {
      is_throwing_error = false;
    }
    if (should_rethrow_error(effect)) {
      throw error;
    }
    return;
  }
  if (previous_effect !== null) {
    is_throwing_error = true;
  }
  if (!esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV || component_context === null || !(error instanceof Error) || handled_errors.has(error)) {
    propagate_error(error, effect);
    return;
  }
  handled_errors.add(error);
  const component_stack = [];
  const effect_name = effect.fn?.name;
  if (effect_name) {
    component_stack.push(effect_name);
  }

  /** @type {ComponentContext | null} */
  let current_context = component_context;
  while (current_context !== null) {
    if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
      /** @type {string} */
      var filename = current_context.function?.[_constants_js__WEBPACK_IMPORTED_MODULE_8__.FILENAME];
      if (filename) {
        const file = filename.split('/').pop();
        component_stack.push(file);
      }
    }
    current_context = current_context.p;
  }
  const indent = _dom_operations_js__WEBPACK_IMPORTED_MODULE_12__.is_firefox ? '  ' : '\t';
  (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_1__.define_property)(error, 'message', {
    value: error.message + `\n${component_stack.map(name => `\n${indent}in ${name}`).join('')}\n`
  });
  (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_1__.define_property)(error, 'component_stack', {
    value: component_stack
  });
  const stack = error.stack;

  // Filter out internal files from callstack
  if (stack) {
    const lines = stack.split('\n');
    const new_lines = [];
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      if (line.includes('svelte/src/internal')) {
        continue;
      }
      new_lines.push(line);
    }
    (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_1__.define_property)(error, 'stack', {
      value: new_lines.join('\n')
    });
  }
  propagate_error(error, effect);
  if (should_rethrow_error(effect)) {
    throw error;
  }
}

/**
 * @param {Value} signal
 * @param {Effect} effect
 * @param {boolean} [root]
 */
function schedule_possible_effect_self_invalidation(signal, effect, root = true) {
  var reactions = signal.reactions;
  if (reactions === null) return;
  for (var i = 0; i < reactions.length; i++) {
    var reaction = reactions[i];
    if ((reaction.f & _constants_js__WEBPACK_IMPORTED_MODULE_3__.DERIVED) !== 0) {
      schedule_possible_effect_self_invalidation(/** @type {Derived} */reaction, effect, false);
    } else if (effect === reaction) {
      if (root) {
        set_signal_status(reaction, _constants_js__WEBPACK_IMPORTED_MODULE_3__.DIRTY);
      } else if ((reaction.f & _constants_js__WEBPACK_IMPORTED_MODULE_3__.CLEAN) !== 0) {
        set_signal_status(reaction, _constants_js__WEBPACK_IMPORTED_MODULE_3__.MAYBE_DIRTY);
      }
      schedule_effect(/** @type {Effect} */reaction);
    }
  }
}

/**
 * @template V
 * @param {Reaction} reaction
 * @returns {V}
 */
function update_reaction(reaction) {
  var previous_deps = new_deps;
  var previous_skipped_deps = skipped_deps;
  var previous_untracked_writes = untracked_writes;
  var previous_reaction = active_reaction;
  var previous_skip_reaction = skip_reaction;
  var prev_derived_sources = derived_sources;
  var previous_component_context = _context_js__WEBPACK_IMPORTED_MODULE_11__.component_context;
  var previous_untracking = untracking;
  var flags = reaction.f;
  new_deps = /** @type {null | Value[]} */null;
  skipped_deps = 0;
  untracked_writes = null;
  active_reaction = (flags & (_constants_js__WEBPACK_IMPORTED_MODULE_3__.BRANCH_EFFECT | _constants_js__WEBPACK_IMPORTED_MODULE_3__.ROOT_EFFECT)) === 0 ? reaction : null;
  skip_reaction = (flags & _constants_js__WEBPACK_IMPORTED_MODULE_3__.UNOWNED) !== 0 && (!is_flushing_effect || previous_reaction === null || previous_untracking);
  derived_sources = null;
  (0,_context_js__WEBPACK_IMPORTED_MODULE_11__.set_component_context)(reaction.ctx);
  untracking = false;
  read_version++;
  try {
    var result = /** @type {Function} */(0, reaction.fn)();
    var deps = reaction.deps;
    if (new_deps !== null) {
      var i;
      remove_reactions(reaction, skipped_deps);
      if (deps !== null && skipped_deps > 0) {
        deps.length = skipped_deps + new_deps.length;
        for (i = 0; i < new_deps.length; i++) {
          deps[skipped_deps + i] = new_deps[i];
        }
      } else {
        reaction.deps = deps = new_deps;
      }
      if (!skip_reaction) {
        for (i = skipped_deps; i < deps.length; i++) {
          (deps[i].reactions ??= []).push(reaction);
        }
      }
    } else if (deps !== null && skipped_deps < deps.length) {
      remove_reactions(reaction, skipped_deps);
      deps.length = skipped_deps;
    }

    // If we're inside an effect and we have untracked writes, then we need to
    // ensure that if any of those untracked writes result in re-invalidation
    // of the current effect, then that happens accordingly
    if ((0,_context_js__WEBPACK_IMPORTED_MODULE_11__.is_runes)() && untracked_writes !== null && !untracking && deps !== null && (reaction.f & (_constants_js__WEBPACK_IMPORTED_MODULE_3__.DERIVED | _constants_js__WEBPACK_IMPORTED_MODULE_3__.MAYBE_DIRTY | _constants_js__WEBPACK_IMPORTED_MODULE_3__.DIRTY)) === 0) {
      for (i = 0; i < /** @type {Source[]} */untracked_writes.length; i++) {
        schedule_possible_effect_self_invalidation(untracked_writes[i], /** @type {Effect} */reaction);
      }
    }

    // If we are returning to an previous reaction then
    // we need to increment the read version to ensure that
    // any dependencies in this reaction aren't marked with
    // the same version
    if (previous_reaction !== null) {
      read_version++;
    }
    return result;
  } finally {
    new_deps = previous_deps;
    skipped_deps = previous_skipped_deps;
    untracked_writes = previous_untracked_writes;
    active_reaction = previous_reaction;
    skip_reaction = previous_skip_reaction;
    derived_sources = prev_derived_sources;
    (0,_context_js__WEBPACK_IMPORTED_MODULE_11__.set_component_context)(previous_component_context);
    untracking = previous_untracking;
  }
}

/**
 * @template V
 * @param {Reaction} signal
 * @param {Value<V>} dependency
 * @returns {void}
 */
function remove_reaction(signal, dependency) {
  let reactions = dependency.reactions;
  if (reactions !== null) {
    var index = _shared_utils_js__WEBPACK_IMPORTED_MODULE_1__.index_of.call(reactions, signal);
    if (index !== -1) {
      var new_length = reactions.length - 1;
      if (new_length === 0) {
        reactions = dependency.reactions = null;
      } else {
        // Swap with last element and then remove.
        reactions[index] = reactions[new_length];
        reactions.pop();
      }
    }
  }
  // If the derived has no reactions, then we can disconnect it from the graph,
  // allowing it to either reconnect in the future, or be GC'd by the VM.
  if (reactions === null && (dependency.f & _constants_js__WEBPACK_IMPORTED_MODULE_3__.DERIVED) !== 0 && (
  // Destroying a child effect while updating a parent effect can cause a dependency to appear
  // to be unused, when in fact it is used by the currently-updating parent. Checking `new_deps`
  // allows us to skip the expensive work of disconnecting and immediately reconnecting it
  new_deps === null || !new_deps.includes(dependency))) {
    set_signal_status(dependency, _constants_js__WEBPACK_IMPORTED_MODULE_3__.MAYBE_DIRTY);
    // If we are working with a derived that is owned by an effect, then mark it as being
    // disconnected.
    if ((dependency.f & (_constants_js__WEBPACK_IMPORTED_MODULE_3__.UNOWNED | _constants_js__WEBPACK_IMPORTED_MODULE_3__.DISCONNECTED)) === 0) {
      dependency.f ^= _constants_js__WEBPACK_IMPORTED_MODULE_3__.DISCONNECTED;
    }
    // Disconnect any reactions owned by this reaction
    (0,_reactivity_deriveds_js__WEBPACK_IMPORTED_MODULE_6__.destroy_derived_effects)(/** @type {Derived} **/dependency);
    remove_reactions(/** @type {Derived} **/dependency, 0);
  }
}

/**
 * @param {Reaction} signal
 * @param {number} start_index
 * @returns {void}
 */
function remove_reactions(signal, start_index) {
  var dependencies = signal.deps;
  if (dependencies === null) return;
  for (var i = start_index; i < dependencies.length; i++) {
    remove_reaction(signal, dependencies[i]);
  }
}

/**
 * @param {Effect} effect
 * @returns {void}
 */
function update_effect(effect) {
  var flags = effect.f;
  if ((flags & _constants_js__WEBPACK_IMPORTED_MODULE_3__.DESTROYED) !== 0) {
    return;
  }
  set_signal_status(effect, _constants_js__WEBPACK_IMPORTED_MODULE_3__.CLEAN);
  var previous_effect = active_effect;
  var previous_component_context = _context_js__WEBPACK_IMPORTED_MODULE_11__.component_context;
  active_effect = effect;
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    var previous_component_fn = _context_js__WEBPACK_IMPORTED_MODULE_11__.dev_current_component_function;
    (0,_context_js__WEBPACK_IMPORTED_MODULE_11__.set_dev_current_component_function)(effect.component_function);
  }
  try {
    if ((flags & _constants_js__WEBPACK_IMPORTED_MODULE_3__.BLOCK_EFFECT) !== 0) {
      (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__.destroy_block_effect_children)(effect);
    } else {
      (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__.destroy_effect_children)(effect);
    }
    (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__.execute_effect_teardown)(effect);
    var teardown = update_reaction(effect);
    effect.teardown = typeof teardown === 'function' ? teardown : null;
    effect.wv = write_version;
    var deps = effect.deps;

    // In DEV, we need to handle a case where $inspect.trace() might
    // incorrectly state a source dependency has not changed when it has.
    // That's beacuse that source was changed by the same effect, causing
    // the versions to match. We can avoid this by incrementing the version
    if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV && _flags_index_js__WEBPACK_IMPORTED_MODULE_9__.tracing_mode_flag && (effect.f & _constants_js__WEBPACK_IMPORTED_MODULE_3__.DIRTY) !== 0 && deps !== null) {
      for (let i = 0; i < deps.length; i++) {
        var dep = deps[i];
        if (dep.trace_need_increase) {
          dep.wv = increment_write_version();
          dep.trace_need_increase = undefined;
          dep.trace_v = undefined;
        }
      }
    }
    if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
      dev_effect_stack.push(effect);
    }
  } catch (error) {
    handle_error(error, effect, previous_effect, previous_component_context || effect.ctx);
  } finally {
    active_effect = previous_effect;
    if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
      (0,_context_js__WEBPACK_IMPORTED_MODULE_11__.set_dev_current_component_function)(previous_component_fn);
    }
  }
}
function log_effect_stack() {
  // eslint-disable-next-line no-console
  console.error('Last ten effects were: ', dev_effect_stack.slice(-10).map(d => d.fn));
  dev_effect_stack = [];
}
function infinite_loop_guard() {
  if (flush_count > 1000) {
    flush_count = 0;
    try {
      _errors_js__WEBPACK_IMPORTED_MODULE_7__.effect_update_depth_exceeded();
    } catch (error) {
      if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
        // stack is garbage, ignore. Instead add a console.error message.
        (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_1__.define_property)(error, 'stack', {
          value: ''
        });
      }
      // Try and handle the error so it can be caught at a boundary, that's
      // if there's an effect available from when it was last scheduled
      if (last_scheduled_effect !== null) {
        if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
          try {
            handle_error(error, last_scheduled_effect, null, null);
          } catch (e) {
            // Only log the effect stack if the error is re-thrown
            log_effect_stack();
            throw e;
          }
        } else {
          handle_error(error, last_scheduled_effect, null, null);
        }
      } else {
        if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
          log_effect_stack();
        }
        throw error;
      }
    }
  }
  flush_count++;
}

/**
 * @param {Array<Effect>} root_effects
 * @returns {void}
 */
function flush_queued_root_effects(root_effects) {
  var length = root_effects.length;
  if (length === 0) {
    return;
  }
  infinite_loop_guard();
  var previously_flushing_effect = is_flushing_effect;
  is_flushing_effect = true;
  try {
    for (var i = 0; i < length; i++) {
      var effect = root_effects[i];
      if ((effect.f & _constants_js__WEBPACK_IMPORTED_MODULE_3__.CLEAN) === 0) {
        effect.f ^= _constants_js__WEBPACK_IMPORTED_MODULE_3__.CLEAN;
      }
      var collected_effects = process_effects(effect);
      flush_queued_effects(collected_effects);
    }
  } finally {
    is_flushing_effect = previously_flushing_effect;
  }
}

/**
 * @param {Array<Effect>} effects
 * @returns {void}
 */
function flush_queued_effects(effects) {
  var length = effects.length;
  if (length === 0) return;
  for (var i = 0; i < length; i++) {
    var effect = effects[i];
    if ((effect.f & (_constants_js__WEBPACK_IMPORTED_MODULE_3__.DESTROYED | _constants_js__WEBPACK_IMPORTED_MODULE_3__.INERT)) === 0) {
      try {
        if (check_dirtiness(effect)) {
          update_effect(effect);

          // Effects with no dependencies or teardown do not get added to the effect tree.
          // Deferred effects (e.g. `$effect(...)`) _are_ added to the tree because we
          // don't know if we need to keep them until they are executed. Doing the check
          // here (rather than in `update_effect`) allows us to skip the work for
          // immediate effects.
          if (effect.deps === null && effect.first === null && effect.nodes_start === null) {
            if (effect.teardown === null) {
              // remove this effect from the graph
              (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_2__.unlink_effect)(effect);
            } else {
              // keep the effect in the graph, but free up some memory
              effect.fn = null;
            }
          }
        }
      } catch (error) {
        handle_error(error, effect, null, effect.ctx);
      }
    }
  }
}
function process_deferred() {
  is_micro_task_queued = false;
  if (flush_count > 1001) {
    return;
  }
  const previous_queued_root_effects = queued_root_effects;
  queued_root_effects = [];
  flush_queued_root_effects(previous_queued_root_effects);
  if (!is_micro_task_queued) {
    flush_count = 0;
    last_scheduled_effect = null;
    if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
      dev_effect_stack = [];
    }
  }
}

/**
 * @param {Effect} signal
 * @returns {void}
 */
function schedule_effect(signal) {
  if (scheduler_mode === FLUSH_MICROTASK) {
    if (!is_micro_task_queued) {
      is_micro_task_queued = true;
      queueMicrotask(process_deferred);
    }
  }
  last_scheduled_effect = signal;
  var effect = signal;
  while (effect.parent !== null) {
    effect = effect.parent;
    var flags = effect.f;
    if ((flags & (_constants_js__WEBPACK_IMPORTED_MODULE_3__.ROOT_EFFECT | _constants_js__WEBPACK_IMPORTED_MODULE_3__.BRANCH_EFFECT)) !== 0) {
      if ((flags & _constants_js__WEBPACK_IMPORTED_MODULE_3__.CLEAN) === 0) return;
      effect.f ^= _constants_js__WEBPACK_IMPORTED_MODULE_3__.CLEAN;
    }
  }
  queued_root_effects.push(effect);
}

/**
 *
 * This function both runs render effects and collects user effects in topological order
 * from the starting effect passed in. Effects will be collected when they match the filtered
 * bitwise flag passed in only. The collected effects array will be populated with all the user
 * effects to be flushed.
 *
 * @param {Effect} effect
 * @returns {Effect[]}
 */
function process_effects(effect) {
  /** @type {Effect[]} */
  var effects = [];
  var current_effect = effect.first;
  main_loop: while (current_effect !== null) {
    var flags = current_effect.f;
    var is_branch = (flags & _constants_js__WEBPACK_IMPORTED_MODULE_3__.BRANCH_EFFECT) !== 0;
    var is_skippable_branch = is_branch && (flags & _constants_js__WEBPACK_IMPORTED_MODULE_3__.CLEAN) !== 0;
    var sibling = current_effect.next;
    if (!is_skippable_branch && (flags & _constants_js__WEBPACK_IMPORTED_MODULE_3__.INERT) === 0) {
      if ((flags & _constants_js__WEBPACK_IMPORTED_MODULE_3__.EFFECT) !== 0) {
        effects.push(current_effect);
      } else if (is_branch) {
        current_effect.f ^= _constants_js__WEBPACK_IMPORTED_MODULE_3__.CLEAN;
      } else {
        // Ensure we set the effect to be the active reaction
        // to ensure that unowned deriveds are correctly tracked
        // because we're flushing the current effect
        var previous_active_reaction = active_reaction;
        try {
          active_reaction = current_effect;
          if (check_dirtiness(current_effect)) {
            update_effect(current_effect);
          }
        } catch (error) {
          handle_error(error, current_effect, null, current_effect.ctx);
        } finally {
          active_reaction = previous_active_reaction;
        }
      }
      var child = current_effect.first;
      if (child !== null) {
        current_effect = child;
        continue;
      }
    }
    if (sibling === null) {
      let parent = current_effect.parent;
      while (parent !== null) {
        if (effect === parent) {
          break main_loop;
        }
        var parent_sibling = parent.next;
        if (parent_sibling !== null) {
          current_effect = parent_sibling;
          continue main_loop;
        }
        parent = parent.parent;
      }
    }
    current_effect = sibling;
  }
  return effects;
}

/**
 * Internal version of `flushSync` with the option to not flush previous effects.
 * Returns the result of the passed function, if given.
 * @param {() => any} [fn]
 * @returns {any}
 */
function flush_sync(fn) {
  var previous_scheduler_mode = scheduler_mode;
  var previous_queued_root_effects = queued_root_effects;
  try {
    infinite_loop_guard();

    /** @type {Effect[]} */
    const root_effects = [];
    scheduler_mode = FLUSH_SYNC;
    queued_root_effects = root_effects;
    is_micro_task_queued = false;
    flush_queued_root_effects(previous_queued_root_effects);
    var result = fn?.();
    (0,_dom_task_js__WEBPACK_IMPORTED_MODULE_4__.flush_tasks)();
    if (queued_root_effects.length > 0 || root_effects.length > 0) {
      flush_sync();
    }
    flush_count = 0;
    last_scheduled_effect = null;
    if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
      dev_effect_stack = [];
    }
    return result;
  } finally {
    scheduler_mode = previous_scheduler_mode;
    queued_root_effects = previous_queued_root_effects;
  }
}

/**
 * Returns a promise that resolves once any pending state changes have been applied.
 * @returns {Promise<void>}
 */
async function tick() {
  await Promise.resolve();
  // By calling flush_sync we guarantee that any pending state changes are applied after one tick.
  // TODO look into whether we can make flushing subsequent updates synchronously in the future.
  flush_sync();
}

/**
 * @template V
 * @param {Value<V>} signal
 * @returns {V}
 */
function get(signal) {
  var flags = signal.f;
  var is_derived = (flags & _constants_js__WEBPACK_IMPORTED_MODULE_3__.DERIVED) !== 0;
  if (captured_signals !== null) {
    captured_signals.add(signal);
  }

  // Register the dependency on the current reaction signal.
  if (active_reaction !== null && !untracking) {
    if (derived_sources !== null && derived_sources.includes(signal)) {
      _errors_js__WEBPACK_IMPORTED_MODULE_7__.state_unsafe_local_read();
    }
    var deps = active_reaction.deps;
    if (signal.rv < read_version) {
      signal.rv = read_version;
      // If the signal is accessing the same dependencies in the same
      // order as it did last time, increment `skipped_deps`
      // rather than updating `new_deps`, which creates GC cost
      if (new_deps === null && deps !== null && deps[skipped_deps] === signal) {
        skipped_deps++;
      } else if (new_deps === null) {
        new_deps = [signal];
      } else if (!skip_reaction || !new_deps.includes(signal)) {
        // Normally we can push duplicated dependencies to `new_deps`, but if we're inside
        // an unowned derived because skip_reaction is true, then we need to ensure that
        // we don't have duplicates
        new_deps.push(signal);
      }
    }
  } else if (is_derived && /** @type {Derived} */signal.deps === null && /** @type {Derived} */signal.effects === null) {
    var derived = /** @type {Derived} */signal;
    var parent = derived.parent;
    if (parent !== null && (parent.f & _constants_js__WEBPACK_IMPORTED_MODULE_3__.UNOWNED) === 0) {
      // If the derived is owned by another derived then mark it as unowned
      // as the derived value might have been referenced in a different context
      // since and thus its parent might not be its true owner anymore
      derived.f ^= _constants_js__WEBPACK_IMPORTED_MODULE_3__.UNOWNED;
    }
  }
  if (is_derived) {
    derived = /** @type {Derived} */signal;
    if (check_dirtiness(derived)) {
      (0,_reactivity_deriveds_js__WEBPACK_IMPORTED_MODULE_6__.update_derived)(derived);
    }
  }
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV && _flags_index_js__WEBPACK_IMPORTED_MODULE_9__.tracing_mode_flag && _dev_tracing_js__WEBPACK_IMPORTED_MODULE_10__.tracing_expressions !== null && active_reaction !== null && _dev_tracing_js__WEBPACK_IMPORTED_MODULE_10__.tracing_expressions.reaction === active_reaction) {
    // Used when mapping state between special blocks like `each`
    if (signal.debug) {
      signal.debug();
    } else if (signal.created) {
      var entry = _dev_tracing_js__WEBPACK_IMPORTED_MODULE_10__.tracing_expressions.entries.get(signal);
      if (entry === undefined) {
        entry = {
          read: []
        };
        _dev_tracing_js__WEBPACK_IMPORTED_MODULE_10__.tracing_expressions.entries.set(signal, entry);
      }
      entry.read.push((0,_dev_tracing_js__WEBPACK_IMPORTED_MODULE_10__.get_stack)('TracedAt'));
    }
  }
  return signal.v;
}

/**
 * Like `get`, but checks for `undefined`. Used for `var` declarations because they can be accessed before being declared
 * @template V
 * @param {Value<V> | undefined} signal
 * @returns {V | undefined}
 */
function safe_get(signal) {
  return signal && get(signal);
}

/**
 * Capture an array of all the signals that are read when `fn` is called
 * @template T
 * @param {() => T} fn
 */
function capture_signals(fn) {
  var previous_captured_signals = captured_signals;
  captured_signals = new Set();
  var captured = captured_signals;
  var signal;
  try {
    untrack(fn);
    if (previous_captured_signals !== null) {
      for (signal of captured_signals) {
        previous_captured_signals.add(signal);
      }
    }
  } finally {
    captured_signals = previous_captured_signals;
  }
  return captured;
}

/**
 * Invokes a function and captures all signals that are read during the invocation,
 * then invalidates them.
 * @param {() => any} fn
 */
function invalidate_inner_signals(fn) {
  var captured = capture_signals(() => untrack(fn));
  for (var signal of captured) {
    // Go one level up because derived signals created as part of props in legacy mode
    if ((signal.f & _constants_js__WEBPACK_IMPORTED_MODULE_3__.LEGACY_DERIVED_PROP) !== 0) {
      for (const dep of /** @type {Derived} */signal.deps || []) {
        if ((dep.f & _constants_js__WEBPACK_IMPORTED_MODULE_3__.DERIVED) === 0) {
          // Use internal_set instead of set here and below to avoid mutation validation
          (0,_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_5__.internal_set)(dep, dep.v);
        }
      }
    } else {
      (0,_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_5__.internal_set)(signal, signal.v);
    }
  }
}

/**
 * When used inside a [`$derived`](https://svelte.dev/docs/svelte/$derived) or [`$effect`](https://svelte.dev/docs/svelte/$effect),
 * any state read inside `fn` will not be treated as a dependency.
 *
 * ```ts
 * $effect(() => {
 *   // this will run when `data` changes, but not when `time` changes
 *   save(data, {
 *     timestamp: untrack(() => time)
 *   });
 * });
 * ```
 * @template T
 * @param {() => T} fn
 * @returns {T}
 */
function untrack(fn) {
  var previous_untracking = untracking;
  try {
    untracking = true;
    return fn();
  } finally {
    untracking = previous_untracking;
  }
}
const STATUS_MASK = ~(_constants_js__WEBPACK_IMPORTED_MODULE_3__.DIRTY | _constants_js__WEBPACK_IMPORTED_MODULE_3__.MAYBE_DIRTY | _constants_js__WEBPACK_IMPORTED_MODULE_3__.CLEAN);

/**
 * @param {Signal} signal
 * @param {number} status
 * @returns {void}
 */
function set_signal_status(signal, status) {
  signal.f = signal.f & STATUS_MASK | status;
}

/**
 * @param {Record<string, unknown>} obj
 * @param {string[]} keys
 * @returns {Record<string, unknown>}
 */
function exclude_from_object(obj, keys) {
  /** @type {Record<string, unknown>} */
  var result = {};
  for (var key in obj) {
    if (!keys.includes(key)) {
      result[key] = obj[key];
    }
  }
  return result;
}

/**
 * Possibly traverse an object and read all its properties so that they're all reactive in case this is `$state`.
 * Does only check first level of an object for performance reasons (heuristic should be good for 99% of all cases).
 * @param {any} value
 * @returns {void}
 */
function deep_read_state(value) {
  if (typeof value !== 'object' || !value || value instanceof EventTarget) {
    return;
  }
  if (_constants_js__WEBPACK_IMPORTED_MODULE_3__.STATE_SYMBOL in value) {
    deep_read(value);
  } else if (!Array.isArray(value)) {
    for (let key in value) {
      const prop = value[key];
      if (typeof prop === 'object' && prop && _constants_js__WEBPACK_IMPORTED_MODULE_3__.STATE_SYMBOL in prop) {
        deep_read(prop);
      }
    }
  }
}

/**
 * Deeply traverse an object and read all its properties
 * so that they're all reactive in case this is `$state`
 * @param {any} value
 * @param {Set<any>} visited
 * @returns {void}
 */
function deep_read(value, visited = new Set()) {
  if (typeof value === 'object' && value !== null &&
  // We don't want to traverse DOM elements
  !(value instanceof EventTarget) && !visited.has(value)) {
    visited.add(value);
    // When working with a possible SvelteDate, this
    // will ensure we capture changes to it.
    if (value instanceof Date) {
      value.getTime();
    }
    for (let key in value) {
      try {
        deep_read(value[key], visited);
      } catch (e) {
        // continue
      }
    }
    const proto = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_1__.get_prototype_of)(value);
    if (proto !== Object.prototype && proto !== Array.prototype && proto !== Map.prototype && proto !== Set.prototype && proto !== Date.prototype) {
      const descriptors = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_1__.get_descriptors)(proto);
      for (let key in descriptors) {
        const get = descriptors[key].get;
        if (get) {
          try {
            get.call(value);
          } catch (e) {
            // continue
          }
        }
      }
    }
  }
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/timing.js":
/*!***************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/timing.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   raf: () => (/* binding */ raf)
/* harmony export */ });
/* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/utils.js */ "../svelte/packages/svelte/src/internal/shared/utils.js");
/* harmony import */ var esm_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! esm-env */ "../svelte/node_modules/.pnpm/esm-env@1.2.1/node_modules/esm-env/index.js");
/** @import { Raf } from '#client' */


const now = esm_env__WEBPACK_IMPORTED_MODULE_1__.BROWSER ? () => performance.now() : () => Date.now();

/** @type {Raf} */
const raf = {
  // don't access requestAnimationFrame eagerly outside method
  // this allows basic testing of user code without JSDOM
  // bunder will eval and remove ternary when the user's app is built
  tick: /** @param {any} _ */_ => (esm_env__WEBPACK_IMPORTED_MODULE_1__.BROWSER ? requestAnimationFrame : _shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.noop)(_),
  now: () => now(),
  tasks: new Set()
};

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/validate.js":
/*!*****************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/validate.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   validate_binding: () => (/* binding */ validate_binding),
/* harmony export */   validate_each_keys: () => (/* binding */ validate_each_keys)
/* harmony export */ });
/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./context.js */ "../svelte/packages/svelte/src/internal/client/context.js");
/* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.js */ "../svelte/packages/svelte/src/internal/shared/utils.js");
/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors.js */ "../svelte/packages/svelte/src/internal/client/errors.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../constants.js */ "../svelte/packages/svelte/src/constants.js");
/* harmony import */ var _reactivity_effects_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _warnings_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./warnings.js */ "../svelte/packages/svelte/src/internal/client/warnings.js");
/* harmony import */ var _reactivity_store_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./reactivity/store.js */ "../svelte/packages/svelte/src/internal/client/reactivity/store.js");








/**
 * @param {() => any} collection
 * @param {(item: any, index: number) => string} key_fn
 * @returns {void}
 */
function validate_each_keys(collection, key_fn) {
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_4__.render_effect)(() => {
    const keys = new Map();
    const maybe_array = collection();
    const array = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_1__.is_array)(maybe_array) ? maybe_array : maybe_array == null ? [] : Array.from(maybe_array);
    const length = array.length;
    for (let i = 0; i < length; i++) {
      const key = key_fn(array[i], i);
      if (keys.has(key)) {
        const a = String(keys.get(key));
        const b = String(i);

        /** @type {string | null} */
        let k = String(key);
        if (k.startsWith('[object ')) k = null;
        _errors_js__WEBPACK_IMPORTED_MODULE_2__.each_key_duplicate(a, b, k);
      }
      keys.set(key, i);
    }
  });
}

/**
 * @param {string} binding
 * @param {() => Record<string, any>} get_object
 * @param {() => string} get_property
 * @param {number} line
 * @param {number} column
 */
function validate_binding(binding, get_object, get_property, line, column) {
  var warned = false;
  var filename = _context_js__WEBPACK_IMPORTED_MODULE_0__.dev_current_component_function?.[_constants_js__WEBPACK_IMPORTED_MODULE_3__.FILENAME];
  (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_4__.render_effect)(() => {
    if (warned) return;
    var [object, is_store_sub] = (0,_reactivity_store_js__WEBPACK_IMPORTED_MODULE_6__.capture_store_binding)(get_object);
    if (is_store_sub) return;
    var property = get_property();
    var ran = false;

    // by making the (possibly false, but it would be an extreme edge case) assumption
    // that a getter has a corresponding setter, we can determine if a property is
    // reactive by seeing if this effect has dependencies
    var effect = (0,_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_4__.render_effect)(() => {
      if (ran) return;

      // eslint-disable-next-line @typescript-eslint/no-unused-expressions
      object[property];
    });
    ran = true;
    if (effect.deps === null) {
      var location = `${filename}:${line}:${column}`;
      _warnings_js__WEBPACK_IMPORTED_MODULE_5__.binding_property_non_reactive(binding, location);
      warned = true;
    }
  });
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/client/warnings.js":
/*!*****************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/client/warnings.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   assignment_value_stale: () => (/* binding */ assignment_value_stale),
/* harmony export */   binding_property_non_reactive: () => (/* binding */ binding_property_non_reactive),
/* harmony export */   console_log_state: () => (/* binding */ console_log_state),
/* harmony export */   event_handler_invalid: () => (/* binding */ event_handler_invalid),
/* harmony export */   hydration_attribute_changed: () => (/* binding */ hydration_attribute_changed),
/* harmony export */   hydration_html_changed: () => (/* binding */ hydration_html_changed),
/* harmony export */   hydration_mismatch: () => (/* binding */ hydration_mismatch),
/* harmony export */   invalid_raw_snippet_render: () => (/* binding */ invalid_raw_snippet_render),
/* harmony export */   legacy_recursive_reactive_block: () => (/* binding */ legacy_recursive_reactive_block),
/* harmony export */   lifecycle_double_unmount: () => (/* binding */ lifecycle_double_unmount),
/* harmony export */   ownership_invalid_binding: () => (/* binding */ ownership_invalid_binding),
/* harmony export */   ownership_invalid_mutation: () => (/* binding */ ownership_invalid_mutation),
/* harmony export */   state_proxy_equality_mismatch: () => (/* binding */ state_proxy_equality_mismatch),
/* harmony export */   transition_slide_display: () => (/* binding */ transition_slide_display)
/* harmony export */ });
/* harmony import */ var esm_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! esm-env */ "../svelte/node_modules/.pnpm/esm-env@1.2.1/node_modules/esm-env/index.js");
/* This file is generated by scripts/process-messages/index.js. Do not edit! */


var bold = 'font-weight: bold';
var normal = 'font-weight: normal';

/**
 * Assignment to `%property%` property (%location%) will evaluate to the right-hand side, not the value of `%property%` following the assignment. This may result in unexpected behaviour.
 * @param {string} property
 * @param {string} location
 */
function assignment_value_stale(property, location) {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    console.warn(`%c[svelte] assignment_value_stale\n%cAssignment to \`${property}\` property (${location}) will evaluate to the right-hand side, not the value of \`${property}\` following the assignment. This may result in unexpected behaviour.\nhttps://svelte.dev/e/assignment_value_stale`, bold, normal);
  } else {
    console.warn(`https://svelte.dev/e/assignment_value_stale`);
  }
}

/**
 * `%binding%` (%location%) is binding to a non-reactive property
 * @param {string} binding
 * @param {string | undefined | null} [location]
 */
function binding_property_non_reactive(binding, location) {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    console.warn(`%c[svelte] binding_property_non_reactive\n%c${location ? `\`${binding}\` (${location}) is binding to a non-reactive property` : `\`${binding}\` is binding to a non-reactive property`}\nhttps://svelte.dev/e/binding_property_non_reactive`, bold, normal);
  } else {
    console.warn(`https://svelte.dev/e/binding_property_non_reactive`);
  }
}

/**
 * Your `console.%method%` contained `$state` proxies. Consider using `$inspect(...)` or `$state.snapshot(...)` instead
 * @param {string} method
 */
function console_log_state(method) {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    console.warn(`%c[svelte] console_log_state\n%cYour \`console.${method}\` contained \`$state\` proxies. Consider using \`$inspect(...)\` or \`$state.snapshot(...)\` instead\nhttps://svelte.dev/e/console_log_state`, bold, normal);
  } else {
    console.warn(`https://svelte.dev/e/console_log_state`);
  }
}

/**
 * %handler% should be a function. Did you mean to %suggestion%?
 * @param {string} handler
 * @param {string} suggestion
 */
function event_handler_invalid(handler, suggestion) {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    console.warn(`%c[svelte] event_handler_invalid\n%c${handler} should be a function. Did you mean to ${suggestion}?\nhttps://svelte.dev/e/event_handler_invalid`, bold, normal);
  } else {
    console.warn(`https://svelte.dev/e/event_handler_invalid`);
  }
}

/**
 * The `%attribute%` attribute on `%html%` changed its value between server and client renders. The client value, `%value%`, will be ignored in favour of the server value
 * @param {string} attribute
 * @param {string} html
 * @param {string} value
 */
function hydration_attribute_changed(attribute, html, value) {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    console.warn(`%c[svelte] hydration_attribute_changed\n%cThe \`${attribute}\` attribute on \`${html}\` changed its value between server and client renders. The client value, \`${value}\`, will be ignored in favour of the server value\nhttps://svelte.dev/e/hydration_attribute_changed`, bold, normal);
  } else {
    console.warn(`https://svelte.dev/e/hydration_attribute_changed`);
  }
}

/**
 * The value of an `{@html ...}` block %location% changed between server and client renders. The client value will be ignored in favour of the server value
 * @param {string | undefined | null} [location]
 */
function hydration_html_changed(location) {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    console.warn(`%c[svelte] hydration_html_changed\n%c${location ? `The value of an \`{@html ...}\` block ${location} changed between server and client renders. The client value will be ignored in favour of the server value` : 'The value of an `{@html ...}` block changed between server and client renders. The client value will be ignored in favour of the server value'}\nhttps://svelte.dev/e/hydration_html_changed`, bold, normal);
  } else {
    console.warn(`https://svelte.dev/e/hydration_html_changed`);
  }
}

/**
 * Hydration failed because the initial UI does not match what was rendered on the server. The error occurred near %location%
 * @param {string | undefined | null} [location]
 */
function hydration_mismatch(location) {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    console.warn(`%c[svelte] hydration_mismatch\n%c${location ? `Hydration failed because the initial UI does not match what was rendered on the server. The error occurred near ${location}` : 'Hydration failed because the initial UI does not match what was rendered on the server'}\nhttps://svelte.dev/e/hydration_mismatch`, bold, normal);
  } else {
    console.warn(`https://svelte.dev/e/hydration_mismatch`);
  }
}

/**
 * The `render` function passed to `createRawSnippet` should return HTML for a single element
 */
function invalid_raw_snippet_render() {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    console.warn(`%c[svelte] invalid_raw_snippet_render\n%cThe \`render\` function passed to \`createRawSnippet\` should return HTML for a single element\nhttps://svelte.dev/e/invalid_raw_snippet_render`, bold, normal);
  } else {
    console.warn(`https://svelte.dev/e/invalid_raw_snippet_render`);
  }
}

/**
 * Detected a migrated `$:` reactive block in `%filename%` that both accesses and updates the same reactive value. This may cause recursive updates when converted to an `$effect`.
 * @param {string} filename
 */
function legacy_recursive_reactive_block(filename) {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    console.warn(`%c[svelte] legacy_recursive_reactive_block\n%cDetected a migrated \`$:\` reactive block in \`${filename}\` that both accesses and updates the same reactive value. This may cause recursive updates when converted to an \`$effect\`.\nhttps://svelte.dev/e/legacy_recursive_reactive_block`, bold, normal);
  } else {
    console.warn(`https://svelte.dev/e/legacy_recursive_reactive_block`);
  }
}

/**
 * Tried to unmount a component that was not mounted
 */
function lifecycle_double_unmount() {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    console.warn(`%c[svelte] lifecycle_double_unmount\n%cTried to unmount a component that was not mounted\nhttps://svelte.dev/e/lifecycle_double_unmount`, bold, normal);
  } else {
    console.warn(`https://svelte.dev/e/lifecycle_double_unmount`);
  }
}

/**
 * %parent% passed a value to %child% with `bind:`, but the value is owned by %owner%. Consider creating a binding between %owner% and %parent%
 * @param {string} parent
 * @param {string} child
 * @param {string} owner
 */
function ownership_invalid_binding(parent, child, owner) {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    console.warn(`%c[svelte] ownership_invalid_binding\n%c${parent} passed a value to ${child} with \`bind:\`, but the value is owned by ${owner}. Consider creating a binding between ${owner} and ${parent}\nhttps://svelte.dev/e/ownership_invalid_binding`, bold, normal);
  } else {
    console.warn(`https://svelte.dev/e/ownership_invalid_binding`);
  }
}

/**
 * %component% mutated a value owned by %owner%. This is strongly discouraged. Consider passing values to child components with `bind:`, or use a callback instead
 * @param {string | undefined | null} [component]
 * @param {string | undefined | null} [owner]
 */
function ownership_invalid_mutation(component, owner) {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    console.warn(`%c[svelte] ownership_invalid_mutation\n%c${component ? `${component} mutated a value owned by ${owner}. This is strongly discouraged. Consider passing values to child components with \`bind:\`, or use a callback instead` : 'Mutating a value outside the component that created it is strongly discouraged. Consider passing values to child components with `bind:`, or use a callback instead'}\nhttps://svelte.dev/e/ownership_invalid_mutation`, bold, normal);
  } else {
    console.warn(`https://svelte.dev/e/ownership_invalid_mutation`);
  }
}

/**
 * Reactive `$state(...)` proxies and the values they proxy have different identities. Because of this, comparisons with `%operator%` will produce unexpected results
 * @param {string} operator
 */
function state_proxy_equality_mismatch(operator) {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    console.warn(`%c[svelte] state_proxy_equality_mismatch\n%cReactive \`$state(...)\` proxies and the values they proxy have different identities. Because of this, comparisons with \`${operator}\` will produce unexpected results\nhttps://svelte.dev/e/state_proxy_equality_mismatch`, bold, normal);
  } else {
    console.warn(`https://svelte.dev/e/state_proxy_equality_mismatch`);
  }
}

/**
 * The `slide` transition does not work correctly for elements with `display: %value%`
 * @param {string} value
 */
function transition_slide_display(value) {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    console.warn(`%c[svelte] transition_slide_display\n%cThe \`slide\` transition does not work correctly for elements with \`display: ${value}\`\nhttps://svelte.dev/e/transition_slide_display`, bold, normal);
  } else {
    console.warn(`https://svelte.dev/e/transition_slide_display`);
  }
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/flags/index.js":
/*!*************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/flags/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   enable_legacy_mode_flag: () => (/* binding */ enable_legacy_mode_flag),
/* harmony export */   enable_tracing_mode_flag: () => (/* binding */ enable_tracing_mode_flag),
/* harmony export */   legacy_mode_flag: () => (/* binding */ legacy_mode_flag),
/* harmony export */   tracing_mode_flag: () => (/* binding */ tracing_mode_flag)
/* harmony export */ });
let legacy_mode_flag = false;
let tracing_mode_flag = false;
function enable_legacy_mode_flag() {
  legacy_mode_flag = true;
}
function enable_tracing_mode_flag() {
  tracing_mode_flag = true;
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/shared/attributes.js":
/*!*******************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/shared/attributes.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   attr: () => (/* binding */ attr),
/* harmony export */   clsx: () => (/* binding */ clsx)
/* harmony export */ });
/* harmony import */ var _escaping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../escaping.js */ "../svelte/packages/svelte/src/escaping.js");
/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! clsx */ "../svelte/node_modules/.pnpm/clsx@2.1.1/node_modules/clsx/dist/clsx.mjs");



/**
 * `<div translate={false}>` should be rendered as `<div translate="no">` and _not_
 * `<div translate="false">`, which is equivalent to `<div translate="yes">`. There
 * may be other odd cases that need to be added to this list in future
 * @type {Record<string, Map<any, string>>}
 */
const replacements = {
  translate: new Map([[true, 'yes'], [false, 'no']])
};

/**
 * @template V
 * @param {string} name
 * @param {V} value
 * @param {boolean} [is_boolean]
 * @returns {string}
 */
function attr(name, value, is_boolean = false) {
  if (value == null || !value && is_boolean || value === '' && name === 'class') return '';
  const normalized = name in replacements && replacements[name].get(value) || value;
  const assignment = is_boolean ? '' : `="${(0,_escaping_js__WEBPACK_IMPORTED_MODULE_0__.escape_html)(normalized, true)}"`;
  return ` ${name}${assignment}`;
}

/**
 * Small wrapper around clsx to preserve Svelte's (weird) handling of falsy values.
 * TODO Svelte 6 revisit this, and likely turn all falsy values into the empty string (what clsx also does)
 * @param  {any} value
 */
function clsx(value) {
  if (typeof value === 'object') {
    return (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(value);
  } else {
    return value ?? '';
  }
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/shared/clone.js":
/*!**************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/shared/clone.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   snapshot: () => (/* binding */ snapshot)
/* harmony export */ });
/* harmony import */ var esm_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! esm-env */ "../svelte/node_modules/.pnpm/esm-env@1.2.1/node_modules/esm-env/index.js");
/* harmony import */ var _warnings_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./warnings.js */ "../svelte/packages/svelte/src/internal/shared/warnings.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ "../svelte/packages/svelte/src/internal/shared/utils.js");
/** @import { Snapshot } from './types' */




/**
 * In dev, we keep track of which properties could not be cloned. In prod
 * we don't bother, but we keep a dummy array around so that the
 * signature stays the same
 * @type {string[]}
 */
const empty = [];

/**
 * @template T
 * @param {T} value
 * @param {boolean} [skip_warning]
 * @returns {Snapshot<T>}
 */
function snapshot(value, skip_warning = false) {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV && !skip_warning) {
    /** @type {string[]} */
    const paths = [];
    const copy = clone(value, new Map(), '', paths);
    if (paths.length === 1 && paths[0] === '') {
      // value could not be cloned
      _warnings_js__WEBPACK_IMPORTED_MODULE_1__.state_snapshot_uncloneable();
    } else if (paths.length > 0) {
      // some properties could not be cloned
      const slice = paths.length > 10 ? paths.slice(0, 7) : paths.slice(0, 10);
      const excess = paths.length - slice.length;
      let uncloned = slice.map(path => `- <value>${path}`).join('\n');
      if (excess > 0) uncloned += `\n- ...and ${excess} more`;
      _warnings_js__WEBPACK_IMPORTED_MODULE_1__.state_snapshot_uncloneable(uncloned);
    }
    return copy;
  }
  return clone(value, new Map(), '', empty);
}

/**
 * @template T
 * @param {T} value
 * @param {Map<T, Snapshot<T>>} cloned
 * @param {string} path
 * @param {string[]} paths
 * @param {null | T} original The original value, if `value` was produced from a `toJSON` call
 * @returns {Snapshot<T>}
 */
function clone(value, cloned, path, paths, original = null) {
  if (typeof value === 'object' && value !== null) {
    var unwrapped = cloned.get(value);
    if (unwrapped !== undefined) return unwrapped;
    if (value instanceof Map) return /** @type {Snapshot<T>} */new Map(value);
    if (value instanceof Set) return /** @type {Snapshot<T>} */new Set(value);
    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.is_array)(value)) {
      var copy = /** @type {Snapshot<any>} */Array(value.length);
      cloned.set(value, copy);
      if (original !== null) {
        cloned.set(original, copy);
      }
      for (var i = 0; i < value.length; i += 1) {
        var element = value[i];
        if (i in value) {
          copy[i] = clone(element, cloned, esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV ? `${path}[${i}]` : path, paths);
        }
      }
      return copy;
    }
    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.get_prototype_of)(value) === _utils_js__WEBPACK_IMPORTED_MODULE_2__.object_prototype) {
      /** @type {Snapshot<any>} */
      copy = {};
      cloned.set(value, copy);
      if (original !== null) {
        cloned.set(original, copy);
      }
      for (var key in value) {
        // @ts-expect-error
        copy[key] = clone(value[key], cloned, esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV ? `${path}.${key}` : path, paths);
      }
      return copy;
    }
    if (value instanceof Date) {
      return /** @type {Snapshot<T>} */structuredClone(value);
    }
    if (typeof (/** @type {T & { toJSON?: any } } */value.toJSON) === 'function') {
      return clone(/** @type {T & { toJSON(): any } } */value.toJSON(), cloned, esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV ? `${path}.toJSON()` : path, paths,
      // Associate the instance with the toJSON clone
      value);
    }
  }
  if (value instanceof EventTarget) {
    // can't be cloned
    return /** @type {Snapshot<T>} */value;
  }
  try {
    return /** @type {Snapshot<T>} */structuredClone(value);
  } catch (e) {
    if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
      paths.push(path);
    }
    return /** @type {Snapshot<T>} */value;
  }
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/shared/errors.js":
/*!***************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/shared/errors.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   invalid_default_snippet: () => (/* binding */ invalid_default_snippet),
/* harmony export */   lifecycle_outside_component: () => (/* binding */ lifecycle_outside_component),
/* harmony export */   store_invalid_shape: () => (/* binding */ store_invalid_shape),
/* harmony export */   svelte_element_invalid_this_value: () => (/* binding */ svelte_element_invalid_this_value)
/* harmony export */ });
/* harmony import */ var esm_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! esm-env */ "../svelte/node_modules/.pnpm/esm-env@1.2.1/node_modules/esm-env/index.js");
/* This file is generated by scripts/process-messages/index.js. Do not edit! */



/**
 * Cannot use `{@render children(...)}` if the parent component uses `let:` directives. Consider using a named snippet instead
 * @returns {never}
 */
function invalid_default_snippet() {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    const error = new Error(`invalid_default_snippet\nCannot use \`{@render children(...)}\` if the parent component uses \`let:\` directives. Consider using a named snippet instead\nhttps://svelte.dev/e/invalid_default_snippet`);
    error.name = 'Svelte error';
    throw error;
  } else {
    throw new Error(`https://svelte.dev/e/invalid_default_snippet`);
  }
}

/**
 * `%name%(...)` can only be used during component initialisation
 * @param {string} name
 * @returns {never}
 */
function lifecycle_outside_component(name) {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    const error = new Error(`lifecycle_outside_component\n\`${name}(...)\` can only be used during component initialisation\nhttps://svelte.dev/e/lifecycle_outside_component`);
    error.name = 'Svelte error';
    throw error;
  } else {
    throw new Error(`https://svelte.dev/e/lifecycle_outside_component`);
  }
}

/**
 * `%name%` is not a store with a `subscribe` method
 * @param {string} name
 * @returns {never}
 */
function store_invalid_shape(name) {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    const error = new Error(`store_invalid_shape\n\`${name}\` is not a store with a \`subscribe\` method\nhttps://svelte.dev/e/store_invalid_shape`);
    error.name = 'Svelte error';
    throw error;
  } else {
    throw new Error(`https://svelte.dev/e/store_invalid_shape`);
  }
}

/**
 * The `this` prop on `<svelte:element>` must be a string, if defined
 * @returns {never}
 */
function svelte_element_invalid_this_value() {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    const error = new Error(`svelte_element_invalid_this_value\nThe \`this\` prop on \`<svelte:element>\` must be a string, if defined\nhttps://svelte.dev/e/svelte_element_invalid_this_value`);
    error.name = 'Svelte error';
    throw error;
  } else {
    throw new Error(`https://svelte.dev/e/svelte_element_invalid_this_value`);
  }
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/shared/utils.js":
/*!**************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/shared/utils.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   array_from: () => (/* binding */ array_from),
/* harmony export */   array_prototype: () => (/* binding */ array_prototype),
/* harmony export */   deferred: () => (/* binding */ deferred),
/* harmony export */   define_property: () => (/* binding */ define_property),
/* harmony export */   fallback: () => (/* binding */ fallback),
/* harmony export */   get_descriptor: () => (/* binding */ get_descriptor),
/* harmony export */   get_descriptors: () => (/* binding */ get_descriptors),
/* harmony export */   get_prototype_of: () => (/* binding */ get_prototype_of),
/* harmony export */   index_of: () => (/* binding */ index_of),
/* harmony export */   is_array: () => (/* binding */ is_array),
/* harmony export */   is_function: () => (/* binding */ is_function),
/* harmony export */   is_promise: () => (/* binding */ is_promise),
/* harmony export */   noop: () => (/* binding */ noop),
/* harmony export */   object_keys: () => (/* binding */ object_keys),
/* harmony export */   object_prototype: () => (/* binding */ object_prototype),
/* harmony export */   run: () => (/* binding */ run),
/* harmony export */   run_all: () => (/* binding */ run_all)
/* harmony export */ });
// Store the references to globals in case someone tries to monkey patch these, causing the below
// to de-opt (this occurs often when using popular extensions).
var is_array = Array.isArray;
var index_of = Array.prototype.indexOf;
var array_from = Array.from;
var object_keys = Object.keys;
var define_property = Object.defineProperty;
var get_descriptor = Object.getOwnPropertyDescriptor;
var get_descriptors = Object.getOwnPropertyDescriptors;
var object_prototype = Object.prototype;
var array_prototype = Array.prototype;
var get_prototype_of = Object.getPrototypeOf;

/**
 * @param {any} thing
 * @returns {thing is Function}
 */
function is_function(thing) {
  return typeof thing === 'function';
}
const noop = () => {};

// Adapted from https://github.com/then/is-promise/blob/master/index.js
// Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE

/**
 * @template [T=any]
 * @param {any} value
 * @returns {value is PromiseLike<T>}
 */
function is_promise(value) {
  return typeof value?.then === 'function';
}

/** @param {Function} fn */
function run(fn) {
  return fn();
}

/** @param {Array<() => void>} arr */
function run_all(arr) {
  for (var i = 0; i < arr.length; i++) {
    arr[i]();
  }
}

/**
 * TODO replace with Promise.withResolvers once supported widely enough
 * @template T
 */
function deferred() {
  /** @type {(value: T) => void} */
  var resolve;

  /** @type {(reason: any) => void} */
  var reject;

  /** @type {Promise<T>} */
  var promise = new Promise((res, rej) => {
    resolve = res;
    reject = rej;
  });

  // @ts-expect-error
  return {
    promise,
    resolve,
    reject
  };
}

/**
 * @template V
 * @param {V} value
 * @param {V | (() => V)} fallback
 * @param {boolean} [lazy]
 * @returns {V}
 */
function fallback(value, fallback, lazy = false) {
  return value === undefined ? lazy ? /** @type {() => V} */fallback() : (/** @type {V} */fallback) : value;
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/shared/validate.js":
/*!*****************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/shared/validate.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   invalid_default_snippet: () => (/* reexport safe */ _errors_js__WEBPACK_IMPORTED_MODULE_2__.invalid_default_snippet),
/* harmony export */   validate_dynamic_element_tag: () => (/* binding */ validate_dynamic_element_tag),
/* harmony export */   validate_store: () => (/* binding */ validate_store),
/* harmony export */   validate_void_dynamic_element: () => (/* binding */ validate_void_dynamic_element)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils.js */ "../svelte/packages/svelte/src/utils.js");
/* harmony import */ var _warnings_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./warnings.js */ "../svelte/packages/svelte/src/internal/shared/warnings.js");
/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors.js */ "../svelte/packages/svelte/src/internal/shared/errors.js");
/** @import { TemplateNode } from '#client' */
/** @import { Getters } from '#shared' */





/**
 * @param {() => string} tag_fn
 * @returns {void}
 */
function validate_void_dynamic_element(tag_fn) {
  const tag = tag_fn();
  if (tag && (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.is_void)(tag)) {
    _warnings_js__WEBPACK_IMPORTED_MODULE_1__.dynamic_void_element_content(tag);
  }
}

/** @param {() => unknown} tag_fn */
function validate_dynamic_element_tag(tag_fn) {
  const tag = tag_fn();
  const is_string = typeof tag === 'string';
  if (tag && !is_string) {
    _errors_js__WEBPACK_IMPORTED_MODULE_2__.svelte_element_invalid_this_value();
  }
}

/**
 * @param {any} store
 * @param {string} name
 */
function validate_store(store, name) {
  if (store != null && typeof store.subscribe !== 'function') {
    _errors_js__WEBPACK_IMPORTED_MODULE_2__.store_invalid_shape(name);
  }
}

/***/ }),

/***/ "../svelte/packages/svelte/src/internal/shared/warnings.js":
/*!*****************************************************************!*\
  !*** ../svelte/packages/svelte/src/internal/shared/warnings.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   dynamic_void_element_content: () => (/* binding */ dynamic_void_element_content),
/* harmony export */   state_snapshot_uncloneable: () => (/* binding */ state_snapshot_uncloneable)
/* harmony export */ });
/* harmony import */ var esm_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! esm-env */ "../svelte/node_modules/.pnpm/esm-env@1.2.1/node_modules/esm-env/index.js");
/* This file is generated by scripts/process-messages/index.js. Do not edit! */


var bold = 'font-weight: bold';
var normal = 'font-weight: normal';

/**
 * `<svelte:element this="%tag%">` is a void element — it cannot have content
 * @param {string} tag
 */
function dynamic_void_element_content(tag) {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    console.warn(`%c[svelte] dynamic_void_element_content\n%c\`<svelte:element this="${tag}">\` is a void element — it cannot have content\nhttps://svelte.dev/e/dynamic_void_element_content`, bold, normal);
  } else {
    console.warn(`https://svelte.dev/e/dynamic_void_element_content`);
  }
}

/**
 * The following properties cannot be cloned with `$state.snapshot` — the return value contains the originals:
 * 
 * %properties%
 * @param {string | undefined | null} [properties]
 */
function state_snapshot_uncloneable(properties) {
  if (esm_env__WEBPACK_IMPORTED_MODULE_0__.DEV) {
    console.warn(`%c[svelte] state_snapshot_uncloneable\n%c${properties ? `The following properties cannot be cloned with \`$state.snapshot\` — the return value contains the originals:

${properties}` : 'Value cannot be cloned with `$state.snapshot` — the original value was returned'}\nhttps://svelte.dev/e/state_snapshot_uncloneable`, bold, normal);
  } else {
    console.warn(`https://svelte.dev/e/state_snapshot_uncloneable`);
  }
}

/***/ }),

/***/ "../svelte/packages/svelte/src/legacy/legacy-client.js":
/*!*************************************************************!*\
  !*** ../svelte/packages/svelte/src/legacy/legacy-client.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   asClassComponent: () => (/* binding */ asClassComponent),
/* harmony export */   createBubbler: () => (/* binding */ createBubbler),
/* harmony export */   createClassComponent: () => (/* binding */ createClassComponent),
/* harmony export */   handlers: () => (/* binding */ handlers),
/* harmony export */   nonpassive: () => (/* reexport safe */ _internal_client_dom_legacy_event_modifiers_js__WEBPACK_IMPORTED_MODULE_11__.nonpassive),
/* harmony export */   once: () => (/* reexport safe */ _internal_client_dom_legacy_event_modifiers_js__WEBPACK_IMPORTED_MODULE_11__.once),
/* harmony export */   passive: () => (/* reexport safe */ _internal_client_dom_legacy_event_modifiers_js__WEBPACK_IMPORTED_MODULE_11__.passive),
/* harmony export */   preventDefault: () => (/* reexport safe */ _internal_client_dom_legacy_event_modifiers_js__WEBPACK_IMPORTED_MODULE_11__.preventDefault),
/* harmony export */   run: () => (/* binding */ run),
/* harmony export */   self: () => (/* reexport safe */ _internal_client_dom_legacy_event_modifiers_js__WEBPACK_IMPORTED_MODULE_11__.self),
/* harmony export */   stopImmediatePropagation: () => (/* reexport safe */ _internal_client_dom_legacy_event_modifiers_js__WEBPACK_IMPORTED_MODULE_11__.stopImmediatePropagation),
/* harmony export */   stopPropagation: () => (/* reexport safe */ _internal_client_dom_legacy_event_modifiers_js__WEBPACK_IMPORTED_MODULE_11__.stopPropagation),
/* harmony export */   trusted: () => (/* reexport safe */ _internal_client_dom_legacy_event_modifiers_js__WEBPACK_IMPORTED_MODULE_11__.trusted)
/* harmony export */ });
/* harmony import */ var _internal_client_constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/client/constants.js */ "../svelte/packages/svelte/src/internal/client/constants.js");
/* harmony import */ var _internal_client_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal/client/reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _internal_client_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../internal/client/reactivity/sources.js */ "../svelte/packages/svelte/src/internal/client/reactivity/sources.js");
/* harmony import */ var _internal_client_render_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../internal/client/render.js */ "../svelte/packages/svelte/src/internal/client/render.js");
/* harmony import */ var _internal_client_runtime_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../internal/client/runtime.js */ "../svelte/packages/svelte/src/internal/client/runtime.js");
/* harmony import */ var _internal_shared_errors_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../internal/shared/errors.js */ "../svelte/packages/svelte/src/internal/shared/errors.js");
/* harmony import */ var _internal_shared_utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../internal/shared/utils.js */ "../svelte/packages/svelte/src/internal/shared/utils.js");
/* harmony import */ var _internal_client_warnings_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../internal/client/warnings.js */ "../svelte/packages/svelte/src/internal/client/warnings.js");
/* harmony import */ var esm_env__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! esm-env */ "../svelte/node_modules/.pnpm/esm-env@1.2.1/node_modules/esm-env/index.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../constants.js */ "../svelte/packages/svelte/src/constants.js");
/* harmony import */ var _internal_client_context_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../internal/client/context.js */ "../svelte/packages/svelte/src/internal/client/context.js");
/* harmony import */ var _internal_client_dom_legacy_event_modifiers_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../internal/client/dom/legacy/event-modifiers.js */ "../svelte/packages/svelte/src/internal/client/dom/legacy/event-modifiers.js");
/** @import { ComponentConstructorOptions, ComponentType, SvelteComponent, Component } from 'svelte' */












/**
 * Takes the same options as a Svelte 4 component and the component function and returns a Svelte 4 compatible component.
 *
 * @deprecated Use this only as a temporary solution to migrate your imperative component code to Svelte 5.
 *
 * @template {Record<string, any>} Props
 * @template {Record<string, any>} Exports
 * @template {Record<string, any>} Events
 * @template {Record<string, any>} Slots
 *
 * @param {ComponentConstructorOptions<Props> & {
 * 	component: ComponentType<SvelteComponent<Props, Events, Slots>> | Component<Props>;
 * }} options
 * @returns {SvelteComponent<Props, Events, Slots> & Exports}
 */
function createClassComponent(options) {
  // @ts-expect-error $$prop_def etc are not actually defined
  return new Svelte4Component(options);
}

/**
 * Takes the component function and returns a Svelte 4 compatible component constructor.
 *
 * @deprecated Use this only as a temporary solution to migrate your imperative component code to Svelte 5.
 *
 * @template {Record<string, any>} Props
 * @template {Record<string, any>} Exports
 * @template {Record<string, any>} Events
 * @template {Record<string, any>} Slots
 *
 * @param {SvelteComponent<Props, Events, Slots> | Component<Props>} component
 * @returns {ComponentType<SvelteComponent<Props, Events, Slots> & Exports>}
 */
function asClassComponent(component) {
  // @ts-expect-error $$prop_def etc are not actually defined
  return class extends Svelte4Component {
    /** @param {any} options */
    constructor(options) {
      super({
        component,
        ...options
      });
    }
  };
}

/**
 * Support using the component as both a class and function during the transition period
 * @typedef  {{new (o: ComponentConstructorOptions): SvelteComponent;(...args: Parameters<Component<Record<string, any>>>): ReturnType<Component<Record<string, any>, Record<string, any>>>;}} LegacyComponentType
 */

class Svelte4Component {
  /** @type {any} */
  #events;

  /** @type {Record<string, any>} */
  #instance;

  /**
   * @param {ComponentConstructorOptions & {
   *  component: any;
   * }} options
   */
  constructor(options) {
    var sources = new Map();

    /**
     * @param {string | symbol} key
     * @param {unknown} value
     */
    var add_source = (key, value) => {
      var s = (0,_internal_client_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_2__.mutable_source)(value);
      sources.set(key, s);
      return s;
    };

    // Replicate coarse-grained props through a proxy that has a version source for
    // each property, which is incremented on updates to the property itself. Do not
    // use our $state proxy because that one has fine-grained reactivity.
    const props = new Proxy({
      ...(options.props || {}),
      $$events: {}
    }, {
      get(target, prop) {
        return (0,_internal_client_runtime_js__WEBPACK_IMPORTED_MODULE_4__.get)(sources.get(prop) ?? add_source(prop, Reflect.get(target, prop)));
      },
      has(target, prop) {
        // Necessary to not throw "invalid binding" validation errors on the component side
        if (prop === _internal_client_constants_js__WEBPACK_IMPORTED_MODULE_0__.LEGACY_PROPS) return true;
        (0,_internal_client_runtime_js__WEBPACK_IMPORTED_MODULE_4__.get)(sources.get(prop) ?? add_source(prop, Reflect.get(target, prop)));
        return Reflect.has(target, prop);
      },
      set(target, prop, value) {
        (0,_internal_client_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_2__.set)(sources.get(prop) ?? add_source(prop, value), value);
        return Reflect.set(target, prop, value);
      }
    });
    this.#instance = (options.hydrate ? _internal_client_render_js__WEBPACK_IMPORTED_MODULE_3__.hydrate : _internal_client_render_js__WEBPACK_IMPORTED_MODULE_3__.mount)(options.component, {
      target: options.target,
      anchor: options.anchor,
      props,
      context: options.context,
      intro: options.intro ?? false,
      recover: options.recover
    });

    // We don't flush_sync for custom element wrappers or if the user doesn't want it
    if (!options?.props?.$$host || options.sync === false) {
      (0,_internal_client_runtime_js__WEBPACK_IMPORTED_MODULE_4__.flush_sync)();
    }
    this.#events = props.$$events;
    for (const key of Object.keys(this.#instance)) {
      if (key === '$set' || key === '$destroy' || key === '$on') continue;
      (0,_internal_shared_utils_js__WEBPACK_IMPORTED_MODULE_6__.define_property)(this, key, {
        get() {
          return this.#instance[key];
        },
        /** @param {any} value */
        set(value) {
          this.#instance[key] = value;
        },
        enumerable: true
      });
    }
    this.#instance.$set = /** @param {Record<string, any>} next */next => {
      Object.assign(props, next);
    };
    this.#instance.$destroy = () => {
      (0,_internal_client_render_js__WEBPACK_IMPORTED_MODULE_3__.unmount)(this.#instance);
    };
  }

  /** @param {Record<string, any>} props */
  $set(props) {
    this.#instance.$set(props);
  }

  /**
   * @param {string} event
   * @param {(...args: any[]) => any} callback
   * @returns {any}
   */
  $on(event, callback) {
    this.#events[event] = this.#events[event] || [];

    /** @param {any[]} args */
    const cb = (...args) => callback.call(this, ...args);
    this.#events[event].push(cb);
    return () => {
      this.#events[event] = this.#events[event].filter(/** @param {any} fn */fn => fn !== cb);
    };
  }
  $destroy() {
    this.#instance.$destroy();
  }
}

/**
 * Runs the given function once immediately on the server, and works like `$effect.pre` on the client.
 *
 * @deprecated Use this only as a temporary solution to migrate your component code to Svelte 5.
 * @param {() => void | (() => void)} fn
 * @returns {void}
 */
function run(fn) {
  (0,_internal_client_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.user_pre_effect)(() => {
    fn();
    var effect = /** @type {import('#client').Effect} */_internal_client_runtime_js__WEBPACK_IMPORTED_MODULE_4__.active_effect;
    // If the effect is immediately made dirty again, mark it as maybe dirty to emulate legacy behaviour
    if ((effect.f & _internal_client_constants_js__WEBPACK_IMPORTED_MODULE_0__.DIRTY) !== 0) {
      let filename = "a file (we can't know which one)";
      if (esm_env__WEBPACK_IMPORTED_MODULE_8__.DEV) {
        // @ts-ignore
        filename = _internal_client_context_js__WEBPACK_IMPORTED_MODULE_10__.dev_current_component_function?.[_constants_js__WEBPACK_IMPORTED_MODULE_9__.FILENAME] ?? filename;
      }
      _internal_client_warnings_js__WEBPACK_IMPORTED_MODULE_7__.legacy_recursive_reactive_block(filename);
      (0,_internal_client_runtime_js__WEBPACK_IMPORTED_MODULE_4__.set_signal_status)(effect, _internal_client_constants_js__WEBPACK_IMPORTED_MODULE_0__.MAYBE_DIRTY);
    }
  });
}

/**
 * Function to mimic the multiple listeners available in svelte 4
 * @deprecated
 * @param {EventListener[]} handlers
 * @returns {EventListener}
 */
function handlers(...handlers) {
  return function (event) {
    const {
      stopImmediatePropagation
    } = event;
    let stopped = false;
    event.stopImmediatePropagation = () => {
      stopped = true;
      stopImmediatePropagation.call(event);
    };
    const errors = [];
    for (const handler of handlers) {
      try {
        // @ts-expect-error `this` is not typed
        handler?.call(this, event);
      } catch (e) {
        errors.push(e);
      }
      if (stopped) {
        break;
      }
    }
    for (let error of errors) {
      queueMicrotask(() => {
        throw error;
      });
    }
  };
}

/**
 * Function to create a `bubble` function that mimic the behavior of `on:click` without handler available in svelte 4.
 * @deprecated Use this only as a temporary solution to migrate your automatically delegated events in Svelte 5.
 */
function createBubbler() {
  const active_component_context = _internal_client_context_js__WEBPACK_IMPORTED_MODULE_10__.component_context;
  if (active_component_context === null) {
    (0,_internal_shared_errors_js__WEBPACK_IMPORTED_MODULE_5__.lifecycle_outside_component)('createBubbler');
  }
  return (/**@type {string}*/type) => (/**@type {Event}*/event) => {
    const events = /** @type {Record<string, Function | Function[]>} */active_component_context.s.$$events?.[(/** @type {any} */type)];
    if (events) {
      const callbacks = (0,_internal_shared_utils_js__WEBPACK_IMPORTED_MODULE_6__.is_array)(events) ? events.slice() : [events];
      for (const fn of callbacks) {
        fn.call(active_component_context.x, event);
      }
      return !event.defaultPrevented;
    }
    return true;
  };
}


/***/ }),

/***/ "../svelte/packages/svelte/src/reactivity/create-subscriber.js":
/*!*********************************************************************!*\
  !*** ../svelte/packages/svelte/src/reactivity/create-subscriber.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createSubscriber: () => (/* binding */ createSubscriber)
/* harmony export */ });
/* harmony import */ var _internal_client_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/client/runtime.js */ "../svelte/packages/svelte/src/internal/client/runtime.js");
/* harmony import */ var _internal_client_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal/client/reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _internal_client_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../internal/client/reactivity/sources.js */ "../svelte/packages/svelte/src/internal/client/reactivity/sources.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ "../svelte/packages/svelte/src/reactivity/utils.js");





/**
 * Returns a `subscribe` function that, if called in an effect (including expressions in the template),
 * calls its `start` callback with an `update` function. Whenever `update` is called, the effect re-runs.
 *
 * If `start` returns a function, it will be called when the effect is destroyed.
 *
 * If `subscribe` is called in multiple effects, `start` will only be called once as long as the effects
 * are active, and the returned teardown function will only be called when all effects are destroyed.
 *
 * It's best understood with an example. Here's an implementation of [`MediaQuery`](https://svelte.dev/docs/svelte/svelte-reactivity#MediaQuery):
 *
 * ```js
 * import { createSubscriber } from 'svelte/reactivity';
 * import { on } from 'svelte/events';
 *
 * export class MediaQuery {
 * 	#query;
 * 	#subscribe;
 *
 * 	constructor(query) {
 * 		this.#query = window.matchMedia(`(${query})`);
 *
 * 		this.#subscribe = createSubscriber((update) => {
 * 			// when the `change` event occurs, re-run any effects that read `this.current`
 * 			const off = on(this.#query, 'change', update);
 *
 * 			// stop listening when all the effects are destroyed
 * 			return () => off();
 * 		});
 * 	}
 *
 * 	get current() {
 * 		this.#subscribe();
 *
 * 		// Return the current state of the query, whether or not we're in an effect
 * 		return this.#query.matches;
 * 	}
 * }
 * ```
 * @param {(update: () => void) => (() => void) | void} start
 * @since 5.7.0
 */
function createSubscriber(start) {
  let subscribers = 0;
  let version = (0,_internal_client_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_2__.source)(0);
  /** @type {(() => void) | void} */
  let stop;
  return () => {
    if ((0,_internal_client_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.effect_tracking)()) {
      (0,_internal_client_runtime_js__WEBPACK_IMPORTED_MODULE_0__.get)(version);
      (0,_internal_client_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_1__.render_effect)(() => {
        if (subscribers === 0) {
          stop = (0,_internal_client_runtime_js__WEBPACK_IMPORTED_MODULE_0__.untrack)(() => start(() => (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.increment)(version)));
        }
        subscribers += 1;
        return () => {
          (0,_internal_client_runtime_js__WEBPACK_IMPORTED_MODULE_0__.tick)().then(() => {
            // Only count down after timeout, else we would reach 0 before our own render effect reruns,
            // but reach 1 again when the tick callback of the prior teardown runs. That would mean we
            // re-subcribe unnecessarily and create a memory leak because the old subscription is never cleaned up.
            subscribers -= 1;
            if (subscribers === 0) {
              stop?.();
              stop = undefined;
            }
          });
        };
      });
    }
  };
}

/***/ }),

/***/ "../svelte/packages/svelte/src/reactivity/utils.js":
/*!*********************************************************!*\
  !*** ../svelte/packages/svelte/src/reactivity/utils.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   increment: () => (/* binding */ increment)
/* harmony export */ });
/* harmony import */ var _internal_client_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/client/reactivity/sources.js */ "../svelte/packages/svelte/src/internal/client/reactivity/sources.js");
/** @import { Source } from '#client' */


/** @param {Source<number>} source */
function increment(source) {
  (0,_internal_client_reactivity_sources_js__WEBPACK_IMPORTED_MODULE_0__.set)(source, source.v + 1);
}

/***/ }),

/***/ "../svelte/packages/svelte/src/store/index-client.js":
/*!***********************************************************!*\
  !*** ../svelte/packages/svelte/src/store/index-client.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   derived: () => (/* reexport safe */ _shared_index_js__WEBPACK_IMPORTED_MODULE_1__.derived),
/* harmony export */   fromStore: () => (/* binding */ fromStore),
/* harmony export */   get: () => (/* reexport safe */ _shared_index_js__WEBPACK_IMPORTED_MODULE_1__.get),
/* harmony export */   readable: () => (/* reexport safe */ _shared_index_js__WEBPACK_IMPORTED_MODULE_1__.readable),
/* harmony export */   readonly: () => (/* reexport safe */ _shared_index_js__WEBPACK_IMPORTED_MODULE_1__.readonly),
/* harmony export */   toStore: () => (/* binding */ toStore),
/* harmony export */   writable: () => (/* reexport safe */ _shared_index_js__WEBPACK_IMPORTED_MODULE_1__.writable)
/* harmony export */ });
/* harmony import */ var _internal_client_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/client/reactivity/effects.js */ "../svelte/packages/svelte/src/internal/client/reactivity/effects.js");
/* harmony import */ var _shared_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shared/index.js */ "../svelte/packages/svelte/src/store/shared/index.js");
/* harmony import */ var _reactivity_create_subscriber_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../reactivity/create-subscriber.js */ "../svelte/packages/svelte/src/reactivity/create-subscriber.js");
/** @import { Readable, Writable } from './public.js' */





/**
 * @template V
 * @overload
 * @param {() => V} get
 * @param {(v: V) => void} set
 * @returns {Writable<V>}
 */
/**
 * @template V
 * @overload
 * @param {() => V} get
 * @returns {Readable<V>}
 */
/**
 * Create a store from a function that returns state, and (to make a writable store), an
 * optional second function that sets state.
 *
 * ```ts
 * import { toStore } from 'svelte/store';
 *
 * let count = $state(0);
 *
 * const store = toStore(() => count, (v) => (count = v));
 * ```
 * @template V
 * @param {() => V} get
 * @param {(v: V) => void} [set]
 * @returns {Writable<V> | Readable<V>}
 */
function toStore(get, set) {
  let init_value = get();
  const store = (0,_shared_index_js__WEBPACK_IMPORTED_MODULE_1__.writable)(init_value, set => {
    // If the value has changed before we call subscribe, then
    // we need to treat the value as already having run
    let ran = init_value !== get();

    // TODO do we need a different implementation on the server?
    const teardown = (0,_internal_client_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_0__.effect_root)(() => {
      (0,_internal_client_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_0__.render_effect)(() => {
        const value = get();
        if (ran) set(value);
      });
    });
    ran = true;
    return teardown;
  });
  if (set) {
    return {
      set,
      update: fn => set(fn(get())),
      subscribe: store.subscribe
    };
  }
  return {
    subscribe: store.subscribe
  };
}

/**
 * @template V
 * @overload
 * @param {Writable<V>} store
 * @returns {{ current: V }}
 */
/**
 * @template V
 * @overload
 * @param {Readable<V>} store
 * @returns {{ readonly current: V }}
 */
/**
 * Convert a store to an object with a reactive `current` property. If `store`
 * is a readable store, `current` will be a readonly property.
 *
 * ```ts
 * import { fromStore, get, writable } from 'svelte/store';
 *
 * const store = writable(0);
 *
 * const count = fromStore(store);
 *
 * count.current; // 0;
 * store.set(1);
 * count.current; // 1
 *
 * count.current += 1;
 * get(store); // 2
 * ```
 * @template V
 * @param {Writable<V> | Readable<V>} store
 */
function fromStore(store) {
  let value = /** @type {V} */undefined;
  const subscribe = (0,_reactivity_create_subscriber_js__WEBPACK_IMPORTED_MODULE_2__.createSubscriber)(update => {
    let ran = false;
    const unsubscribe = store.subscribe(v => {
      value = v;
      if (ran) update();
    });
    ran = true;
    return unsubscribe;
  });
  function current() {
    if ((0,_internal_client_reactivity_effects_js__WEBPACK_IMPORTED_MODULE_0__.effect_tracking)()) {
      subscribe();
      return value;
    }
    return (0,_shared_index_js__WEBPACK_IMPORTED_MODULE_1__.get)(store);
  }
  if ('set' in store) {
    return {
      get current() {
        return current();
      },
      set current(v) {
        store.set(v);
      }
    };
  }
  return {
    get current() {
      return current();
    }
  };
}

/***/ }),

/***/ "../svelte/packages/svelte/src/store/shared/index.js":
/*!***********************************************************!*\
  !*** ../svelte/packages/svelte/src/store/shared/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   derived: () => (/* binding */ derived),
/* harmony export */   get: () => (/* binding */ get),
/* harmony export */   readable: () => (/* binding */ readable),
/* harmony export */   readonly: () => (/* binding */ readonly),
/* harmony export */   writable: () => (/* binding */ writable)
/* harmony export */ });
/* harmony import */ var _internal_shared_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../internal/shared/utils.js */ "../svelte/packages/svelte/src/internal/shared/utils.js");
/* harmony import */ var _internal_client_reactivity_equality_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../internal/client/reactivity/equality.js */ "../svelte/packages/svelte/src/internal/client/reactivity/equality.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils.js */ "../svelte/packages/svelte/src/store/utils.js");
/** @import { Readable, StartStopNotifier, Subscriber, Unsubscriber, Updater, Writable } from '../public.js' */
/** @import { Stores, StoresValues, SubscribeInvalidateTuple } from '../private.js' */




/**
 * @type {Array<SubscribeInvalidateTuple<any> | any>}
 */
const subscriber_queue = [];

/**
 * Creates a `Readable` store that allows reading by subscription.
 *
 * @template T
 * @param {T} [value] initial value
 * @param {StartStopNotifier<T>} [start]
 * @returns {Readable<T>}
 */
function readable(value, start) {
  return {
    subscribe: writable(value, start).subscribe
  };
}

/**
 * Create a `Writable` store that allows both updating and reading by subscription.
 *
 * @template T
 * @param {T} [value] initial value
 * @param {StartStopNotifier<T>} [start]
 * @returns {Writable<T>}
 */
function writable(value, start = _internal_shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.noop) {
  /** @type {Unsubscriber | null} */
  let stop = null;

  /** @type {Set<SubscribeInvalidateTuple<T>>} */
  const subscribers = new Set();

  /**
   * @param {T} new_value
   * @returns {void}
   */
  function set(new_value) {
    if ((0,_internal_client_reactivity_equality_js__WEBPACK_IMPORTED_MODULE_1__.safe_not_equal)(value, new_value)) {
      value = new_value;
      if (stop) {
        // store is ready
        const run_queue = !subscriber_queue.length;
        for (const subscriber of subscribers) {
          subscriber[1]();
          subscriber_queue.push(subscriber, value);
        }
        if (run_queue) {
          for (let i = 0; i < subscriber_queue.length; i += 2) {
            subscriber_queue[i][0](subscriber_queue[i + 1]);
          }
          subscriber_queue.length = 0;
        }
      }
    }
  }

  /**
   * @param {Updater<T>} fn
   * @returns {void}
   */
  function update(fn) {
    set(fn(/** @type {T} */value));
  }

  /**
   * @param {Subscriber<T>} run
   * @param {() => void} [invalidate]
   * @returns {Unsubscriber}
   */
  function subscribe(run, invalidate = _internal_shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.noop) {
    /** @type {SubscribeInvalidateTuple<T>} */
    const subscriber = [run, invalidate];
    subscribers.add(subscriber);
    if (subscribers.size === 1) {
      stop = start(set, update) || _internal_shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.noop;
    }
    run(/** @type {T} */value);
    return () => {
      subscribers.delete(subscriber);
      if (subscribers.size === 0 && stop) {
        stop();
        stop = null;
      }
    };
  }
  return {
    set,
    update,
    subscribe
  };
}

/**
 * Derived value store by synchronizing one or more readable stores and
 * applying an aggregation function over its input values.
 *
 * @template {Stores} S
 * @template T
 * @overload
 * @param {S} stores
 * @param {(values: StoresValues<S>, set: (value: T) => void, update: (fn: Updater<T>) => void) => Unsubscriber | void} fn
 * @param {T} [initial_value]
 * @returns {Readable<T>}
 */
/**
 * Derived value store by synchronizing one or more readable stores and
 * applying an aggregation function over its input values.
 *
 * @template {Stores} S
 * @template T
 * @overload
 * @param {S} stores
 * @param {(values: StoresValues<S>) => T} fn
 * @param {T} [initial_value]
 * @returns {Readable<T>}
 */
/**
 * @template {Stores} S
 * @template T
 * @param {S} stores
 * @param {Function} fn
 * @param {T} [initial_value]
 * @returns {Readable<T>}
 */
function derived(stores, fn, initial_value) {
  const single = !Array.isArray(stores);
  /** @type {Array<Readable<any>>} */
  const stores_array = single ? [stores] : stores;
  if (!stores_array.every(Boolean)) {
    throw new Error('derived() expects stores as input, got a falsy value');
  }
  const auto = fn.length < 2;
  return readable(initial_value, (set, update) => {
    let started = false;
    /** @type {T[]} */
    const values = [];
    let pending = 0;
    let cleanup = _internal_shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.noop;
    const sync = () => {
      if (pending) {
        return;
      }
      cleanup();
      const result = fn(single ? values[0] : values, set, update);
      if (auto) {
        set(result);
      } else {
        cleanup = typeof result === 'function' ? result : _internal_shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.noop;
      }
    };
    const unsubscribers = stores_array.map((store, i) => (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.subscribe_to_store)(store, value => {
      values[i] = value;
      pending &= ~(1 << i);
      if (started) {
        sync();
      }
    }, () => {
      pending |= 1 << i;
    }));
    started = true;
    sync();
    return function stop() {
      (0,_internal_shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.run_all)(unsubscribers);
      cleanup();
      // We need to set this to false because callbacks can still happen despite having unsubscribed:
      // Callbacks might already be placed in the queue which doesn't know it should no longer
      // invoke this derived store.
      started = false;
    };
  });
}

/**
 * Takes a store and returns a new one derived from the old one that is readable.
 *
 * @template T
 * @param {Readable<T>} store  - store to make readonly
 * @returns {Readable<T>}
 */
function readonly(store) {
  return {
    // @ts-expect-error TODO i suspect the bind is unnecessary
    subscribe: store.subscribe.bind(store)
  };
}

/**
 * Get the current value from a store by subscribing and immediately unsubscribing.
 *
 * @template T
 * @param {Readable<T>} store
 * @returns {T}
 */
function get(store) {
  let value;
  (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.subscribe_to_store)(store, _ => value = _)();
  // @ts-expect-error
  return value;
}

/***/ }),

/***/ "../svelte/packages/svelte/src/store/utils.js":
/*!****************************************************!*\
  !*** ../svelte/packages/svelte/src/store/utils.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   subscribe_to_store: () => (/* binding */ subscribe_to_store)
/* harmony export */ });
/* harmony import */ var _index_client_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index-client.js */ "../svelte/packages/svelte/src/index-client.js");
/* harmony import */ var _internal_shared_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal/shared/utils.js */ "../svelte/packages/svelte/src/internal/shared/utils.js");
/** @import { Readable } from './public' */



/**
 * @template T
 * @param {Readable<T> | null | undefined} store
 * @param {(value: T) => void} run
 * @param {(value: T) => void} [invalidate]
 * @returns {() => void}
 */
function subscribe_to_store(store, run, invalidate) {
  if (store == null) {
    // @ts-expect-error
    run(undefined);

    // @ts-expect-error
    if (invalidate) invalidate(undefined);
    return _internal_shared_utils_js__WEBPACK_IMPORTED_MODULE_1__.noop;
  }

  // Svelte store takes a private second argument
  // StartStopNotifier could mutate state, and we want to silence the corresponding validation error
  const unsub = (0,_index_client_js__WEBPACK_IMPORTED_MODULE_0__.untrack)(() => store.subscribe(run,
  // @ts-expect-error
  invalidate));

  // Also support RxJS
  // @ts-expect-error TODO fix this in the types?
  return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}

/***/ }),

/***/ "../svelte/packages/svelte/src/utils.js":
/*!**********************************************!*\
  !*** ../svelte/packages/svelte/src/utils.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   cannot_be_set_statically: () => (/* binding */ cannot_be_set_statically),
/* harmony export */   hash: () => (/* binding */ hash),
/* harmony export */   is_boolean_attribute: () => (/* binding */ is_boolean_attribute),
/* harmony export */   is_capture_event: () => (/* binding */ is_capture_event),
/* harmony export */   is_content_editable_binding: () => (/* binding */ is_content_editable_binding),
/* harmony export */   is_delegated: () => (/* binding */ is_delegated),
/* harmony export */   is_dom_property: () => (/* binding */ is_dom_property),
/* harmony export */   is_load_error_element: () => (/* binding */ is_load_error_element),
/* harmony export */   is_mathml: () => (/* binding */ is_mathml),
/* harmony export */   is_passive_event: () => (/* binding */ is_passive_event),
/* harmony export */   is_raw_text_element: () => (/* binding */ is_raw_text_element),
/* harmony export */   is_reserved: () => (/* binding */ is_reserved),
/* harmony export */   is_rune: () => (/* binding */ is_rune),
/* harmony export */   is_svg: () => (/* binding */ is_svg),
/* harmony export */   is_void: () => (/* binding */ is_void),
/* harmony export */   normalize_attribute: () => (/* binding */ normalize_attribute),
/* harmony export */   sanitize_location: () => (/* binding */ sanitize_location)
/* harmony export */ });
const regex_return_characters = /\r/g;

/**
 * @param {string} str
 * @returns {string}
 */
function hash(str) {
  str = str.replace(regex_return_characters, '');
  let hash = 5381;
  let i = str.length;
  while (i--) hash = (hash << 5) - hash ^ str.charCodeAt(i);
  return (hash >>> 0).toString(36);
}
const VOID_ELEMENT_NAMES = ['area', 'base', 'br', 'col', 'command', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr'];

/**
 * Returns `true` if `name` is of a void element
 * @param {string} name
 */
function is_void(name) {
  return VOID_ELEMENT_NAMES.includes(name) || name.toLowerCase() === '!doctype';
}
const RESERVED_WORDS = ['arguments', 'await', 'break', 'case', 'catch', 'class', 'const', 'continue', 'debugger', 'default', 'delete', 'do', 'else', 'enum', 'eval', 'export', 'extends', 'false', 'finally', 'for', 'function', 'if', 'implements', 'import', 'in', 'instanceof', 'interface', 'let', 'new', 'null', 'package', 'private', 'protected', 'public', 'return', 'static', 'super', 'switch', 'this', 'throw', 'true', 'try', 'typeof', 'var', 'void', 'while', 'with', 'yield'];

/**
 * Returns `true` if `word` is a reserved JavaScript keyword
 * @param {string} word
 */
function is_reserved(word) {
  return RESERVED_WORDS.includes(word);
}

/**
 * @param {string} name
 */
function is_capture_event(name) {
  return name.endsWith('capture') && name !== 'gotpointercapture' && name !== 'lostpointercapture';
}

/** List of Element events that will be delegated */
const DELEGATED_EVENTS = ['beforeinput', 'click', 'change', 'dblclick', 'contextmenu', 'focusin', 'focusout', 'input', 'keydown', 'keyup', 'mousedown', 'mousemove', 'mouseout', 'mouseover', 'mouseup', 'pointerdown', 'pointermove', 'pointerout', 'pointerover', 'pointerup', 'touchend', 'touchmove', 'touchstart'];

/**
 * Returns `true` if `event_name` is a delegated event
 * @param {string} event_name
 */
function is_delegated(event_name) {
  return DELEGATED_EVENTS.includes(event_name);
}

/**
 * Attributes that are boolean, i.e. they are present or not present.
 */
const DOM_BOOLEAN_ATTRIBUTES = ['allowfullscreen', 'async', 'autofocus', 'autoplay', 'checked', 'controls', 'default', 'disabled', 'formnovalidate', 'hidden', 'indeterminate', 'inert', 'ismap', 'loop', 'multiple', 'muted', 'nomodule', 'novalidate', 'open', 'playsinline', 'readonly', 'required', 'reversed', 'seamless', 'selected', 'webkitdirectory', 'defer', 'disablepictureinpicture', 'disableremoteplayback'];

/**
 * Returns `true` if `name` is a boolean attribute
 * @param {string} name
 */
function is_boolean_attribute(name) {
  return DOM_BOOLEAN_ATTRIBUTES.includes(name);
}

/**
 * @type {Record<string, string>}
 * List of attribute names that should be aliased to their property names
 * because they behave differently between setting them as an attribute and
 * setting them as a property.
 */
const ATTRIBUTE_ALIASES = {
  // no `class: 'className'` because we handle that separately
  formnovalidate: 'formNoValidate',
  ismap: 'isMap',
  nomodule: 'noModule',
  playsinline: 'playsInline',
  readonly: 'readOnly',
  defaultvalue: 'defaultValue',
  defaultchecked: 'defaultChecked',
  srcobject: 'srcObject',
  novalidate: 'noValidate',
  allowfullscreen: 'allowFullscreen',
  disablepictureinpicture: 'disablePictureInPicture',
  disableremoteplayback: 'disableRemotePlayback'
};

/**
 * @param {string} name
 */
function normalize_attribute(name) {
  name = name.toLowerCase();
  return ATTRIBUTE_ALIASES[name] ?? name;
}
const DOM_PROPERTIES = [...DOM_BOOLEAN_ATTRIBUTES, 'formNoValidate', 'isMap', 'noModule', 'playsInline', 'readOnly', 'value', 'volume', 'defaultValue', 'defaultChecked', 'srcObject', 'noValidate', 'allowFullscreen', 'disablePictureInPicture', 'disableRemotePlayback'];

/**
 * @param {string} name
 */
function is_dom_property(name) {
  return DOM_PROPERTIES.includes(name);
}
const NON_STATIC_PROPERTIES = ['autofocus', 'muted', 'defaultValue', 'defaultChecked'];

/**
 * Returns `true` if the given attribute cannot be set through the template
 * string, i.e. needs some kind of JavaScript handling to work.
 * @param {string} name
 */
function cannot_be_set_statically(name) {
  return NON_STATIC_PROPERTIES.includes(name);
}

/**
 * Subset of delegated events which should be passive by default.
 * These two are already passive via browser defaults on window, document and body.
 * But since
 * - we're delegating them
 * - they happen often
 * - they apply to mobile which is generally less performant
 * we're marking them as passive by default for other elements, too.
 */
const PASSIVE_EVENTS = ['touchstart', 'touchmove'];

/**
 * Returns `true` if `name` is a passive event
 * @param {string} name
 */
function is_passive_event(name) {
  return PASSIVE_EVENTS.includes(name);
}
const CONTENT_EDITABLE_BINDINGS = ['textContent', 'innerHTML', 'innerText'];

/** @param {string} name */
function is_content_editable_binding(name) {
  return CONTENT_EDITABLE_BINDINGS.includes(name);
}
const LOAD_ERROR_ELEMENTS = ['body', 'embed', 'iframe', 'img', 'link', 'object', 'script', 'style', 'track'];

/**
 * Returns `true` if the element emits `load` and `error` events
 * @param {string} name
 */
function is_load_error_element(name) {
  return LOAD_ERROR_ELEMENTS.includes(name);
}
const SVG_ELEMENTS = ['altGlyph', 'altGlyphDef', 'altGlyphItem', 'animate', 'animateColor', 'animateMotion', 'animateTransform', 'circle', 'clipPath', 'color-profile', 'cursor', 'defs', 'desc', 'discard', 'ellipse', 'feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feDropShadow', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence', 'filter', 'font', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri', 'foreignObject', 'g', 'glyph', 'glyphRef', 'hatch', 'hatchpath', 'hkern', 'image', 'line', 'linearGradient', 'marker', 'mask', 'mesh', 'meshgradient', 'meshpatch', 'meshrow', 'metadata', 'missing-glyph', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'set', 'solidcolor', 'stop', 'svg', 'switch', 'symbol', 'text', 'textPath', 'tref', 'tspan', 'unknown', 'use', 'view', 'vkern'];

/** @param {string} name */
function is_svg(name) {
  return SVG_ELEMENTS.includes(name);
}
const MATHML_ELEMENTS = ['annotation', 'annotation-xml', 'maction', 'math', 'merror', 'mfrac', 'mi', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mprescripts', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msubsup', 'msup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover', 'semantics'];

/** @param {string} name */
function is_mathml(name) {
  return MATHML_ELEMENTS.includes(name);
}
const RUNES = /** @type {const} */['$state', '$state.raw', '$state.snapshot', '$props', '$props.id', '$bindable', '$derived', '$derived.by', '$effect', '$effect.pre', '$effect.tracking', '$effect.root', '$inspect', '$inspect().with', '$inspect.trace', '$host'];

/**
 * @param {string} name
 * @returns {name is RUNES[number]}
 */
function is_rune(name) {
  return RUNES.includes(/** @type {RUNES[number]} */name);
}

/** List of elements that require raw contents and should not have SSR comments put in them */
const RAW_TEXT_ELEMENTS = /** @type {const} */['textarea', 'script', 'style', 'title'];

/** @param {string} name */
function is_raw_text_element(name) {
  return RAW_TEXT_ELEMENTS.includes(/** @type {RAW_TEXT_ELEMENTS[number]} */name);
}

/**
 * Prevent devtools trying to make `location` a clickable link by inserting a zero-width space
 * @param {string | undefined} location
 */
function sanitize_location(location) {
  return location?.replace(/\//g, '/\u200b');
}

/***/ }),

/***/ "./node_modules/lodash/lodash.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/lodash.js ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.21';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function',
      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading whitespace. */
  var reTrimStart = /^\s+/;

  /** Used to match a single whitespace character. */
  var reWhitespace = /\s/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /**
   * Used to validate the `validate` option in `_.template` variable.
   *
   * Forbids characters which could potentially change the meaning of the function argument definition:
   * - "()," (modification of function parameters)
   * - "=" (default value)
   * - "[]{}" (destructuring of function parameters)
   * - "/" (beginning of a comment)
   * - whitespace
   */
  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports =  true && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */
  function baseTrim(string) {
    return string
      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
      : string;
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedEndIndex(string) {
    var index = string.length;

    while (index-- && reWhitespace.test(string.charAt(index))) {}
    return index;
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = arrayMap(iteratees, function(iteratee) {
          if (isArray(iteratee)) {
            return function(value) {
              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
            }
          }
          return iteratee;
        });
      } else {
        iteratees = [identity];
      }

      var index = -1;
      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
          return object;
        }

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      var low = 0,
          high = array == null ? 0 : array.length;
      if (high === 0) {
        return 0;
      }

      value = iteratee(value);
      var valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision && nativeIsFinite(number)) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Check that cyclic values are equal.
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Check that cyclic values are equal.
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      // The sourceURL gets injected into the source that's eval-ed, so be careful
      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
      // and escape the comment, thus injecting code that gets evaled.
      var sourceURL = '//# sourceURL=' +
        (hasOwnProperty.call(options, 'sourceURL')
          ? (options.sourceURL + '').replace(/\s/g, ' ')
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Throw an error if a forbidden character was found in `variable`, to prevent
      // potential command injection attacks.
      else if (reForbiddenIdentifierChars.test(variable)) {
        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
      }

      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return baseTrim(string);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.slice(0, trimmedEndIndex(string) + 1);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     *
     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(realNames, key)) {
          realNames[key] = [];
        }
        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return _;
    }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else {}
}.call(this));


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be in strict mode.
(() => {
"use strict";
/*!*************************************!*\
  !*** ./src/ConfIt/svelte-helper.ts ***!
  \*************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   clamp: () => (/* binding */ clamp),
/* harmony export */   createSelectedStores: () => (/* binding */ createSelectedStores),
/* harmony export */   elasticClamp: () => (/* binding */ elasticClamp),
/* harmony export */   logg: () => (/* binding */ logg),
/* harmony export */   loop: () => (/* binding */ loop),
/* harmony export */   sleep: () => (/* binding */ sleep),
/* harmony export */   symEase: () => (/* binding */ symEase)
/* harmony export */ });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var svelte_store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! svelte/store */ "../svelte/packages/svelte/src/store/index-client.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _wrapNativeSuper(t) { var r = "function" == typeof Map ? new Map() : void 0; return _wrapNativeSuper = function _wrapNativeSuper(t) { if (null === t || !_isNativeFunction(t)) return t; if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function"); if (void 0 !== r) { if (r.has(t)) return r.get(t); r.set(t, Wrapper); } function Wrapper() { return _construct(t, arguments, _getPrototypeOf(this).constructor); } return Wrapper.prototype = Object.create(t.prototype, { constructor: { value: Wrapper, enumerable: !1, writable: !0, configurable: !0 } }), _setPrototypeOf(Wrapper, t); }, _wrapNativeSuper(t); }
function _construct(t, e, r) { if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments); var o = [null]; o.push.apply(o, e); var p = new (t.bind.apply(t, o))(); return r && _setPrototypeOf(p, r.prototype), p; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _isNativeFunction(t) { try { return -1 !== Function.toString.call(t).indexOf("[native code]"); } catch (n) { return "function" == typeof t; } }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }


var NoOptionError = /*#__PURE__*/function (_Error) {
  function NoOptionError() {
    _classCallCheck(this, NoOptionError);
    return _callSuper(this, NoOptionError, arguments);
  }
  _inherits(NoOptionError, _Error);
  return _createClass(NoOptionError);
}(/*#__PURE__*/_wrapNativeSuper(Error));
function createSelectedStores() {
  var _options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var _index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
  var _selected = _options[_index];
  var s_options = (0,svelte_store__WEBPACK_IMPORTED_MODULE_1__.writable)(_options);
  var s_selected = (0,svelte_store__WEBPACK_IMPORTED_MODULE_1__.writable)(_selected);
  var s_index = (0,svelte_store__WEBPACK_IMPORTED_MODULE_1__.writable)(_index);
  var options = {
    subscribe: s_options.subscribe,
    set: function set(v) {
      _options = v;
      s_options.set(v);
      if (_selected) {
        var __index = _options.indexOf(_selected);
        index.set(__index);
        if (__index === -1) {
          selected.set(undefined);
        }
      }
    },
    update: function update(cb) {
      options.set(cb(_options));
    }
  };
  var selected = {
    subscribe: s_selected.subscribe,
    set: function set(v) {
      var __index = _options.indexOf(v);
      if (__index === -1) {
        console.error("NoOptionError", _options, v);
        throw new NoOptionError();
      }
      _selected = v;
      // avoid loop between `selected` and `index` stores
      if (__index !== _index) {
        index.set(__index);
      }
      s_selected.set(v);
    }
  };
  var index = {
    subscribe: s_index.subscribe,
    set: function set(v) {
      v = (v + _options.length) % _options.length;
      if (_options[v] === undefined) {
        console.error("NoOptionError", _options, v);
        throw new NoOptionError();
      }
      _index = v;
      // avoid loop between `selected` and `index` stores
      if (_options[v] !== _selected) {
        selected.set(_options[v]);
      }
      s_index.set(v);
    },
    update: function update(cb) {
      index.set(cb(_index));
    }
  };
  return [options, selected, index];
}
function clamp(value) {
  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  if (min !== null && value < min) {
    return min;
  }
  if (max !== null && value > max) {
    return max;
  }
  return value;
}
function elasticClamp(value) {
  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var clampStiffness = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.5;
  if (min !== null && value < min) {
    return min - elasticClampEase(min - value, clampStiffness);
  }
  if (max !== null && value > max) {
    return max + elasticClampEase(value - max, clampStiffness);
  }
  return value;
}
function elasticClampEase(value, clampStiffness) {
  return Math.pow(Math.sqrt(value), 2 - clampStiffness);
}
function sleep(ms) {
  return new Promise(function (res, _rej) {
    setTimeout(res, ms);
  });
}
function symEase(easing) {
  return function (t) {
    t *= 2;
    if (t < 1) return easing(t);else return easing(-t + 2);
  };
}

// process.env.NODE_ENV === "development"
var LOG = true;
var logg = LOG ? console.log : (lodash__WEBPACK_IMPORTED_MODULE_0___default().noop);
function loop(callback) {
  var abortController = new AbortController();
  var promise = new Promise(function (resolve, reject) {
    var _looping = function looping(now) {
      if (abortController.signal.aborted || !callback(now)) {
        resolve();
        return;
      }
      requestAnimationFrame(_looping);
    };
    requestAnimationFrame(_looping);
  });
  return {
    abort: function abort() {
      return abortController.abort();
    },
    promise: promise
  };
}
})();

/******/ })()
;
//# sourceMappingURL=svelte-helper.ts.js.map